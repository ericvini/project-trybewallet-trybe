{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst styleSearch = require('style-search');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\nconst messages = ruleMessages(ruleName, {\n  rejected: hex => `Unexpected hex color \"${hex}\"`\n});\n\nfunction rule(actual) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      const declString = decl.toString();\n      styleSearch({\n        source: declString,\n        target: '#'\n      }, match => {\n        // If there's not a colon, comma, or whitespace character before, we'll assume this is\n        // not intended to be a hex color, but is instead something like the\n        // hash in a url() argument\n        if (!/[:,\\s]/.test(declString[match.startIndex - 1])) {\n          return;\n        }\n\n        const hexMatch = /^#[0-9A-Za-z]+/.exec(declString.substr(match.startIndex));\n\n        if (!hexMatch) {\n          return;\n        }\n\n        const hexValue = hexMatch[0];\n        report({\n          message: messages.rejected(hexValue),\n          node: decl,\n          index: match.startIndex,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/color-no-hex/index.js"],"names":["report","require","ruleMessages","styleSearch","validateOptions","ruleName","messages","rejected","hex","rule","actual","root","result","validOptions","walkDecls","decl","declString","toString","source","target","match","test","startIndex","hexMatch","exec","substr","hexValue","message","node","index","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMI,QAAQ,GAAG,cAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,GAAD,IAAU,yBAAwBA,GAAI;AADT,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsB;AACrB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGT,eAAe,CAACQ,MAAD,EAASP,QAAT,EAAmB;AAAEK,MAAAA;AAAF,KAAnB,CAApC;;AAEA,QAAI,CAACG,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACG,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,UAAU,GAAGD,IAAI,CAACE,QAAL,EAAnB;AAEAd,MAAAA,WAAW,CAAC;AAAEe,QAAAA,MAAM,EAAEF,UAAV;AAAsBG,QAAAA,MAAM,EAAE;AAA9B,OAAD,EAAuCC,KAAD,IAAW;AAC3D;AACA;AACA;AACA,YAAI,CAAC,SAASC,IAAT,CAAcL,UAAU,CAACI,KAAK,CAACE,UAAN,GAAmB,CAApB,CAAxB,CAAL,EAAsD;AACrD;AACA;;AAED,cAAMC,QAAQ,GAAG,iBAAiBC,IAAjB,CAAsBR,UAAU,CAACS,MAAX,CAAkBL,KAAK,CAACE,UAAxB,CAAtB,CAAjB;;AAEA,YAAI,CAACC,QAAL,EAAe;AACd;AACA;;AAED,cAAMG,QAAQ,GAAGH,QAAQ,CAAC,CAAD,CAAzB;AAEAvB,QAAAA,MAAM,CAAC;AACN2B,UAAAA,OAAO,EAAErB,QAAQ,CAACC,QAAT,CAAkBmB,QAAlB,CADH;AAENE,UAAAA,IAAI,EAAEb,IAFA;AAGNc,UAAAA,KAAK,EAAET,KAAK,CAACE,UAHP;AAINV,UAAAA,MAJM;AAKNP,UAAAA;AALM,SAAD,CAAN;AAOA,OAvBU,CAAX;AAwBA,KA3BD;AA4BA,GAnCD;AAoCA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAwB,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-no-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected hex color \"${hex}\"`,\n});\n\nfunction rule(actual) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst declString = decl.toString();\n\n\t\t\tstyleSearch({ source: declString, target: '#' }, (match) => {\n\t\t\t\t// If there's not a colon, comma, or whitespace character before, we'll assume this is\n\t\t\t\t// not intended to be a hex color, but is instead something like the\n\t\t\t\t// hash in a url() argument\n\t\t\t\tif (!/[:,\\s]/.test(declString[match.startIndex - 1])) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(declString.substr(match.startIndex));\n\n\t\t\t\tif (!hexMatch) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: match.startIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}