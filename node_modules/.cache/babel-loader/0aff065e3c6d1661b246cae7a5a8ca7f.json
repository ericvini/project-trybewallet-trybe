{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: () => 'Expected single space after \",\"',\n  rejectedAfter: () => 'Unexpected whitespace after \",\"',\n  expectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n  rejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never', 'always-single-line', 'never-single-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    let fixData;\n    mediaQueryListCommaWhitespaceChecker({\n      root,\n      result,\n      locationChecker: checker.after,\n      checkedRuleName: ruleName,\n      fix: context.fix ? (atRule, index) => {\n        const paramCommaIndex = index - atRuleParamIndex(atRule);\n        fixData = fixData || new Map();\n        const commaIndices = fixData.get(atRule) || [];\n        commaIndices.push(paramCommaIndex);\n        fixData.set(atRule, commaIndices);\n        return true;\n      } : null\n    });\n\n    if (fixData) {\n      fixData.forEach((commaIndices, atRule) => {\n        let params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n        commaIndices.sort((a, b) => b - a).forEach(index => {\n          const beforeComma = params.slice(0, index + 1);\n          const afterComma = params.slice(index + 1);\n\n          if (expectation.startsWith('always')) {\n            params = beforeComma + afterComma.replace(/^\\s*/, ' ');\n          } else if (expectation.startsWith('never')) {\n            params = beforeComma + afterComma.replace(/^\\s*/, '');\n          }\n        });\n\n        if (atRule.raws.params) {\n          atRule.raws.params.raw = params;\n        } else {\n          atRule.params = params;\n        }\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-query-list-comma-space-after/index.js"],"names":["atRuleParamIndex","require","mediaQueryListCommaWhitespaceChecker","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","rejectedAfter","expectedAfterSingleLine","rejectedAfterSingleLine","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","fixData","locationChecker","after","checkedRuleName","fix","atRule","index","paramCommaIndex","Map","commaIndices","get","push","set","forEach","params","raws","raw","sort","a","b","beforeComma","slice","afterComma","startsWith","replace","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \",\"',\n\trejectedAfter: () => 'Unexpected whitespace after \",\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \",\" in a single-line list',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \",\" in a single-line list',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixData;\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramCommaIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst commaIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcommaIndices.push(paramCommaIndex);\n\t\t\t\t\t\tfixData.set(atRule, commaIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfixData.forEach((commaIndices, atRule) => {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tcommaIndices\n\t\t\t\t\t.sort((a, b) => b - a)\n\t\t\t\t\t.forEach((index) => {\n\t\t\t\t\t\tconst beforeComma = params.slice(0, index + 1);\n\t\t\t\t\t\tconst afterComma = params.slice(index + 1);\n\n\t\t\t\t\t\tif (expectation.startsWith('always')) {\n\t\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t} else if (expectation.startsWith('never')) {\n\t\t\t\t\t\t\tparams = beforeComma + afterComma.replace(/^\\s*/, '');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}