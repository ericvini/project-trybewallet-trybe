{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'property-no-vendor-prefix';\nconst messages = ruleMessages(ruleName, {\n  rejected: property => `Unexpected vendor-prefix \"${property}\"`\n});\n\nfunction rule(actual, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      optional: true,\n      actual: options,\n      possible: {\n        ignoreProperties: [_.isString, _.isRegExp]\n      }\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      const prop = decl.prop;\n      const unprefixedProp = vendor.unprefixed(prop); //return early if property is to be ignored\n\n      if (optionsMatches(options, 'ignoreProperties', unprefixedProp)) {\n        return;\n      } // Make sure there's a vendor prefix,\n      // but this isn't a custom property\n\n\n      if (prop[0] !== '-' || prop[1] === '-') {\n        return;\n      }\n\n      if (!isAutoprefixable.property(prop)) {\n        return;\n      }\n\n      if (context.fix) {\n        decl.prop = isAutoprefixable.unprefix(decl.prop);\n        return;\n      }\n\n      report({\n        message: messages.rejected(prop),\n        node: decl,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.js"],"names":["_","require","isAutoprefixable","optionsMatches","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","property","rule","actual","options","context","root","result","validOptions","optional","possible","ignoreProperties","isString","isRegExp","walkDecls","decl","prop","unprefixedProp","unprefixed","fix","unprefix","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMO,QAAQ,GAAG,2BAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,QAAD,IAAe,6BAA4BA,QAAS;AADvB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACvC,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGZ,eAAe,CACnCW,MADmC,EAEnCT,QAFmC,EAGnC;AAAEK,MAAAA;AAAF,KAHmC,EAInC;AACCM,MAAAA,QAAQ,EAAE,IADX;AAECN,MAAAA,MAAM,EAAEC,OAFT;AAGCM,MAAAA,QAAQ,EAAE;AACTC,QAAAA,gBAAgB,EAAE,CAACrB,CAAC,CAACsB,QAAH,EAAatB,CAAC,CAACuB,QAAf;AADT;AAHX,KAJmC,CAApC;;AAaA,QAAI,CAACL,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACQ,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,YAAMC,cAAc,GAAGpB,MAAM,CAACqB,UAAP,CAAkBF,IAAlB,CAAvB,CAFwB,CAIxB;;AACA,UAAIvB,cAAc,CAACW,OAAD,EAAU,kBAAV,EAA8Ba,cAA9B,CAAlB,EAAiE;AAChE;AACA,OAPuB,CASxB;AACA;;;AAEA,UAAID,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAnC,EAAwC;AACvC;AACA;;AAED,UAAI,CAACxB,gBAAgB,CAACS,QAAjB,CAA0Be,IAA1B,CAAL,EAAsC;AACrC;AACA;;AAED,UAAIX,OAAO,CAACc,GAAZ,EAAiB;AAChBJ,QAAAA,IAAI,CAACC,IAAL,GAAYxB,gBAAgB,CAAC4B,QAAjB,CAA0BL,IAAI,CAACC,IAA/B,CAAZ;AAEA;AACA;;AAEDtB,MAAAA,MAAM,CAAC;AACN2B,QAAAA,OAAO,EAAEtB,QAAQ,CAACC,QAAT,CAAkBgB,IAAlB,CADH;AAENM,QAAAA,IAAI,EAAEP,IAFA;AAGNR,QAAAA,MAHM;AAINT,QAAAA;AAJM,OAAD,CAAN;AAMA,KAhCD;AAiCA,GAnDD;AAoDA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAwB,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'property-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected vendor-prefix \"${property}\"`,\n});\n\nfunction rule(actual, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\t//return early if property is to be ignored\n\t\t\tif (optionsMatches(options, 'ignoreProperties', unprefixedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure there's a vendor prefix,\n\t\t\t// but this isn't a custom property\n\n\t\t\tif (prop[0] !== '-' || prop[1] === '-') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.property(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = isAutoprefixable.unprefix(decl.prop);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}