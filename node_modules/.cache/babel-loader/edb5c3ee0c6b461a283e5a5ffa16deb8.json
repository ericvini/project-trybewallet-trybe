{"ast":null,"code":"'use strict';\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\n\nmodule.exports = function (node) {\n  // if it's not a combinator, then it's not a standard combinator\n  if (node.type !== 'combinator') {\n    return false;\n  } // Ignore reference combinators like `/deep/`\n\n\n  if (node.value.startsWith('/') || node.value.endsWith('/')) {\n    return false;\n  } // ignore the combinators that are the first or last node in their container\n\n\n  if (node.parent !== undefined && node.parent !== null) {\n    let parent = node.parent;\n\n    if (node === parent.first) {\n      return false;\n    }\n\n    if (node === parent.last) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/isStandardSyntaxCombinator.js"],"names":["module","exports","node","type","value","startsWith","endsWith","parent","undefined","first","last"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAChC;AACA,MAAIA,IAAI,CAACC,IAAL,KAAc,YAAlB,EAAgC;AAC/B,WAAO,KAAP;AACA,GAJ+B,CAMhC;;;AACA,MAAID,IAAI,CAACE,KAAL,CAAWC,UAAX,CAAsB,GAAtB,KAA8BH,IAAI,CAACE,KAAL,CAAWE,QAAX,CAAoB,GAApB,CAAlC,EAA4D;AAC3D,WAAO,KAAP;AACA,GAT+B,CAWhC;;;AACA,MAAIJ,IAAI,CAACK,MAAL,KAAgBC,SAAhB,IAA6BN,IAAI,CAACK,MAAL,KAAgB,IAAjD,EAAuD;AACtD,QAAIA,MAAM,GAAGL,IAAI,CAACK,MAAlB;;AAEA,QAAIL,IAAI,KAAKK,MAAM,CAACE,KAApB,EAA2B;AAC1B,aAAO,KAAP;AACA;;AAED,QAAIP,IAAI,KAAKK,MAAM,CAACG,IAApB,EAA0B;AACzB,aAAO,KAAP;AACA;AACD;;AAED,SAAO,IAAP;AACA,CAzBD","sourcesContent":["'use strict';\n\n/**\n * Check whether a combinator is standard\n *\n * @param {import('postcss-selector-parser').Combinator} node postcss-selector-parser node (of type combinator)\n * @return {boolean} If `true`, the combinator is standard\n */\nmodule.exports = function (node) {\n\t// if it's not a combinator, then it's not a standard combinator\n\tif (node.type !== 'combinator') {\n\t\treturn false;\n\t}\n\n\t// Ignore reference combinators like `/deep/`\n\tif (node.value.startsWith('/') || node.value.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\t// ignore the combinators that are the first or last node in their container\n\tif (node.parent !== undefined && node.parent !== null) {\n\t\tlet parent = node.parent;\n\n\t\tif (node === parent.first) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node === parent.last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n"]},"metadata":{},"sourceType":"script"}