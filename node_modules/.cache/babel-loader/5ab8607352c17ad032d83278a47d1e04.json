{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _max2 = _interopRequireDefault(require(\"lodash/max\"));\n\nvar _isBoolean2 = _interopRequireDefault(require(\"lodash/isBoolean\"));\n\nvar _isNumber2 = _interopRequireDefault(require(\"lodash/isNumber\"));\n\nvar _calculateCellHeight = _interopRequireDefault(require(\"./calculateCellHeight\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Calculates the vertical row span index.\n *\n * @param {Array[]} rows\n * @param {object} config\n * @returns {number[]}\n */\n\n\nconst calculateRowHeightIndex = (rows, config) => {\n  const tableWidth = rows[0].length;\n  const rowSpanIndex = [];\n  rows.forEach(cells => {\n    const cellHeightIndex = new Array(tableWidth).fill(1);\n    cells.forEach((value, index1) => {\n      if (!(0, _isNumber2.default)(config.columns[index1].width)) {\n        throw new TypeError('column[index].width must be a number.');\n      }\n\n      if (!(0, _isBoolean2.default)(config.columns[index1].wrapWord)) {\n        throw new TypeError('column[index].wrapWord must be a boolean.');\n      }\n\n      cellHeightIndex[index1] = (0, _calculateCellHeight.default)(value, config.columns[index1].width, config.columns[index1].wrapWord);\n    });\n    rowSpanIndex.push((0, _max2.default)(cellHeightIndex));\n  });\n  return rowSpanIndex;\n};\n\nvar _default = calculateRowHeightIndex;\nexports.default = _default;","map":{"version":3,"sources":["../src/calculateRowHeightIndex.js"],"names":["rows","config","tableWidth","rowSpanIndex","cells","cellHeightIndex"],"mappings":";;;;;;;;;;;;;AACA,IAAA,oBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;iCACgBA,I,EAAMC,M,KAAW;AAC/B,QAAMC,UAAU,GAAGF,IAAI,CAAJA,CAAI,CAAJA,CAAnB,MAAA;AAEA,QAAMG,YAAY,GAAlB,EAAA;AAEAH,EAAAA,IAAI,CAAJA,OAAAA,CAAcI,KAAD,IAAW;AACtB,UAAMC,eAAe,GAAG,IAAA,KAAA,CAAA,UAAA,EAAA,IAAA,CAAxB,CAAwB,CAAxB;AAEAD,IAAAA,KAAK,CAALA,OAAAA,CAAc,CAAA,KAAA,EAAA,MAAA,KAAmB;AAC/B,UAAI,CAAC,CAAA,GAAA,UAAA,CAAA,OAAA,EAAWH,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAhB,KAAK,CAAL,EAA+C;AAC7C,cAAM,IAAA,SAAA,CAAN,uCAAM,CAAN;AACD;;AAED,UAAI,CAAC,CAAA,GAAA,WAAA,CAAA,OAAA,EAAYA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAjB,QAAK,CAAL,EAAmD;AACjD,cAAM,IAAA,SAAA,CAAN,2CAAM,CAAN;AACD;;AAEDI,MAAAA,eAAe,CAAfA,MAAe,CAAfA,GAA0B,CAAA,GAAA,oBAAA,CAAA,OAAA,EAAA,KAAA,EAA2BJ,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAA3B,KAAA,EAAyDA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAnFI,QAA0B,CAA1BA;AATFD,KAAAA;AAYAD,IAAAA,YAAY,CAAZA,IAAAA,CAAkB,CAAA,GAAA,KAAA,CAAA,OAAA,EAAlBA,eAAkB,CAAlBA;AAfFH,GAAAA;AAkBA,SAAA,YAAA","sourcesContent":["import _ from 'lodash';\nimport calculateCellHeight from './calculateCellHeight';\n\n/**\n * Calculates the vertical row span index.\n *\n * @param {Array[]} rows\n * @param {object} config\n * @returns {number[]}\n */\nexport default (rows, config) => {\n  const tableWidth = rows[0].length;\n\n  const rowSpanIndex = [];\n\n  rows.forEach((cells) => {\n    const cellHeightIndex = new Array(tableWidth).fill(1);\n\n    cells.forEach((value, index1) => {\n      if (!_.isNumber(config.columns[index1].width)) {\n        throw new TypeError('column[index].width must be a number.');\n      }\n\n      if (!_.isBoolean(config.columns[index1].wrapWord)) {\n        throw new TypeError('column[index].wrapWord must be a boolean.');\n      }\n\n      cellHeightIndex[index1] = calculateCellHeight(value, config.columns[index1].width, config.columns[index1].wrapWord);\n    });\n\n    rowSpanIndex.push(_.max(cellHeightIndex));\n  });\n\n  return rowSpanIndex;\n};\n"]},"metadata":{},"sourceType":"script"}