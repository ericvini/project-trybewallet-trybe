{"ast":null,"code":"'use strict';\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').StylelintResult[]} results\n */\n\nmodule.exports = function (results) {\n  results.forEach(result => {\n    // File with `CssSyntaxError` have not `_postcssResult`\n    if (!result._postcssResult) {\n      return;\n    }\n\n    if (!result._postcssResult.stylelint.config) {\n      // Linting error\n      return;\n    }\n\n    const configRules = result._postcssResult.stylelint.config.rules || {};\n    const usedRules = new Set(Object.keys(configRules));\n    usedRules.add('all');\n    const rangeData = result._postcssResult.stylelint.disabledRanges;\n    const disabledRules = Object.keys(rangeData);\n    disabledRules.forEach(rule => {\n      if (usedRules.has(rule)) {\n        return;\n      }\n\n      rangeData[rule].forEach(range => {\n        if (!range.strictStart && !range.strictEnd) {\n          return;\n        } // If the comment doesn't have a location, we can't report a useful error.\n        // In practice we expect all comments to have locations, though.\n\n\n        if (!range.comment.source || !range.comment.source.start) return;\n        result.warnings.push({\n          text: `Rule \"${rule}\" isn't enabled`,\n          rule: '--report-invalid-scope-disables',\n          line: range.comment.source.start.line,\n          column: range.comment.source.start.column,\n          severity: 'error'\n        });\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/invalidScopeDisables.js"],"names":["module","exports","results","forEach","result","_postcssResult","stylelint","config","configRules","rules","usedRules","Set","Object","keys","add","rangeData","disabledRanges","disabledRules","rule","has","range","strictStart","strictEnd","comment","source","start","warnings","push","text","line","column","severity"],"mappings":"AAAA;AAEA;;AAEA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AACnCA,EAAAA,OAAO,CAACC,OAAR,CAAiBC,MAAD,IAAY;AAC3B;AACA,QAAI,CAACA,MAAM,CAACC,cAAZ,EAA4B;AAC3B;AACA;;AAED,QAAI,CAACD,MAAM,CAACC,cAAP,CAAsBC,SAAtB,CAAgCC,MAArC,EAA6C;AAC5C;AACA;AACA;;AAED,UAAMC,WAAW,GAAGJ,MAAM,CAACC,cAAP,CAAsBC,SAAtB,CAAgCC,MAAhC,CAAuCE,KAAvC,IAAgD,EAApE;AAEA,UAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYL,WAAZ,CAAR,CAAlB;AAEAE,IAAAA,SAAS,CAACI,GAAV,CAAc,KAAd;AAEA,UAAMC,SAAS,GAAGX,MAAM,CAACC,cAAP,CAAsBC,SAAtB,CAAgCU,cAAlD;AACA,UAAMC,aAAa,GAAGL,MAAM,CAACC,IAAP,CAAYE,SAAZ,CAAtB;AAEAE,IAAAA,aAAa,CAACd,OAAd,CAAuBe,IAAD,IAAU;AAC/B,UAAIR,SAAS,CAACS,GAAV,CAAcD,IAAd,CAAJ,EAAyB;AACxB;AACA;;AAEDH,MAAAA,SAAS,CAACG,IAAD,CAAT,CAAgBf,OAAhB,CAAyBiB,KAAD,IAAW;AAClC,YAAI,CAACA,KAAK,CAACC,WAAP,IAAsB,CAACD,KAAK,CAACE,SAAjC,EAA4C;AAC3C;AACA,SAHiC,CAKlC;AACA;;;AACA,YAAI,CAACF,KAAK,CAACG,OAAN,CAAcC,MAAf,IAAyB,CAACJ,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAAnD,EAA0D;AAE1DrB,QAAAA,MAAM,CAACsB,QAAP,CAAgBC,IAAhB,CAAqB;AACpBC,UAAAA,IAAI,EAAG,SAAQV,IAAK,iBADA;AAEpBA,UAAAA,IAAI,EAAE,iCAFc;AAGpBW,UAAAA,IAAI,EAAET,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAArB,CAA2BI,IAHb;AAIpBC,UAAAA,MAAM,EAAEV,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAArB,CAA2BK,MAJf;AAKpBC,UAAAA,QAAQ,EAAE;AALU,SAArB;AAOA,OAhBD;AAiBA,KAtBD;AAuBA,GA3CD;AA4CA,CA7CD","sourcesContent":["'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').StylelintResult[]} results\n */\nmodule.exports = function (results) {\n\tresults.forEach((result) => {\n\t\t// File with `CssSyntaxError` have not `_postcssResult`\n\t\tif (!result._postcssResult) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!result._postcssResult.stylelint.config) {\n\t\t\t// Linting error\n\t\t\treturn;\n\t\t}\n\n\t\tconst configRules = result._postcssResult.stylelint.config.rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\t\tconst disabledRules = Object.keys(rangeData);\n\n\t\tdisabledRules.forEach((rule) => {\n\t\t\tif (usedRules.has(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trangeData[rule].forEach((range) => {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) return;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}