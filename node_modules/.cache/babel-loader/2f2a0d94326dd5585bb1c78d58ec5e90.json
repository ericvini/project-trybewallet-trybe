{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\nconst messages = ruleMessages(ruleName, {\n  expected: primary => `Expected ${primary} color-function notation`\n});\nconst LEGACY_FUNCS = ['rgba', 'hsla'];\nconst LEGACY_NOTATION_FUNCS = ['rgb', 'rgba', 'hsl', 'hsla'];\n\nfunction rule(primary, secondary, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: primary,\n      possible: ['modern', 'legacy']\n    });\n    if (!validOptions) return;\n    root.walkDecls(decl => {\n      let needsFix = false;\n      const parsedValue = valueParser(getValue(decl));\n      parsedValue.walk(node => {\n        const {\n          value,\n          type,\n          sourceIndex,\n          nodes\n        } = node;\n        if (type !== 'function') return;\n        if (!LEGACY_NOTATION_FUNCS.includes(value.toLowerCase())) return;\n        if (primary === 'modern' && !hasCommas(node)) return;\n        if (primary === 'legacy' && hasCommas(node)) return;\n\n        if (context.fix && primary === 'modern') {\n          let commaCount = 0; // Convert punctuation\n\n          node.nodes = nodes.map(childNode => {\n            if (isComma(childNode)) {\n              // Non-alpha commas to space and alpha commas to slashes\n              if (commaCount < 2) {\n                childNode.type = 'space';\n                childNode.value = atLeastOneSpace(childNode.after);\n                commaCount++;\n              } else {\n                childNode.value = '/';\n                childNode.before = atLeastOneSpace(childNode.before);\n                childNode.after = atLeastOneSpace(childNode.after);\n              }\n            }\n\n            return childNode;\n          }); // Remove trailing 'a' from legacy function name\n\n          if (LEGACY_FUNCS.includes(node.value.toLowerCase())) {\n            node.value = node.value.slice(0, -1);\n          }\n\n          needsFix = true;\n          return;\n        }\n\n        report({\n          message: messages.expected(primary),\n          node: decl,\n          index: declarationValueIndex(decl) + sourceIndex,\n          result,\n          ruleName\n        });\n      });\n\n      if (needsFix) {\n        setValue(decl, parsedValue.toString());\n      }\n    });\n  };\n}\n\nfunction atLeastOneSpace(whitespace) {\n  return whitespace !== '' ? whitespace : ' ';\n}\n\nfunction isComma(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nfunction hasCommas(node) {\n  return node.nodes && node.nodes.some(childNode => isComma(childNode));\n}\n\nfunction getValue(decl) {\n  return decl.raws.value ? decl.raws.value.raw : decl.value;\n}\n\nfunction setValue(decl, value) {\n  if (decl.raws.value) decl.raws.value.raw = value;else decl.value = value;\n  return decl;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/color-function-notation/index.js"],"names":["valueParser","require","declarationValueIndex","report","ruleMessages","validateOptions","ruleName","messages","expected","primary","LEGACY_FUNCS","LEGACY_NOTATION_FUNCS","rule","secondary","context","root","result","validOptions","actual","possible","walkDecls","decl","needsFix","parsedValue","getValue","walk","node","value","type","sourceIndex","nodes","includes","toLowerCase","hasCommas","fix","commaCount","map","childNode","isComma","atLeastOneSpace","after","before","slice","message","index","setValue","toString","whitespace","some","raws","raw","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-function-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (primary) => `Expected ${primary} color-function notation`,\n});\n\nconst LEGACY_FUNCS = ['rgba', 'hsla'];\nconst LEGACY_NOTATION_FUNCS = ['rgb', 'rgba', 'hsl', 'hsla'];\n\nfunction rule(primary, secondary, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['modern', 'legacy'],\n\t\t});\n\n\t\tif (!validOptions) return;\n\n\t\troot.walkDecls((decl) => {\n\t\t\tlet needsFix = false;\n\t\t\tconst parsedValue = valueParser(getValue(decl));\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value, type, sourceIndex, nodes } = node;\n\n\t\t\t\tif (type !== 'function') return;\n\n\t\t\t\tif (!LEGACY_NOTATION_FUNCS.includes(value.toLowerCase())) return;\n\n\t\t\t\tif (primary === 'modern' && !hasCommas(node)) return;\n\n\t\t\t\tif (primary === 'legacy' && hasCommas(node)) return;\n\n\t\t\t\tif (context.fix && primary === 'modern') {\n\t\t\t\t\tlet commaCount = 0;\n\n\t\t\t\t\t// Convert punctuation\n\t\t\t\t\tnode.nodes = nodes.map((childNode) => {\n\t\t\t\t\t\tif (isComma(childNode)) {\n\t\t\t\t\t\t\t// Non-alpha commas to space and alpha commas to slashes\n\t\t\t\t\t\t\tif (commaCount < 2) {\n\t\t\t\t\t\t\t\tchildNode.type = 'space';\n\t\t\t\t\t\t\t\tchildNode.value = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t\tcommaCount++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchildNode.value = '/';\n\t\t\t\t\t\t\t\tchildNode.before = atLeastOneSpace(childNode.before);\n\t\t\t\t\t\t\t\tchildNode.after = atLeastOneSpace(childNode.after);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Remove trailing 'a' from legacy function name\n\t\t\t\t\tif (LEGACY_FUNCS.includes(node.value.toLowerCase())) {\n\t\t\t\t\t\tnode.value = node.value.slice(0, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(primary),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n}\n\nfunction atLeastOneSpace(whitespace) {\n\treturn whitespace !== '' ? whitespace : ' ';\n}\n\nfunction isComma(node) {\n\treturn node.type === 'div' && node.value === ',';\n}\n\nfunction hasCommas(node) {\n\treturn node.nodes && node.nodes.some((childNode) => isComma(childNode));\n}\n\nfunction getValue(decl) {\n\treturn decl.raws.value ? decl.raws.value.raw : decl.value;\n}\n\nfunction setValue(decl, value) {\n\tif (decl.raws.value) decl.raws.value.raw = value;\n\telse decl.value = value;\n\n\treturn decl;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}