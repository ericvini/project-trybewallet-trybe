{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: name => `Expected single space after at-rule name \"${name}\"`\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'always-single-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    atRuleNameSpaceChecker({\n      root,\n      result,\n      locationChecker: checker.after,\n      checkedRuleName: ruleName,\n      fix: context.fix ? atRule => {\n        atRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n      } : null\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-name-space-after/index.js"],"names":["atRuleNameSpaceChecker","require","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","name","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","locationChecker","after","checkedRuleName","fix","atRule","raws","afterName","replace","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,2BAAD,CAAtC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMI,QAAQ,GAAG,0BAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,aAAa,EAAGC,IAAD,IAAW,6CAA4CA,IAAK;AADpC,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC5C,QAAMC,OAAO,GAAGT,iBAAiB,CAAC,OAAD,EAAUM,WAAV,EAAuBJ,QAAvB,CAAjC;AAEA,SAAO,CAACQ,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGb,eAAe,CAACY,MAAD,EAASV,QAAT,EAAmB;AACtDY,MAAAA,MAAM,EAAEP,WAD8C;AAEtDQ,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,oBAAX;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDhB,IAAAA,sBAAsB,CAAC;AACtBc,MAAAA,IADsB;AAEtBC,MAAAA,MAFsB;AAGtBI,MAAAA,eAAe,EAAEN,OAAO,CAACO,KAHH;AAItBC,MAAAA,eAAe,EAAEhB,QAJK;AAKtBiB,MAAAA,GAAG,EAAEV,OAAO,CAACU,GAAR,GACDC,MAAD,IAAY;AACZA,QAAAA,MAAM,CAACC,IAAP,CAAYC,SAAZ,GAAwBF,MAAM,CAACC,IAAP,CAAYC,SAAZ,CAAsBC,OAAtB,CAA8B,MAA9B,EAAsC,GAAtC,CAAxB;AACC,OAHC,GAIF;AATmB,KAAD,CAAtB;AAWA,GArBD;AAsBA;;AAEDjB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAqB,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected single space after at-rule name \"${name}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'always-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule) => {\n\t\t\t\t\t\tatRule.raws.afterName = atRule.raws.afterName.replace(/^\\s*/, ' ');\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}