{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: name => `Expected newline after at-rule name \"${name}\"`\n});\n\nfunction rule(expectation) {\n  const checker = whitespaceChecker('newline', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'always-multi-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    atRuleNameSpaceChecker({\n      root,\n      result,\n      locationChecker: checker.afterOneOnly,\n      checkedRuleName: ruleName\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-name-newline-after/index.js"],"names":["atRuleNameSpaceChecker","require","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","name","rule","expectation","checker","root","result","validOptions","actual","possible","locationChecker","afterOneOnly","checkedRuleName","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,2BAAD,CAAtC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMI,QAAQ,GAAG,4BAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,aAAa,EAAGC,IAAD,IAAW,wCAAuCA,IAAK;AAD/B,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,WAAd,EAA2B;AAC1B,QAAMC,OAAO,GAAGP,iBAAiB,CAAC,SAAD,EAAYM,WAAZ,EAAyBJ,QAAzB,CAAjC;AAEA,SAAO,CAACM,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAASR,QAAT,EAAmB;AACtDU,MAAAA,MAAM,EAAEL,WAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,mBAAX;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDd,IAAAA,sBAAsB,CAAC;AACtBY,MAAAA,IADsB;AAEtBC,MAAAA,MAFsB;AAGtBI,MAAAA,eAAe,EAAEN,OAAO,CAACO,YAHH;AAItBC,MAAAA,eAAe,EAAEd;AAJK,KAAD,CAAtB;AAMA,GAhBD;AAiBA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAc,MAAM,CAACC,OAAP,GAAiBZ,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleNameSpaceChecker = require('../atRuleNameSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-name-newline-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (name) => `Expected newline after at-rule name \"${name}\"`,\n});\n\nfunction rule(expectation) {\n\tconst checker = whitespaceChecker('newline', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'always-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tatRuleNameSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.afterOneOnly,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}