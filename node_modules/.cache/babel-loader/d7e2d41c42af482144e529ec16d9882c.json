{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\n\nconst isCustomPropertySet = require('../../utils/isCustomPropertySet');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst specificity = require('specificity');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-descending-specificity';\nconst messages = ruleMessages(ruleName, {\n  rejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`\n});\n\nfunction rule(on, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: on\n    }, {\n      optional: true,\n      actual: options,\n      possible: {\n        ignore: ['selectors-within-list']\n      }\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const selectorContextLookup = nodeContextLookup(); // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n    root.walkRules(rule => {\n      // Ignore custom property set `--foo: {};`\n      if (isCustomPropertySet(rule)) {\n        return;\n      } // Ignore nested property `foo: {};`\n\n\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      } // Ignores selectors within list of selectors\n\n\n      if (optionsMatches(options, 'ignore', 'selectors-within-list') && rule.selectors.length > 1) {\n        return;\n      }\n\n      const comparisonContext = selectorContextLookup.getContext(rule, findAtRuleContext(rule));\n      rule.selectors.forEach(selector => {\n        const trimSelector = selector.trim(); // Ignore `.selector, { }`\n\n        if (trimSelector === '') {\n          return;\n        } // The edge-case of duplicate selectors will act acceptably\n\n\n        const index = rule.selector.indexOf(trimSelector); // Resolve any nested selectors before checking\n\n        resolvedNestedSelector(selector, rule).forEach(resolvedSelector => {\n          parseSelector(resolvedSelector, result, rule, s => {\n            if (!isStandardSyntaxSelector(resolvedSelector)) {\n              return;\n            }\n\n            checkSelector(s, rule, index, comparisonContext);\n          });\n        });\n      });\n    }); // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n    function checkSelector(selectorNode, rule, sourceIndex, comparisonContext) {\n      const selector = selectorNode.toString();\n      const referenceSelectorNode = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n      const selectorSpecificity = specificity.calculate(selector)[0].specificityArray;\n      const entry = {\n        selector,\n        specificity: selectorSpecificity\n      };\n\n      if (!comparisonContext.has(referenceSelectorNode)) {\n        comparisonContext.set(referenceSelectorNode, [entry]);\n        return;\n      }\n\n      const priorComparableSelectors = comparisonContext.get(referenceSelectorNode);\n      priorComparableSelectors.forEach(priorEntry => {\n        if (specificity.compare(selectorSpecificity, priorEntry.specificity) === -1) {\n          report({\n            ruleName,\n            result,\n            node: rule,\n            message: messages.rejected(selector, priorEntry.selector),\n            index: sourceIndex\n          });\n        }\n      });\n      priorComparableSelectors.push(entry);\n    }\n  };\n}\n\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n  const nodesAfterLastCombinator = _.last(selectorNode.nodes[0].split(node => {\n    return node.type === 'combinator';\n  }));\n\n  const nodesWithoutPseudoClasses = nodesAfterLastCombinator.filter(node => {\n    return node.type !== 'pseudo' || keywordSets.pseudoElements.has(node.value.replace(/:/g, ''));\n  }).join('');\n  return nodesWithoutPseudoClasses.toString();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/no-descending-specificity/index.js"],"names":["_","require","findAtRuleContext","isCustomPropertySet","isStandardSyntaxRule","isStandardSyntaxSelector","keywordSets","nodeContextLookup","optionsMatches","parseSelector","report","resolvedNestedSelector","ruleMessages","specificity","validateOptions","ruleName","messages","rejected","b","a","rule","on","options","root","result","validOptions","actual","optional","possible","ignore","selectorContextLookup","walkRules","selectors","length","comparisonContext","getContext","forEach","selector","trimSelector","trim","index","indexOf","resolvedSelector","s","checkSelector","selectorNode","sourceIndex","toString","referenceSelectorNode","lastCompoundSelectorWithoutPseudoClasses","selectorSpecificity","calculate","specificityArray","entry","has","set","priorComparableSelectors","get","priorEntry","compare","node","message","push","nodesAfterLastCombinator","last","nodes","split","type","nodesWithoutPseudoClasses","filter","pseudoElements","value","replace","join","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst findAtRuleContext = require('../../utils/findAtRuleContext');\nconst isCustomPropertySet = require('../../utils/isCustomPropertySet');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst nodeContextLookup = require('../../utils/nodeContextLookup');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst specificity = require('specificity');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'no-descending-specificity';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,\n});\n\nfunction rule(on, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: on,\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['selectors-within-list'],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectorContextLookup = nodeContextLookup();\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\t// Ignore custom property set `--foo: {};`\n\t\t\tif (isCustomPropertySet(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore nested property `foo: {};`\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignores selectors within list of selectors\n\t\t\tif (optionsMatches(options, 'ignore', 'selectors-within-list') && rule.selectors.length > 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst comparisonContext = selectorContextLookup.getContext(rule, findAtRuleContext(rule));\n\n\t\t\trule.selectors.forEach((selector) => {\n\t\t\t\tconst trimSelector = selector.trim();\n\n\t\t\t\t// Ignore `.selector, { }`\n\t\t\t\tif (trimSelector === '') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// The edge-case of duplicate selectors will act acceptably\n\t\t\t\tconst index = rule.selector.indexOf(trimSelector);\n\n\t\t\t\t// Resolve any nested selectors before checking\n\t\t\t\tresolvedNestedSelector(selector, rule).forEach((resolvedSelector) => {\n\t\t\t\t\tparseSelector(resolvedSelector, result, rule, (s) => {\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcheckSelector(s, rule, index, comparisonContext);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\tfunction checkSelector(selectorNode, rule, sourceIndex, comparisonContext) {\n\t\t\tconst selector = selectorNode.toString();\n\t\t\tconst referenceSelectorNode = lastCompoundSelectorWithoutPseudoClasses(selectorNode);\n\t\t\tconst selectorSpecificity = specificity.calculate(selector)[0].specificityArray;\n\t\t\tconst entry = { selector, specificity: selectorSpecificity };\n\n\t\t\tif (!comparisonContext.has(referenceSelectorNode)) {\n\t\t\t\tcomparisonContext.set(referenceSelectorNode, [entry]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst priorComparableSelectors = comparisonContext.get(referenceSelectorNode);\n\n\t\t\tpriorComparableSelectors.forEach((priorEntry) => {\n\t\t\t\tif (specificity.compare(selectorSpecificity, priorEntry.specificity) === -1) {\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tmessage: messages.rejected(selector, priorEntry.selector),\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tpriorComparableSelectors.push(entry);\n\t\t}\n\t};\n}\n\nfunction lastCompoundSelectorWithoutPseudoClasses(selectorNode) {\n\tconst nodesAfterLastCombinator = _.last(\n\t\tselectorNode.nodes[0].split((node) => {\n\t\t\treturn node.type === 'combinator';\n\t\t}),\n\t);\n\n\tconst nodesWithoutPseudoClasses = nodesAfterLastCombinator\n\t\t.filter((node) => {\n\t\t\treturn node.type !== 'pseudo' || keywordSets.pseudoElements.has(node.value.replace(/:/g, ''));\n\t\t})\n\t\t.join('');\n\n\treturn nodesWithoutPseudoClasses.toString();\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}