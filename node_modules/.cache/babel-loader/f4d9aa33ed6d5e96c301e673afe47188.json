{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: () => 'Expected single space after \":\"',\n  rejectedAfter: () => 'Unexpected whitespace after \":\"'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    let fixData;\n    mediaFeatureColonSpaceChecker({\n      root,\n      result,\n      locationChecker: checker.after,\n      checkedRuleName: ruleName,\n      fix: context.fix ? (atRule, index) => {\n        const paramColonIndex = index - atRuleParamIndex(atRule);\n        fixData = fixData || new Map();\n        const colonIndices = fixData.get(atRule) || [];\n        colonIndices.push(paramColonIndex);\n        fixData.set(atRule, colonIndices);\n        return true;\n      } : null\n    });\n\n    if (fixData) {\n      fixData.forEach((colonIndices, atRule) => {\n        let params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n        colonIndices.sort((a, b) => b - a).forEach(index => {\n          const beforeColon = params.slice(0, index + 1);\n          const afterColon = params.slice(index + 1);\n\n          if (expectation === 'always') {\n            params = beforeColon + afterColon.replace(/^\\s*/, ' ');\n          } else if (expectation === 'never') {\n            params = beforeColon + afterColon.replace(/^\\s*/, '');\n          }\n        });\n\n        if (atRule.raws.params) {\n          atRule.raws.params.raw = params;\n        } else {\n          atRule.params = params;\n        }\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-feature-colon-space-after/index.js"],"names":["atRuleParamIndex","require","mediaFeatureColonSpaceChecker","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","rejectedAfter","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","fixData","locationChecker","after","checkedRuleName","fix","atRule","index","paramColonIndex","Map","colonIndices","get","push","set","forEach","params","raws","raw","sort","a","b","beforeColon","slice","afterColon","replace","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst mediaFeatureColonSpaceChecker = require('../mediaFeatureColonSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-colon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \":\"',\n\trejectedAfter: () => 'Unexpected whitespace after \":\"',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet fixData;\n\n\t\tmediaFeatureColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (atRule, index) => {\n\t\t\t\t\t\tconst paramColonIndex = index - atRuleParamIndex(atRule);\n\n\t\t\t\t\t\tfixData = fixData || new Map();\n\t\t\t\t\t\tconst colonIndices = fixData.get(atRule) || [];\n\n\t\t\t\t\t\tcolonIndices.push(paramColonIndex);\n\t\t\t\t\t\tfixData.set(atRule, colonIndices);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\n\t\tif (fixData) {\n\t\t\tfixData.forEach((colonIndices, atRule) => {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tcolonIndices\n\t\t\t\t\t.sort((a, b) => b - a)\n\t\t\t\t\t.forEach((index) => {\n\t\t\t\t\t\tconst beforeColon = params.slice(0, index + 1);\n\t\t\t\t\t\tconst afterColon = params.slice(index + 1);\n\n\t\t\t\t\t\tif (expectation === 'always') {\n\t\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, ' ');\n\t\t\t\t\t\t} else if (expectation === 'never') {\n\t\t\t\t\t\t\tparams = beforeColon + afterColon.replace(/^\\s*/, '');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}