{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst fastGlob = require('fast-glob');\n\nconst gitIgnore = require('ignore');\n\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n  if (ignore.startsWith('!')) {\n    return '!' + path.posix.join(base, ignore.slice(1));\n  }\n\n  return path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n  const base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(line => !line.startsWith('#')).map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n  return files.reduce((ignores, file) => {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n    return ignores;\n  }, gitIgnore());\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n  cwd = slash(cwd);\n\n  if (path.isAbsolute(p)) {\n    if (p.startsWith(cwd)) {\n      return p;\n    }\n\n    throw new Error(`Path ${p} is not in cwd ${cwd}`);\n  }\n\n  return path.join(cwd, p);\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n  return p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p))));\n};\n\nconst getFile = async (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = await readFileP(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\n\nconst getFileSync = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\n\nconst normalizeOptions = ({\n  ignore = [],\n  cwd = slash(process.cwd())\n} = {}) => {\n  return {\n    ignore,\n    cwd\n  };\n};\n\nmodule.exports = async options => {\n  options = normalizeOptions(options);\n  const paths = await fastGlob('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};\n\nmodule.exports.sync = options => {\n  options = normalizeOptions(options);\n  const paths = fastGlob.sync('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = paths.map(file => getFileSync(file, options.cwd));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/node_modules/globby/gitignore.js"],"names":["promisify","require","fs","path","fastGlob","gitIgnore","slash","DEFAULT_IGNORE","readFileP","readFile","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","reduce","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredecate","getFile","getFileSync","readFileSync","normalizeOptions","process","module","exports","paths","concat","Promise","all","sync"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst fastGlob = require('fast-glob');\nconst gitIgnore = require('ignore');\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git'\n];\n\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\treturn files.reduce((ignores, file) => {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath\n\t\t}));\n\t\treturn ignores;\n\t}, gitIgnore());\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (p.startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n\treturn p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p))));\n};\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await readFileP(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd())\n} = {}) => {\n\treturn {ignore, cwd};\n};\n\nmodule.exports = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n\nmodule.exports.sync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n"]},"metadata":{},"sourceType":"script"}