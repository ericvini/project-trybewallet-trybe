{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['lower', 'upper']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    function check(node, value, getIndex) {\n      const violations = [];\n\n      function processValue(valueNode) {\n        const unit = getUnitFromValueNode(valueNode);\n\n        if (!unit) {\n          return false;\n        }\n\n        const expectedUnit = expectation === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n        if (unit === expectedUnit) {\n          return false;\n        }\n\n        violations.push({\n          index: getIndex(node) + valueNode.sourceIndex,\n          message: messages.expected(unit, expectedUnit)\n        });\n        return true;\n      }\n\n      const parsedValue = valueParser(value).walk(valueNode => {\n        // Ignore wrong units within `url` function\n        let needFix = false; // TODO: Issue #4985\n        // eslint-disable-next-line no-shadow\n\n        const value = valueNode.value;\n\n        if (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n          return false;\n        }\n\n        if (value.includes('*')) {\n          value.split('*').some(val => {\n            return processValue({ ...valueNode,\n              sourceIndex: value.indexOf(val) + val.length + 1,\n              value: val\n            });\n          });\n        }\n\n        needFix = processValue(valueNode);\n\n        if (needFix && context.fix) {\n          valueNode.value = expectation === 'lower' ? value.toLowerCase() : value.toUpperCase();\n        }\n      });\n\n      if (violations.length) {\n        if (context.fix) {\n          if (node.name === 'media') {\n            node.params = parsedValue.toString();\n          } else {\n            node.value = parsedValue.toString();\n          }\n        } else {\n          violations.forEach(err => {\n            report({\n              index: err.index,\n              message: err.message,\n              node,\n              result,\n              ruleName\n            });\n          });\n        }\n      }\n    }\n\n    root.walkAtRules(atRule => {\n      if (!/^media$/i.test(atRule.name) && !atRule.variable) {\n        return;\n      }\n\n      check(atRule, atRule.params, atRuleParamIndex);\n    });\n    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex));\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/unit-case/index.js"],"names":["atRuleParamIndex","require","declarationValueIndex","getUnitFromValueNode","report","ruleMessages","validateOptions","valueParser","ruleName","messages","expected","actual","rule","expectation","options","context","root","result","validOptions","possible","check","node","value","getIndex","violations","processValue","valueNode","unit","expectedUnit","toLowerCase","toUpperCase","push","index","sourceIndex","message","parsedValue","walk","needFix","type","includes","split","some","val","indexOf","length","fix","name","params","toString","forEach","err","walkAtRules","atRule","test","variable","walkDecls","decl","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction check(node, value, getIndex) {\n\t\t\tconst violations = [];\n\n\t\t\tfunction processValue(valueNode) {\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst expectedUnit = expectation === 'lower' ? unit.toLowerCase() : unit.toUpperCase();\n\n\t\t\t\tif (unit === expectedUnit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tviolations.push({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.expected(unit, expectedUnit),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parsedValue = valueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tlet needFix = false;\n\t\t\t\t// TODO: Issue #4985\n\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\tconst value = valueNode.value;\n\n\t\t\t\tif (valueNode.type === 'function' && value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (value.includes('*')) {\n\t\t\t\t\tvalue.split('*').some((val) => {\n\t\t\t\t\t\treturn processValue({\n\t\t\t\t\t\t\t...valueNode,\n\t\t\t\t\t\t\tsourceIndex: value.indexOf(val) + val.length + 1,\n\t\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tneedFix = processValue(valueNode);\n\n\t\t\t\tif (needFix && context.fix) {\n\t\t\t\t\tvalueNode.value = expectation === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (violations.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (node.name === 'media') {\n\t\t\t\t\t\tnode.params = parsedValue.toString();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = parsedValue.toString();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tviolations.forEach((err) => {\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !atRule.variable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}