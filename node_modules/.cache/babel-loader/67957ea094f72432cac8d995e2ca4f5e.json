{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst isValidHex = require('../../utils/isValidHex');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\nconst messages = ruleMessages(ruleName, {\n  rejected: hex => `Unexpected invalid hex color \"${hex}\"`\n});\n\nfunction rule(actual) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      valueParser(decl.value).walk(({\n        value,\n        type,\n        sourceIndex\n      }) => {\n        if (type === 'function' && value.endsWith('url')) return false;\n        if (type !== 'word') return;\n        const hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n        if (!hexMatch) return;\n        const hexValue = hexMatch[0];\n        if (isValidHex(hexValue)) return;\n        report({\n          message: messages.rejected(hexValue),\n          node: decl,\n          index: declarationValueIndex(decl) + sourceIndex,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/color-no-invalid-hex/index.js"],"names":["declarationValueIndex","require","isValidHex","report","ruleMessages","validateOptions","valueParser","ruleName","messages","rejected","hex","rule","actual","root","result","validOptions","walkDecls","decl","value","walk","type","sourceIndex","endsWith","hexMatch","exec","hexValue","message","node","index","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,sBAAD,CAA3B;;AAEA,MAAMM,QAAQ,GAAG,sBAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,GAAD,IAAU,iCAAgCA,GAAI;AADjB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsB;AACrB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGV,eAAe,CAACS,MAAD,EAASP,QAAT,EAAmB;AAAEK,MAAAA;AAAF,KAAnB,CAApC;;AAEA,QAAI,CAACG,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACG,SAAL,CAAgBC,IAAD,IAAU;AACxBX,MAAAA,WAAW,CAACW,IAAI,CAACC,KAAN,CAAX,CAAwBC,IAAxB,CAA6B,CAAC;AAAED,QAAAA,KAAF;AAASE,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAD,KAAkC;AAC9D,YAAID,IAAI,KAAK,UAAT,IAAuBF,KAAK,CAACI,QAAN,CAAe,KAAf,CAA3B,EAAkD,OAAO,KAAP;AAElD,YAAIF,IAAI,KAAK,MAAb,EAAqB;AAErB,cAAMG,QAAQ,GAAG,iBAAiBC,IAAjB,CAAsBN,KAAtB,CAAjB;AAEA,YAAI,CAACK,QAAL,EAAe;AAEf,cAAME,QAAQ,GAAGF,QAAQ,CAAC,CAAD,CAAzB;AAEA,YAAIrB,UAAU,CAACuB,QAAD,CAAd,EAA0B;AAE1BtB,QAAAA,MAAM,CAAC;AACNuB,UAAAA,OAAO,EAAElB,QAAQ,CAACC,QAAT,CAAkBgB,QAAlB,CADH;AAENE,UAAAA,IAAI,EAAEV,IAFA;AAGNW,UAAAA,KAAK,EAAE5B,qBAAqB,CAACiB,IAAD,CAArB,GAA8BI,WAH/B;AAINP,UAAAA,MAJM;AAKNP,UAAAA;AALM,SAAD,CAAN;AAOA,OApBD;AAqBA,KAtBD;AAuBA,GA9BD;AA+BA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAqB,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isValidHex = require('../../utils/isValidHex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'color-no-invalid-hex';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (hex) => `Unexpected invalid hex color \"${hex}\"`,\n});\n\nfunction rule(actual) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk(({ value, type, sourceIndex }) => {\n\t\t\t\tif (type === 'function' && value.endsWith('url')) return false;\n\n\t\t\t\tif (type !== 'word') return;\n\n\t\t\t\tconst hexMatch = /^#[0-9A-Za-z]+/.exec(value);\n\n\t\t\t\tif (!hexMatch) return;\n\n\t\t\t\tconst hexValue = hexMatch[0];\n\n\t\t\t\tif (isValidHex(hexValue)) return;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(hexValue),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}