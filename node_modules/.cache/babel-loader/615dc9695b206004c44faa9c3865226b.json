{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _sliceAnsi = _interopRequireDefault(require(\"slice-ansi\"));\n\nvar _stringWidth = _interopRequireDefault(require(\"string-width\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Creates an array of strings split into groups the length of size.\n * This function works with strings that contain ASCII characters.\n *\n * wrapText is different from would-be \"chunk\" implementation\n * in that whitespace characters that occur on a chunk size limit are trimmed.\n *\n * @param {string} subject\n * @param {number} size\n * @returns {Array}\n */\n\n\nconst wrapString = (subject, size) => {\n  let subjectSlice;\n  subjectSlice = subject;\n  const chunks = [];\n\n  do {\n    chunks.push((0, _sliceAnsi.default)(subjectSlice, 0, size));\n    subjectSlice = (0, _sliceAnsi.default)(subjectSlice, size).trim();\n  } while ((0, _stringWidth.default)(subjectSlice));\n\n  return chunks;\n};\n\nvar _default = wrapString;\nexports.default = _default;","map":{"version":3,"sources":["../src/wrapString.js"],"names":["subject","size","subjectSlice","chunks"],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;oBACgBA,O,EAASC,I,KAAS;AAChC,MAAA,YAAA;AAEAC,EAAAA,YAAY,GAAZA,OAAAA;AAEA,QAAMC,MAAM,GAAZ,EAAA;;AAEA,KAAG;AACDA,IAAAA,MAAM,CAANA,IAAAA,CAAY,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,YAAA,EAAA,CAAA,EAAZA,IAAY,CAAZA;AAEAD,IAAAA,YAAY,GAAG,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,YAAA,EAAA,IAAA,EAAfA,IAAe,EAAfA;AAHF,GAAA,QAIS,CAAA,GAAA,YAAA,CAAA,OAAA,EAJT,YAIS,CAJT;;AAMA,SAAA,MAAA","sourcesContent":["import slice from 'slice-ansi';\nimport stringWidth from 'string-width';\n\n/**\n * Creates an array of strings split into groups the length of size.\n * This function works with strings that contain ASCII characters.\n *\n * wrapText is different from would-be \"chunk\" implementation\n * in that whitespace characters that occur on a chunk size limit are trimmed.\n *\n * @param {string} subject\n * @param {number} size\n * @returns {Array}\n */\nexport default (subject, size) => {\n  let subjectSlice;\n\n  subjectSlice = subject;\n\n  const chunks = [];\n\n  do {\n    chunks.push(slice(subjectSlice, 0, size));\n\n    subjectSlice = slice(subjectSlice, size).trim();\n  } while (stringWidth(subjectSlice));\n\n  return chunks;\n};\n"]},"metadata":{},"sourceType":"script"}