{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\n\nconst rawNodeString = require('../../utils/rawNodeString');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected single space before \";\"',\n  rejectedBefore: () => 'Unexpected whitespace before \";\"'\n});\n\nfunction rule(expectation) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(atRule => {\n      if (hasBlock(atRule)) {\n        return;\n      }\n\n      if (!isStandardSyntaxAtRule(atRule)) {\n        return;\n      }\n\n      const nodeString = rawNodeString(atRule);\n      checker.before({\n        source: nodeString,\n        index: nodeString.length,\n        err: m => {\n          report({\n            message: m,\n            node: atRule,\n            index: nodeString.length - 1,\n            result,\n            ruleName\n          });\n        }\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-semicolon-space-before/index.js"],"names":["hasBlock","require","isStandardSyntaxAtRule","rawNodeString","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","rejectedBefore","rule","expectation","checker","root","result","validOptions","actual","possible","walkAtRules","atRule","nodeString","before","source","index","length","err","m","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,oCAAD,CAAtC;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMO,QAAQ,GAAG,gCAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,cAAc,EAAE,MAAM,kCADiB;AAEvCC,EAAAA,cAAc,EAAE,MAAM;AAFiB,CAAX,CAA7B;;AAKA,SAASC,IAAT,CAAcC,WAAd,EAA2B;AAC1B,QAAMC,OAAO,GAAGP,iBAAiB,CAAC,OAAD,EAAUM,WAAV,EAAuBJ,QAAvB,CAAjC;AAEA,SAAO,CAACM,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAASR,QAAT,EAAmB;AACtDU,MAAAA,MAAM,EAAEL,WAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACK,WAAL,CAAkBC,MAAD,IAAY;AAC5B,UAAIrB,QAAQ,CAACqB,MAAD,CAAZ,EAAsB;AACrB;AACA;;AAED,UAAI,CAACnB,sBAAsB,CAACmB,MAAD,CAA3B,EAAqC;AACpC;AACA;;AAED,YAAMC,UAAU,GAAGnB,aAAa,CAACkB,MAAD,CAAhC;AAEAP,MAAAA,OAAO,CAACS,MAAR,CAAe;AACdC,QAAAA,MAAM,EAAEF,UADM;AAEdG,QAAAA,KAAK,EAAEH,UAAU,CAACI,MAFJ;AAGdC,QAAAA,GAAG,EAAGC,CAAD,IAAO;AACXxB,UAAAA,MAAM,CAAC;AACNyB,YAAAA,OAAO,EAAED,CADH;AAENE,YAAAA,IAAI,EAAET,MAFA;AAGNI,YAAAA,KAAK,EAAEH,UAAU,CAACI,MAAX,GAAoB,CAHrB;AAINV,YAAAA,MAJM;AAKNR,YAAAA;AALM,WAAD,CAAN;AAOA;AAXa,OAAf;AAaA,KAxBD;AAyBA,GAnCD;AAoCA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAsB,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst hasBlock = require('../../utils/hasBlock');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'at-rule-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n});\n\nfunction rule(expectation) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (hasBlock(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeString = rawNodeString(atRule);\n\n\t\t\tchecker.before({\n\t\t\t\tsource: nodeString,\n\t\t\t\tindex: nodeString.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: nodeString.length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}