{"ast":null,"code":"'use strict';\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\n\nmodule.exports = function () {\n  const contextMap = new Map();\n  return {\n    /**\n     * @param {import('postcss').Node} node\n     */\n    getContext(node,\n    /** @type {any[]} */\n    ...subContexts) {\n      // TODO TYPES node.source possible undefined\n      const nodeSource =\n      /** @type {import('postcss').NodeSource} */\n      node.source.input.from;\n      const baseContext = creativeGetMap(contextMap, nodeSource);\n      return subContexts.reduce((result, context) => {\n        return creativeGetMap(result, context);\n      }, baseContext);\n    }\n\n  };\n};\n/**\n * TODO TYPES\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\n\n\nfunction creativeGetMap(someMap, someThing) {\n  if (!someMap.has(someThing)) {\n    someMap.set(someThing, new Map());\n  }\n\n  return someMap.get(someThing);\n}","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/nodeContextLookup.js"],"names":["module","exports","contextMap","Map","getContext","node","subContexts","nodeSource","source","input","from","baseContext","creativeGetMap","reduce","result","context","someMap","someThing","has","set","get"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,YAAY;AAC5B,QAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AAEA,SAAO;AACN;AACF;AACA;AACEC,IAAAA,UAAU,CAACC,IAAD;AAAO;AAAqB,OAAGC,WAA/B,EAA4C;AACrD;AACA,YAAMC,UAAU;AAAG;AAA6CF,MAAAA,IAAI,CAACG,MAAN,CAAcC,KAAd,CAAoBC,IAAnF;AACA,YAAMC,WAAW,GAAGC,cAAc,CAACV,UAAD,EAAaK,UAAb,CAAlC;AAEA,aAAOD,WAAW,CAACO,MAAZ,CAAmB,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC9C,eAAOH,cAAc,CAACE,MAAD,EAASC,OAAT,CAArB;AACA,OAFM,EAEJJ,WAFI,CAAP;AAGA;;AAZK,GAAP;AAcA,CAjBD;AAmBA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBI,OAAxB,EAAiCC,SAAjC,EAA4C;AAC3C,MAAI,CAACD,OAAO,CAACE,GAAR,CAAYD,SAAZ,CAAL,EAA6B;AAC5BD,IAAAA,OAAO,CAACG,GAAR,CAAYF,SAAZ,EAAuB,IAAId,GAAJ,EAAvB;AACA;;AAED,SAAOa,OAAO,CAACI,GAAR,CAAYH,SAAZ,CAAP;AACA","sourcesContent":["'use strict';\n\n/**\n * Create a collection of Maps that serve to contextualize a given node.\n * This is useful to ensure that you only compare nodes that share a certain\n * context.\n *\n * All nodes are initially contextualized by their input source.\n * From there, you can contextualize them however you want.\n *\n * For a usage example, see `selector-no-descending-specificity`.\n */\nmodule.exports = function () {\n\tconst contextMap = new Map();\n\n\treturn {\n\t\t/**\n\t\t * @param {import('postcss').Node} node\n\t\t */\n\t\tgetContext(node, /** @type {any[]} */ ...subContexts) {\n\t\t\t// TODO TYPES node.source possible undefined\n\t\t\tconst nodeSource = /** @type {import('postcss').NodeSource} */ (node.source).input.from;\n\t\t\tconst baseContext = creativeGetMap(contextMap, nodeSource);\n\n\t\t\treturn subContexts.reduce((result, context) => {\n\t\t\t\treturn creativeGetMap(result, context);\n\t\t\t}, baseContext);\n\t\t},\n\t};\n};\n\n/**\n * TODO TYPES\n * @param {Map<any, any>} someMap\n * @param {any} someThing\n */\nfunction creativeGetMap(someMap, someThing) {\n\tif (!someMap.has(someThing)) {\n\t\tsomeMap.set(someThing, new Map());\n\t}\n\n\treturn someMap.get(someThing);\n}\n"]},"metadata":{},"sourceType":"script"}