{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst rules = require('./rules'); // Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @param {import('stylelint').StylelintConfigRuleSettings} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the, rules themselves, which will not work for plugins\n * @return {[any, Object] | Array<any | [any, Object]> | null}\n */\n\n\nmodule.exports = function (rawSettings, ruleName, // If primaryOptionArray is not provided, we try to get it from the\n// rules themselves, which will not work for plugins\nprimaryOptionArray) {\n  if (rawSettings === null) {\n    return null;\n  }\n\n  if (!Array.isArray(rawSettings)) {\n    return [rawSettings];\n  } // Everything below is an array ...\n\n\n  if (rawSettings[0] === null) {\n    return null;\n  }\n\n  if (primaryOptionArray === undefined) {\n    const rule = rules[ruleName];\n    primaryOptionArray = _.get(rule, 'primaryOptionArray');\n  }\n\n  if (!primaryOptionArray) {\n    return rawSettings;\n  } // Everything below is a rule that CAN have an array for a primary option ...\n  // (they might also have something else, e.g. rule-properties-order can\n  // have the string \"alphabetical\")\n\n\n  if (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n    return rawSettings;\n  }\n\n  if (rawSettings.length === 2 && !_.isPlainObject(rawSettings[0]) && _.isPlainObject(rawSettings[1])) {\n    return rawSettings;\n  }\n\n  return [rawSettings];\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/normalizeRuleSettings.js"],"names":["_","require","rules","module","exports","rawSettings","ruleName","primaryOptionArray","Array","isArray","undefined","rule","get","length","isPlainObject"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAChBC,WADgB,EAEhBC,QAFgB,EAGhB;AACA;AACAC,kBALgB,EAMf;AACD,MAAIF,WAAW,KAAK,IAApB,EAA0B;AACzB,WAAO,IAAP;AACA;;AAED,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,WAAd,CAAL,EAAiC;AAChC,WAAO,CAACA,WAAD,CAAP;AACA,GAPA,CAQD;;;AAEA,MAAIA,WAAW,CAAC,CAAD,CAAX,KAAmB,IAAvB,EAA6B;AAC5B,WAAO,IAAP;AACA;;AAED,MAAIE,kBAAkB,KAAKG,SAA3B,EAAsC;AACrC,UAAMC,IAAI,GAAGT,KAAK,CAACI,QAAD,CAAlB;AAEAC,IAAAA,kBAAkB,GAAGP,CAAC,CAACY,GAAF,CAAMD,IAAN,EAAY,oBAAZ,CAArB;AACA;;AAED,MAAI,CAACJ,kBAAL,EAAyB;AACxB,WAAOF,WAAP;AACA,GAtBA,CAuBD;AACA;AACA;;;AAEA,MAAIA,WAAW,CAACQ,MAAZ,KAAuB,CAAvB,IAA4BL,KAAK,CAACC,OAAN,CAAcJ,WAAW,CAAC,CAAD,CAAzB,CAAhC,EAA+D;AAC9D,WAAOA,WAAP;AACA;;AAED,MACCA,WAAW,CAACQ,MAAZ,KAAuB,CAAvB,IACA,CAACb,CAAC,CAACc,aAAF,CAAgBT,WAAW,CAAC,CAAD,CAA3B,CADD,IAEAL,CAAC,CAACc,aAAF,CAAgBT,WAAW,CAAC,CAAD,CAA3B,CAHD,EAIE;AACD,WAAOA,WAAP;AACA;;AAED,SAAO,CAACA,WAAD,CAAP;AACA,CA9CD","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst rules = require('./rules');\n\n// Rule settings can take a number of forms, e.g.\n// a. \"rule-name\": null\n// b. \"rule-name\": [null, ...]\n// c. \"rule-name\": primaryOption\n// d. \"rule-name\": [primaryOption]\n// e. \"rule-name\": [primaryOption, secondaryOption]\n// Where primaryOption can be anything: primitive, Object, or Array.\n\n/**\n * This function normalizes all the possibilities into the\n * standard form: [primaryOption, secondaryOption]\n * Except in the cases with null, a & b, in which case\n * null is returned\n * @param {import('stylelint').StylelintConfigRuleSettings} rawSettings\n * @param {string} ruleName\n * @param {boolean} [primaryOptionArray] If primaryOptionArray is not provided, we try to get it from the, rules themselves, which will not work for plugins\n * @return {[any, Object] | Array<any | [any, Object]> | null}\n */\nmodule.exports = function (\n\trawSettings,\n\truleName,\n\t// If primaryOptionArray is not provided, we try to get it from the\n\t// rules themselves, which will not work for plugins\n\tprimaryOptionArray,\n) {\n\tif (rawSettings === null) {\n\t\treturn null;\n\t}\n\n\tif (!Array.isArray(rawSettings)) {\n\t\treturn [rawSettings];\n\t}\n\t// Everything below is an array ...\n\n\tif (rawSettings[0] === null) {\n\t\treturn null;\n\t}\n\n\tif (primaryOptionArray === undefined) {\n\t\tconst rule = rules[ruleName];\n\n\t\tprimaryOptionArray = _.get(rule, 'primaryOptionArray');\n\t}\n\n\tif (!primaryOptionArray) {\n\t\treturn rawSettings;\n\t}\n\t// Everything below is a rule that CAN have an array for a primary option ...\n\t// (they might also have something else, e.g. rule-properties-order can\n\t// have the string \"alphabetical\")\n\n\tif (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {\n\t\treturn rawSettings;\n\t}\n\n\tif (\n\t\trawSettings.length === 2 &&\n\t\t!_.isPlainObject(rawSettings[0]) &&\n\t\t_.isPlainObject(rawSettings[1])\n\t) {\n\t\treturn rawSettings;\n\t}\n\n\treturn [rawSettings];\n};\n"]},"metadata":{},"sourceType":"script"}