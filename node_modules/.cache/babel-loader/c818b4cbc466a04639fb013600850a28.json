{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-type-case';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['lower', 'upper']\n    }, {\n      actual: options,\n      possible: {\n        ignoreTypes: [_.isString]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      let hasComments = _.get(rule, 'raws.selector.raw');\n\n      const selector = hasComments ? hasComments : rule.selector;\n      const selectors = rule.selectors;\n\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      if (selectors.some(s => isKeyframeSelector(s))) {\n        return;\n      }\n\n      parseSelector(selector, result, rule, selectorAST => {\n        selectorAST.walkTags(tag => {\n          if (!isStandardSyntaxTypeSelector(tag)) {\n            return;\n          }\n\n          if (optionsMatches(options, 'ignoreTypes', tag.value)) {\n            return;\n          }\n\n          const sourceIndex = tag.sourceIndex;\n          const value = tag.value;\n          const expectedValue = expectation === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n          if (value === expectedValue) {\n            return;\n          }\n\n          if (context.fix) {\n            if (hasComments) {\n              hasComments = hasComments.slice(0, sourceIndex) + expectedValue + hasComments.slice(sourceIndex + value.length);\n\n              _.set(rule, 'raws.selector.raw', hasComments);\n            } else {\n              rule.selector = rule.selector.slice(0, sourceIndex) + expectedValue + rule.selector.slice(sourceIndex + value.length);\n            }\n\n            return;\n          }\n\n          report({\n            message: messages.expected(value, expectedValue),\n            node: rule,\n            index: sourceIndex,\n            ruleName,\n            result\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-type-case/index.js"],"names":["_","require","isKeyframeSelector","isStandardSyntaxRule","isStandardSyntaxTypeSelector","optionsMatches","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","expected","actual","rule","expectation","options","context","root","result","validOptions","possible","ignoreTypes","isString","optional","walkRules","hasComments","get","selector","selectors","some","s","selectorAST","walkTags","tag","value","sourceIndex","expectedValue","toLowerCase","toUpperCase","fix","slice","length","set","message","node","index","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-type-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: expectation,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreTypes: [_.isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tlet hasComments = _.get(rule, 'raws.selector.raw');\n\t\t\tconst selector = hasComments ? hasComments : rule.selector;\n\t\t\tconst selectors = rule.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, rule, (selectorAST) => {\n\t\t\t\tselectorAST.walkTags((tag) => {\n\t\t\t\t\tif (!isStandardSyntaxTypeSelector(tag)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(options, 'ignoreTypes', tag.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sourceIndex = tag.sourceIndex;\n\t\t\t\t\tconst value = tag.value;\n\n\t\t\t\t\tconst expectedValue = expectation === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\t\tif (value === expectedValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\thasComments.slice(sourceIndex + value.length);\n\t\t\t\t\t\t\t_.set(rule, 'raws.selector.raw', hasComments);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trule.selector =\n\t\t\t\t\t\t\t\trule.selector.slice(0, sourceIndex) +\n\t\t\t\t\t\t\t\texpectedValue +\n\t\t\t\t\t\t\t\trule.selector.slice(sourceIndex + value.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(value, expectedValue),\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}