{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _isString2 = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _wrapCell = _interopRequireDefault(require(\"./wrapCell\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @param {string} value\n * @param {number} columnWidth\n * @param {boolean} useWrapWord\n * @returns {number}\n */\n\n\nconst calculateCellHeight = (value, columnWidth, useWrapWord = false) => {\n  if (!(0, _isString2.default)(value)) {\n    throw new TypeError('Value must be a string.');\n  }\n\n  if (!Number.isInteger(columnWidth)) {\n    throw new TypeError('Column width must be an integer.');\n  }\n\n  if (columnWidth < 1) {\n    throw new Error('Column width must be greater than 0.');\n  }\n\n  return (0, _wrapCell.default)(value, columnWidth, useWrapWord).length;\n};\n\nvar _default = calculateCellHeight;\nexports.default = _default;","map":{"version":3,"sources":["../src/calculateCellHeight.js"],"names":["value","columnWidth","useWrapWord","Number"],"mappings":";;;;;;;;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;6BACgBA,K,EAAOC,W,EAAaC,WAAW,GAAG,K,KAAU;AAC1D,MAAI,CAAC,CAAA,GAAA,UAAA,CAAA,OAAA,EAAL,KAAK,CAAL,EAAwB;AACtB,UAAM,IAAA,SAAA,CAAN,yBAAM,CAAN;AACD;;AAED,MAAI,CAACC,MAAM,CAANA,SAAAA,CAAL,WAAKA,CAAL,EAAoC;AAClC,UAAM,IAAA,SAAA,CAAN,kCAAM,CAAN;AACD;;AAED,MAAIF,WAAW,GAAf,CAAA,EAAqB;AACnB,UAAM,IAAA,KAAA,CAAN,sCAAM,CAAN;AACD;;AAED,SAAO,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,KAAA,EAAA,WAAA,EAAA,WAAA,EAAP,MAAA","sourcesContent":["import _ from 'lodash';\nimport wrapCell from './wrapCell';\n\n/**\n * @param {string} value\n * @param {number} columnWidth\n * @param {boolean} useWrapWord\n * @returns {number}\n */\nexport default (value, columnWidth, useWrapWord = false) => {\n  if (!_.isString(value)) {\n    throw new TypeError('Value must be a string.');\n  }\n\n  if (!Number.isInteger(columnWidth)) {\n    throw new TypeError('Column width must be an integer.');\n  }\n\n  if (columnWidth < 1) {\n    throw new Error('Column width must be greater than 0.');\n  }\n\n  return wrapCell(value, columnWidth, useWrapWord).length;\n};\n"]},"metadata":{},"sourceType":"script"}