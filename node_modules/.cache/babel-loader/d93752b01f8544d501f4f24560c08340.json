{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-vendor-prefix';\nconst messages = ruleMessages(ruleName, {\n  rejected: selector => `Unexpected vendor-prefix \"${selector}\"`\n});\n\nfunction rule(actual, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignoreSelectors: [_.isString]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      const selector = rule.selector;\n      parseSelector(selector, result, rule, selectorTree => {\n        selectorTree.walkPseudos(pseudoNode => {\n          if (isAutoprefixable.selector(pseudoNode.value)) {\n            if (optionsMatches(options, 'ignoreSelectors', pseudoNode.value)) {\n              return;\n            }\n\n            if (context.fix) {\n              rule.selector = isAutoprefixable.unprefix(rule.selector);\n              return;\n            }\n\n            report({\n              result,\n              ruleName,\n              message: messages.rejected(pseudoNode.value),\n              node: rule,\n              index: (rule.raws.before || '').length + pseudoNode.sourceIndex\n            });\n          }\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.js"],"names":["_","require","isAutoprefixable","isStandardSyntaxRule","optionsMatches","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","rejected","selector","rule","actual","options","context","root","result","validOptions","possible","ignoreSelectors","isString","optional","walkRules","selectorTree","walkPseudos","pseudoNode","value","fix","unprefix","message","node","index","raws","before","length","sourceIndex","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMM,YAAY,GAAGN,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMO,eAAe,GAAGP,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMQ,QAAQ,GAAG,2BAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,QAAD,IAAe,6BAA4BA,QAAS;AADvB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACvC,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CACnCU,MADmC,EAEnCT,QAFmC,EAGnC;AAAEK,MAAAA;AAAF,KAHmC,EAInC;AACCA,MAAAA,MAAM,EAAEC,OADT;AAECK,MAAAA,QAAQ,EAAE;AACTC,QAAAA,eAAe,EAAE,CAACrB,CAAC,CAACsB,QAAH;AADR,OAFX;AAKCC,MAAAA,QAAQ,EAAE;AALX,KAJmC,CAApC;;AAaA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA,KAhBuB,CAkBxB;AACA;;;AACAF,IAAAA,IAAI,CAACO,SAAL,CAAgBX,IAAD,IAAU;AACxB,UAAI,CAACV,oBAAoB,CAACU,IAAD,CAAzB,EAAiC;AAChC;AACA;;AAED,YAAMD,QAAQ,GAAGC,IAAI,CAACD,QAAtB;AAEAP,MAAAA,aAAa,CAACO,QAAD,EAAWM,MAAX,EAAmBL,IAAnB,EAA0BY,YAAD,IAAkB;AACvDA,QAAAA,YAAY,CAACC,WAAb,CAA0BC,UAAD,IAAgB;AACxC,cAAIzB,gBAAgB,CAACU,QAAjB,CAA0Be,UAAU,CAACC,KAArC,CAAJ,EAAiD;AAChD,gBAAIxB,cAAc,CAACW,OAAD,EAAU,iBAAV,EAA6BY,UAAU,CAACC,KAAxC,CAAlB,EAAkE;AACjE;AACA;;AAED,gBAAIZ,OAAO,CAACa,GAAZ,EAAiB;AAChBhB,cAAAA,IAAI,CAACD,QAAL,GAAgBV,gBAAgB,CAAC4B,QAAjB,CAA0BjB,IAAI,CAACD,QAA/B,CAAhB;AAEA;AACA;;AAEDN,YAAAA,MAAM,CAAC;AACNY,cAAAA,MADM;AAENT,cAAAA,QAFM;AAGNsB,cAAAA,OAAO,EAAErB,QAAQ,CAACC,QAAT,CAAkBgB,UAAU,CAACC,KAA7B,CAHH;AAINI,cAAAA,IAAI,EAAEnB,IAJA;AAKNoB,cAAAA,KAAK,EAAE,CAACpB,IAAI,CAACqB,IAAL,CAAUC,MAAV,IAAoB,EAArB,EAAyBC,MAAzB,GAAkCT,UAAU,CAACU;AAL9C,aAAD,CAAN;AAOA;AACD,SApBD;AAqBA,OAtBY,CAAb;AAuBA,KA9BD;AA+BA,GAnDD;AAoDA;;AAEDxB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACA4B,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected vendor-prefix \"${selector}\"`,\n});\n\nfunction rule(actual, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreSelectors: [_.isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = rule.selector;\n\n\t\t\tparseSelector(selector, result, rule, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tif (isAutoprefixable.selector(pseudoNode.value)) {\n\t\t\t\t\t\tif (optionsMatches(options, 'ignoreSelectors', pseudoNode.value)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\trule.selector = isAutoprefixable.unprefix(rule.selector);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(pseudoNode.value),\n\t\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\t\tindex: (rule.raws.before || '').length + pseudoNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}