{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\n\nconst isMap = require('../../utils/isMap');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'unit-no-unknown';\nconst messages = ruleMessages(ruleName, {\n  rejected: unit => `Unexpected unknown unit \"${unit}\"`\n}); // The map property name (in map cleared from comments and spaces) always\n// has index that being divided by 4 gives remainder equals 0\n\nconst mapPropertyNameIndexOffset = 4;\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignoreUnits: [_.isString, _.isRegExp],\n        ignoreFunctions: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    function check(node, value, getIndex) {\n      // make sure multiplication operations (*) are divided - not handled\n      // by postcss-value-parser\n      value = value.replace(/\\*/g, ',');\n      const parsedValue = valueParser(value);\n      const ignoredMapProperties = [];\n      parsedValue.walk(valueNode => {\n        // Ignore wrong units within `url` function\n        // and within functions listed in the `ignoreFunctions` option\n        if (valueNode.type === 'function' && (valueNode.value.toLowerCase() === 'url' || optionsMatches(options, 'ignoreFunctions', valueNode.value))) {\n          return false;\n        }\n\n        if (isMap(valueNode)) {\n          // TODO: Issue #4985\n          // eslint-disable-next-line no-shadow\n          valueNode.nodes.forEach((node, index) => {\n            if (!(index % mapPropertyNameIndexOffset)) {\n              ignoredMapProperties.push(node.sourceIndex);\n            }\n          });\n        }\n\n        if (ignoredMapProperties.includes(valueNode.sourceIndex)) {\n          return;\n        }\n\n        const unit = getUnitFromValueNode(valueNode);\n\n        if (!unit) {\n          return;\n        }\n\n        if (optionsMatches(options, 'ignoreUnits', unit)) {\n          return;\n        }\n\n        if (keywordSets.units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n          return;\n        }\n\n        if (unit.toLowerCase() === 'x') {\n          if (node.type === 'atrule' && node.name === 'media' && node.params.toLowerCase().includes('resolution')) {\n            let ignoreUnit = false;\n            mediaParser(node.params).walk((mediaNode, i, mediaNodes) => {\n              if (mediaNode.value.toLowerCase().includes('resolution') && _.last(mediaNodes).sourceIndex === valueNode.sourceIndex) {\n                ignoreUnit = true;\n                return false;\n              }\n            });\n\n            if (ignoreUnit) {\n              return;\n            }\n          }\n\n          if (node.type === 'decl') {\n            if (node.prop.toLowerCase() === 'image-resolution') {\n              return;\n            }\n\n            if (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n              const imageSet = parsedValue.nodes.find( // TODO: Issue #4985\n              // eslint-disable-next-line no-shadow\n              node => vendor.unprefixed(node.value) === 'image-set');\n\n              const imageSetValueLastIndex = _.last(imageSet.nodes).sourceIndex;\n\n              if (imageSetValueLastIndex >= valueNode.sourceIndex) {\n                return;\n              }\n            }\n          }\n        }\n\n        report({\n          index: getIndex(node) + valueNode.sourceIndex,\n          message: messages.rejected(unit),\n          node,\n          result,\n          ruleName\n        });\n      });\n    }\n\n    root.walkAtRules(atRule => {\n      if (!/^media$/i.test(atRule.name) && !atRule.variable) {\n        return;\n      }\n\n      check(atRule, atRule.params, atRuleParamIndex);\n    });\n    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex));\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/unit-no-unknown/index.js"],"names":["_","require","atRuleParamIndex","declarationValueIndex","getUnitFromValueNode","isMap","keywordSets","mediaParser","default","optionsMatches","report","ruleMessages","validateOptions","valueParser","vendor","ruleName","messages","rejected","unit","mapPropertyNameIndexOffset","rule","actual","options","root","result","validOptions","possible","ignoreUnits","isString","isRegExp","ignoreFunctions","optional","check","node","value","getIndex","replace","parsedValue","ignoredMapProperties","walk","valueNode","type","toLowerCase","nodes","forEach","index","push","sourceIndex","includes","units","has","name","params","ignoreUnit","mediaNode","i","mediaNodes","last","prop","test","imageSet","find","unprefixed","imageSetValueLastIndex","message","walkAtRules","atRule","variable","walkDecls","decl","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isMap = require('../../utils/isMap');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'unit-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unknown unit \"${unit}\"`,\n});\n\n// The map property name (in map cleared from comments and spaces) always\n// has index that being divided by 4 gives remainder equals 0\nconst mapPropertyNameIndexOffset = 4;\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreUnits: [_.isString, _.isRegExp],\n\t\t\t\t\tignoreFunctions: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tconst parsedValue = valueParser(value);\n\t\t\tconst ignoredMapProperties = [];\n\n\t\t\tparsedValue.walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\t// and within functions listed in the `ignoreFunctions` option\n\t\t\t\tif (\n\t\t\t\t\tvalueNode.type === 'function' &&\n\t\t\t\t\t(valueNode.value.toLowerCase() === 'url' ||\n\t\t\t\t\t\toptionsMatches(options, 'ignoreFunctions', valueNode.value))\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (isMap(valueNode)) {\n\t\t\t\t\t// TODO: Issue #4985\n\t\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\t\tvalueNode.nodes.forEach((node, index) => {\n\t\t\t\t\t\tif (!(index % mapPropertyNameIndexOffset)) {\n\t\t\t\t\t\t\tignoredMapProperties.push(node.sourceIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (ignoredMapProperties.includes(valueNode.sourceIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(options, 'ignoreUnits', unit)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (keywordSets.units.has(unit.toLowerCase()) && unit.toLowerCase() !== 'x') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (unit.toLowerCase() === 'x') {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.type === 'atrule' &&\n\t\t\t\t\t\tnode.name === 'media' &&\n\t\t\t\t\t\tnode.params.toLowerCase().includes('resolution')\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet ignoreUnit = false;\n\n\t\t\t\t\t\tmediaParser(node.params).walk((mediaNode, i, mediaNodes) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmediaNode.value.toLowerCase().includes('resolution') &&\n\t\t\t\t\t\t\t\t_.last(mediaNodes).sourceIndex === valueNode.sourceIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tignoreUnit = true;\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (ignoreUnit) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'decl') {\n\t\t\t\t\t\tif (node.prop.toLowerCase() === 'image-resolution') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^(?:-webkit-)?image-set[\\s(]/i.test(value)) {\n\t\t\t\t\t\t\tconst imageSet = parsedValue.nodes.find(\n\t\t\t\t\t\t\t\t// TODO: Issue #4985\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\t\t\t\t\t(node) => vendor.unprefixed(node.value) === 'image-set',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst imageSetValueLastIndex = _.last(imageSet.nodes).sourceIndex;\n\n\t\t\t\t\t\t\tif (imageSetValueLastIndex >= valueNode.sourceIndex) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!/^media$/i.test(atRule.name) && !atRule.variable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}