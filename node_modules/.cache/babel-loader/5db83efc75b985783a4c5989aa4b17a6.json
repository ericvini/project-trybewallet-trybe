{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\nconst messages = ruleMessages(ruleName, {\n  rejected: nonSpaceCharacter => `Unexpected \"${nonSpaceCharacter}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      let hasFixed = false;\n      const selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector; // Return early for selectors containing comments\n      // TODO: renable when parser and stylelint are compatible\n\n      if (selector.includes('/*')) return;\n      const fixedSelector = parseSelector(selector, result, rule, fullSelector => {\n        fullSelector.walkCombinators(combinatorNode => {\n          if (combinatorNode.value !== ' ') {\n            return;\n          }\n\n          const value = combinatorNode.toString();\n\n          if (value.includes('  ') || value.includes('\\t') || value.includes('\\n') || value.includes('\\r')) {\n            if (context.fix && /^\\s+$/.test(value)) {\n              hasFixed = true;\n              combinatorNode.raws.value = ' ';\n              combinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n              combinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n              return;\n            }\n\n            report({\n              result,\n              ruleName,\n              message: messages.rejected(value),\n              node: rule,\n              index: combinatorNode.sourceIndex\n            });\n          }\n        });\n      });\n\n      if (hasFixed) {\n        if (!rule.raws.selector) {\n          rule.selector = fixedSelector;\n        } else {\n          rule.raws.selector.raw = fixedSelector;\n        }\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js"],"names":["isStandardSyntaxRule","require","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","rejected","nonSpaceCharacter","rule","expectation","options","context","root","result","validOptions","actual","walkRules","hasFixed","selector","raws","raw","includes","fixedSelector","fullSelector","walkCombinators","combinatorNode","value","toString","fix","test","rawSpaceBefore","replace","rawSpaceAfter","message","node","index","sourceIndex","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-descendant-combinator-no-non-space';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (nonSpaceCharacter) => `Unexpected \"${nonSpaceCharacter}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet hasFixed = false;\n\t\t\tconst selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector;\n\n\t\t\t// Return early for selectors containing comments\n\t\t\t// TODO: renable when parser and stylelint are compatible\n\t\t\tif (selector.includes('/*')) return;\n\n\t\t\tconst fixedSelector = parseSelector(selector, result, rule, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (combinatorNode.value !== ' ') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = combinatorNode.toString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue.includes('  ') ||\n\t\t\t\t\t\tvalue.includes('\\t') ||\n\t\t\t\t\t\tvalue.includes('\\n') ||\n\t\t\t\t\t\tvalue.includes('\\r')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (context.fix && /^\\s+$/.test(value)) {\n\t\t\t\t\t\t\thasFixed = true;\n\t\t\t\t\t\t\tcombinatorNode.raws.value = ' ';\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceBefore = combinatorNode.rawSpaceBefore.replace(/^\\s+/, '');\n\t\t\t\t\t\t\tcombinatorNode.rawSpaceAfter = combinatorNode.rawSpaceAfter.replace(/\\s+$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (hasFixed) {\n\t\t\t\tif (!rule.raws.selector) {\n\t\t\t\t\trule.selector = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}