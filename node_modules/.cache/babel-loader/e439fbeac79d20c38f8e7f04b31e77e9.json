{"ast":null,"code":"'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\n\nconst Result = require('postcss/lib/result');\n\nconst rules = require('../rules');\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').StylelintConfigRuleSettings,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {Function} callback\n * @returns {void}\n */\n\n\nmodule.exports = function (options, callback) {\n  if (!options) throw new Error(\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\");\n  if (!callback) throw new Error('checkAgainstRule requires a callback');\n  if (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n  if (!Object.keys(rules).includes(options.ruleName)) throw new Error(`Rule '${options.ruleName}' does not exist`);\n  if (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n  if (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n  const settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n  if (!settings) {\n    return;\n  }\n\n  const tmpPostcssResult = new Result();\n  rules[options.ruleName](settings[0], settings[1], {})(options.root, tmpPostcssResult);\n  tmpPostcssResult.warnings().forEach(callback);\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/checkAgainstRule.js"],"names":["normalizeRuleSettings","require","Result","rules","module","exports","options","callback","Error","ruleName","Object","keys","includes","ruleSettings","root","settings","tmpPostcssResult","warnings","forEach"],"mappings":"AAAA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,0BAAD,CAArC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAC7C,MAAI,CAACD,OAAL,EACC,MAAM,IAAIE,KAAJ,CACL,oGADK,CAAN;AAID,MAAI,CAACD,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AAEf,MAAI,CAACF,OAAO,CAACG,QAAb,EAAuB,MAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AAEvB,MAAI,CAACE,MAAM,CAACC,IAAP,CAAYR,KAAZ,EAAmBS,QAAnB,CAA4BN,OAAO,CAACG,QAApC,CAAL,EACC,MAAM,IAAID,KAAJ,CAAW,SAAQF,OAAO,CAACG,QAAS,kBAApC,CAAN;AAED,MAAI,CAACH,OAAO,CAACO,YAAb,EAA2B,MAAM,IAAIL,KAAJ,CAAU,mDAAV,CAAN;AAE3B,MAAI,CAACF,OAAO,CAACQ,IAAb,EAAmB,MAAM,IAAIN,KAAJ,CAAU,2CAAV,CAAN;AAEnB,QAAMO,QAAQ,GAAGf,qBAAqB,CAACM,OAAO,CAACO,YAAT,EAAuBP,OAAO,CAACG,QAA/B,CAAtC;;AAEA,MAAI,CAACM,QAAL,EAAe;AACd;AACA;;AAED,QAAMC,gBAAgB,GAAG,IAAId,MAAJ,EAAzB;AAEAC,EAAAA,KAAK,CAACG,OAAO,CAACG,QAAT,CAAL,CAAwBM,QAAQ,CAAC,CAAD,CAAhC,EAAqCA,QAAQ,CAAC,CAAD,CAA7C,EAAkD,EAAlD,EAAsDT,OAAO,CAACQ,IAA9D,EAAoEE,gBAApE;AACAA,EAAAA,gBAAgB,CAACC,QAAjB,GAA4BC,OAA5B,CAAoCX,QAApC;AACA,CA3BD","sourcesContent":["'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').StylelintConfigRuleSettings,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {Function} callback\n * @returns {void}\n */\nmodule.exports = function (options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tif (!Object.keys(rules).includes(options.ruleName))\n\t\tthrow new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\tconst tmpPostcssResult = new Result();\n\n\trules[options.ruleName](settings[0], settings[1], {})(options.root, tmpPostcssResult);\n\ttmpPostcssResult.warnings().forEach(callback);\n};\n"]},"metadata":{},"sourceType":"script"}