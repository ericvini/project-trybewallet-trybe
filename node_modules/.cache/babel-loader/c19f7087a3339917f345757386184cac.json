{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n/** @typedef {{\n  ruleName: string,\n  result: import('stylelint').PostcssResult,\n  message: string,\n  node: import('postcss').Node & {\n    positionBy(opts: { index?: number, word?: string }): { line: number, column: number }\n  },\n  index?: number,\n  word?: string,\n  line?: number\n}} Violation */\n\n/**\n * Report a violation.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported violation is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n * @param {Violation} violation\n */\n\n\nmodule.exports = function (violation) {\n  const ruleName = violation.ruleName;\n  const result = violation.result;\n  const message = violation.message;\n  const line = violation.line;\n  const node = violation.node;\n  const index = violation.index;\n  const word = violation.word;\n  result.stylelint = result.stylelint || {\n    ruleSeverities: {},\n    customMessages: {}\n  }; // In quiet mode, mere warnings are ignored\n\n  if (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n    return;\n  } // If a line is not passed, use the node.positionBy method to get the\n  // line number that the complaint pertains to\n\n\n  const startLine = line || node.positionBy({\n    index\n  }).line;\n\n  if (result.stylelint.disabledRanges && (!result.stylelint.ignoreDisables || result.stylelint.reportNeedlessDisables)) {\n    const ranges = result.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all;\n\n    for (const range of ranges) {\n      if ( // If the violation is within a disabledRange,\n      // and that disabledRange's rules include this one,\n      // do not register a warning\n      range.start <= startLine && (range.end === undefined || range.end >= startLine) && (!range.rules || range.rules.includes(ruleName))) {\n        if (result.stylelint.reportNeedlessDisables) {\n          // Collect disabled warnings\n          // Used to report `needlessDisables` in subsequent processing.\n          const disabledWarnings = result.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n          disabledWarnings.push({\n            rule: ruleName,\n            line: startLine\n          });\n\n          if (!result.stylelint.ignoreDisables) {\n            return;\n          }\n\n          break;\n        } else {\n          return;\n        }\n      }\n    }\n  }\n  /** @type {string} */\n\n\n  const severity = _.get(result.stylelint, ['ruleSeverities', ruleName], 'ignore');\n\n  if (!result.stylelint.stylelintError && severity === 'error') {\n    result.stylelint.stylelintError = true;\n  }\n  /** @type {import('stylelint').StylelintWarningOptions} */\n\n\n  const warningProperties = {\n    severity,\n    rule: ruleName\n  };\n\n  if (node) {\n    warningProperties.node = node;\n  }\n\n  if (index) {\n    warningProperties.index = index;\n  }\n\n  if (word) {\n    warningProperties.word = word;\n  }\n\n  const warningMessage = _.get(result.stylelint, ['customMessages', ruleName], message);\n\n  result.warn(warningMessage, warningProperties);\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/report.js"],"names":["_","require","module","exports","violation","ruleName","result","message","line","node","index","word","stylelint","ruleSeverities","customMessages","quiet","startLine","positionBy","disabledRanges","ignoreDisables","reportNeedlessDisables","ranges","all","range","start","end","undefined","rules","includes","disabledWarnings","push","rule","severity","get","stylelintError","warningProperties","warningMessage","warn"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\n/** @typedef {{\n  ruleName: string,\n  result: import('stylelint').PostcssResult,\n  message: string,\n  node: import('postcss').Node & {\n    positionBy(opts: { index?: number, word?: string }): { line: number, column: number }\n  },\n  index?: number,\n  word?: string,\n  line?: number\n}} Violation */\n\n/**\n * Report a violation.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported violation is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n * @param {Violation} violation\n */\nmodule.exports = function (violation) {\n\tconst ruleName = violation.ruleName;\n\tconst result = violation.result;\n\tconst message = violation.message;\n\tconst line = violation.line;\n\tconst node = violation.node;\n\tconst index = violation.index;\n\tconst word = violation.word;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\t// If a line is not passed, use the node.positionBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || node.positionBy({ index }).line;\n\n\tif (\n\t\tresult.stylelint.disabledRanges &&\n\t\t(!result.stylelint.ignoreDisables || result.stylelint.reportNeedlessDisables)\n\t) {\n\t\tconst ranges = result.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all;\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the violation is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\tif (result.stylelint.reportNeedlessDisables) {\n\t\t\t\t\t// Collect disabled warnings\n\t\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\t\tconst disabledWarnings =\n\t\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\t\trule: ruleName,\n\t\t\t\t\t\tline: startLine,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!result.stylelint.ignoreDisables) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @type {string} */\n\tconst severity = _.get(result.stylelint, ['ruleSeverities', ruleName], 'ignore');\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\t/** @type {import('stylelint').StylelintWarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst warningMessage = _.get(result.stylelint, ['customMessages', ruleName], message);\n\n\tresult.warn(warningMessage, warningProperties);\n};\n"]},"metadata":{},"sourceType":"script"}