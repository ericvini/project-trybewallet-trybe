{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('postcss').NodeSource} NodeSource */\n\n/** @typedef {import('stylelint').StylelintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').StylelintCssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\n\n\nmodule.exports = function (postcssResult, cssSyntaxError) {\n  /** @type {StylelintResult} */\n  let stylelintResult;\n  /** @type {string | undefined} */\n\n  let source;\n\n  if (postcssResult && postcssResult.root) {\n    if (postcssResult.root.source) {\n      source = postcssResult.root.source.input.file;\n\n      if (!source && 'id' in postcssResult.root.source.input) {\n        source = postcssResult.root.source.input.id;\n      }\n    } // Strip out deprecation warnings from the messages\n\n\n    const deprecationMessages = _.remove(postcssResult.messages, {\n      stylelintType: 'deprecation'\n    });\n\n    const deprecations = deprecationMessages.map(deprecationMessage => {\n      return {\n        text: deprecationMessage.text,\n        reference: deprecationMessage.stylelintReference\n      };\n    }); // Also strip out invalid options\n\n    const invalidOptionMessages = _.remove(postcssResult.messages, {\n      stylelintType: 'invalidOption'\n    });\n\n    const invalidOptionWarnings = invalidOptionMessages.map(invalidOptionMessage => {\n      return {\n        text: invalidOptionMessage.text\n      };\n    });\n\n    const parseErrors = _.remove(postcssResult.messages, {\n      stylelintType: 'parseError'\n    }); // This defines the stylelint result object that formatters receive\n\n\n    stylelintResult = {\n      source,\n      deprecations,\n      invalidOptionWarnings,\n      // TODO TYPES check which types are valid? postcss? stylelint?\n\n      /* eslint-disable-next-line object-shorthand */\n      parseErrors:\n      /** @type {any} */\n      parseErrors,\n      errored: postcssResult.stylelint.stylelintError,\n      warnings: postcssResult.messages.map(message => {\n        return {\n          line: message.line,\n          column: message.column,\n          rule: message.rule,\n          severity: message.severity,\n          text: message.text\n        };\n      }),\n      ignored: postcssResult.stylelint.ignored,\n      _postcssResult: postcssResult\n    };\n  } else if (cssSyntaxError) {\n    if (cssSyntaxError.name !== 'CssSyntaxError') {\n      throw cssSyntaxError;\n    }\n\n    stylelintResult = {\n      source: cssSyntaxError.file || '<input css 1>',\n      deprecations: [],\n      invalidOptionWarnings: [],\n      parseErrors: [],\n      errored: true,\n      warnings: [{\n        line: cssSyntaxError.line,\n        column: cssSyntaxError.column,\n        rule: cssSyntaxError.name,\n        severity: 'error',\n        text: `${cssSyntaxError.reason} (${cssSyntaxError.name})`\n      }]\n    };\n  } else {\n    throw new Error('createPartialStylelintResult must be called with either postcssResult or CssSyntaxError');\n  }\n\n  return stylelintResult;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/createPartialStylelintResult.js"],"names":["_","require","module","exports","postcssResult","cssSyntaxError","stylelintResult","source","root","input","file","id","deprecationMessages","remove","messages","stylelintType","deprecations","map","deprecationMessage","text","reference","stylelintReference","invalidOptionMessages","invalidOptionWarnings","invalidOptionMessage","parseErrors","errored","stylelint","stylelintError","warnings","message","line","column","rule","severity","ignored","_postcssResult","name","reason","Error"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,aAAV,EAAyBC,cAAzB,EAAyC;AACzD;AACA,MAAIC,eAAJ;AACA;;AACA,MAAIC,MAAJ;;AAEA,MAAIH,aAAa,IAAIA,aAAa,CAACI,IAAnC,EAAyC;AACxC,QAAIJ,aAAa,CAACI,IAAd,CAAmBD,MAAvB,EAA+B;AAC9BA,MAAAA,MAAM,GAAGH,aAAa,CAACI,IAAd,CAAmBD,MAAnB,CAA0BE,KAA1B,CAAgCC,IAAzC;;AAEA,UAAI,CAACH,MAAD,IAAW,QAAQH,aAAa,CAACI,IAAd,CAAmBD,MAAnB,CAA0BE,KAAjD,EAAwD;AACvDF,QAAAA,MAAM,GAAGH,aAAa,CAACI,IAAd,CAAmBD,MAAnB,CAA0BE,KAA1B,CAAgCE,EAAzC;AACA;AACD,KAPuC,CASxC;;;AACA,UAAMC,mBAAmB,GAAGZ,CAAC,CAACa,MAAF,CAAST,aAAa,CAACU,QAAvB,EAAiC;AAC5DC,MAAAA,aAAa,EAAE;AAD6C,KAAjC,CAA5B;;AAGA,UAAMC,YAAY,GAAGJ,mBAAmB,CAACK,GAApB,CAAyBC,kBAAD,IAAwB;AACpE,aAAO;AACNC,QAAAA,IAAI,EAAED,kBAAkB,CAACC,IADnB;AAENC,QAAAA,SAAS,EAAEF,kBAAkB,CAACG;AAFxB,OAAP;AAIA,KALoB,CAArB,CAbwC,CAoBxC;;AACA,UAAMC,qBAAqB,GAAGtB,CAAC,CAACa,MAAF,CAAST,aAAa,CAACU,QAAvB,EAAiC;AAC9DC,MAAAA,aAAa,EAAE;AAD+C,KAAjC,CAA9B;;AAGA,UAAMQ,qBAAqB,GAAGD,qBAAqB,CAACL,GAAtB,CAA2BO,oBAAD,IAA0B;AACjF,aAAO;AACNL,QAAAA,IAAI,EAAEK,oBAAoB,CAACL;AADrB,OAAP;AAGA,KAJ6B,CAA9B;;AAMA,UAAMM,WAAW,GAAGzB,CAAC,CAACa,MAAF,CAAST,aAAa,CAACU,QAAvB,EAAiC;AACpDC,MAAAA,aAAa,EAAE;AADqC,KAAjC,CAApB,CA9BwC,CAkCxC;;;AACAT,IAAAA,eAAe,GAAG;AACjBC,MAAAA,MADiB;AAEjBS,MAAAA,YAFiB;AAGjBO,MAAAA,qBAHiB;AAIjB;;AACA;AACAE,MAAAA,WAAW;AAAE;AAAoBA,MAAAA,WANhB;AAOjBC,MAAAA,OAAO,EAAEtB,aAAa,CAACuB,SAAd,CAAwBC,cAPhB;AAQjBC,MAAAA,QAAQ,EAAEzB,aAAa,CAACU,QAAd,CAAuBG,GAAvB,CAA4Ba,OAAD,IAAa;AACjD,eAAO;AACNC,UAAAA,IAAI,EAAED,OAAO,CAACC,IADR;AAENC,UAAAA,MAAM,EAAEF,OAAO,CAACE,MAFV;AAGNC,UAAAA,IAAI,EAAEH,OAAO,CAACG,IAHR;AAINC,UAAAA,QAAQ,EAAEJ,OAAO,CAACI,QAJZ;AAKNf,UAAAA,IAAI,EAAEW,OAAO,CAACX;AALR,SAAP;AAOA,OARS,CARO;AAiBjBgB,MAAAA,OAAO,EAAE/B,aAAa,CAACuB,SAAd,CAAwBQ,OAjBhB;AAkBjBC,MAAAA,cAAc,EAAEhC;AAlBC,KAAlB;AAoBA,GAvDD,MAuDO,IAAIC,cAAJ,EAAoB;AAC1B,QAAIA,cAAc,CAACgC,IAAf,KAAwB,gBAA5B,EAA8C;AAC7C,YAAMhC,cAAN;AACA;;AAEDC,IAAAA,eAAe,GAAG;AACjBC,MAAAA,MAAM,EAAEF,cAAc,CAACK,IAAf,IAAuB,eADd;AAEjBM,MAAAA,YAAY,EAAE,EAFG;AAGjBO,MAAAA,qBAAqB,EAAE,EAHN;AAIjBE,MAAAA,WAAW,EAAE,EAJI;AAKjBC,MAAAA,OAAO,EAAE,IALQ;AAMjBG,MAAAA,QAAQ,EAAE,CACT;AACCE,QAAAA,IAAI,EAAE1B,cAAc,CAAC0B,IADtB;AAECC,QAAAA,MAAM,EAAE3B,cAAc,CAAC2B,MAFxB;AAGCC,QAAAA,IAAI,EAAE5B,cAAc,CAACgC,IAHtB;AAICH,QAAAA,QAAQ,EAAE,OAJX;AAKCf,QAAAA,IAAI,EAAG,GAAEd,cAAc,CAACiC,MAAO,KAAIjC,cAAc,CAACgC,IAAK;AALxD,OADS;AANO,KAAlB;AAgBA,GArBM,MAqBA;AACN,UAAM,IAAIE,KAAJ,CACL,yFADK,CAAN;AAGA;;AAED,SAAOjC,eAAP;AACA,CAzFD","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('postcss').NodeSource} NodeSource */\n/** @typedef {import('stylelint').StylelintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').StylelintCssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function (postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\t// Strip out deprecation warnings from the messages\n\t\tconst deprecationMessages = _.remove(postcssResult.messages, {\n\t\t\tstylelintType: 'deprecation',\n\t\t});\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\t// Also strip out invalid options\n\t\tconst invalidOptionMessages = _.remove(postcssResult.messages, {\n\t\t\tstylelintType: 'invalidOption',\n\t\t});\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = _.remove(postcssResult.messages, {\n\t\t\tstylelintType: 'parseError',\n\t\t});\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// TODO TYPES check which types are valid? postcss? stylelint?\n\t\t\t/* eslint-disable-next-line object-shorthand */\n\t\t\tparseErrors: /** @type {any} */ (parseErrors),\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n"]},"metadata":{},"sourceType":"script"}