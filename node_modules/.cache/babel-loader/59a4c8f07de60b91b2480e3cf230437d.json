{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\nconst messages = ruleMessages(ruleName, {\n  rejected: p => `Unexpected vendor-prefixed at-rule \"@${p}\"`\n});\n\nfunction rule(actual, options, context) {\n  return function (root, result) {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(atRule => {\n      if (!isStandardSyntaxAtRule(atRule)) {\n        return;\n      }\n\n      const name = atRule.name;\n\n      if (!name.startsWith('-')) {\n        return;\n      }\n\n      if (!isAutoprefixable.atRuleName(name)) {\n        return;\n      }\n\n      if (context.fix) {\n        atRule.name = isAutoprefixable.unprefix(atRule.name);\n        return;\n      }\n\n      report({\n        message: messages.rejected(name),\n        node: atRule,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js"],"names":["isAutoprefixable","require","isStandardSyntaxAtRule","report","ruleMessages","validateOptions","ruleName","messages","rejected","p","rule","actual","options","context","root","result","validOptions","walkAtRules","atRule","name","startsWith","atRuleName","fix","unprefix","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,oCAAD,CAAtC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,0BAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,CAAD,IAAQ,wCAAuCA,CAAE;AADpB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACvC,SAAO,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AAC9B,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAAST,QAAT,EAAmB;AAAEK,MAAAA;AAAF,KAAnB,CAApC;;AAEA,QAAI,CAACK,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACG,WAAL,CAAkBC,MAAD,IAAY;AAC5B,UAAI,CAAChB,sBAAsB,CAACgB,MAAD,CAA3B,EAAqC;AACpC;AACA;;AAED,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAI,CAACA,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAL,EAA2B;AAC1B;AACA;;AAED,UAAI,CAACpB,gBAAgB,CAACqB,UAAjB,CAA4BF,IAA5B,CAAL,EAAwC;AACvC;AACA;;AAED,UAAIN,OAAO,CAACS,GAAZ,EAAiB;AAChBJ,QAAAA,MAAM,CAACC,IAAP,GAAcnB,gBAAgB,CAACuB,QAAjB,CAA0BL,MAAM,CAACC,IAAjC,CAAd;AAEA;AACA;;AAEDhB,MAAAA,MAAM,CAAC;AACNqB,QAAAA,OAAO,EAAEjB,QAAQ,CAACC,QAAT,CAAkBW,IAAlB,CADH;AAENM,QAAAA,IAAI,EAAEP,MAFA;AAGNH,QAAAA,MAHM;AAINT,QAAAA;AAJM,OAAD,CAAN;AAMA,KA3BD;AA4BA,GAnCD;AAoCA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAmB,MAAM,CAACC,OAAP,GAAiBjB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (p) => `Unexpected vendor-prefixed at-rule \"@${p}\"`,\n});\n\nfunction rule(actual, options, context) {\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!name.startsWith('-')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isAutoprefixable.atRuleName(name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.name = isAutoprefixable.unprefix(atRule.name);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}