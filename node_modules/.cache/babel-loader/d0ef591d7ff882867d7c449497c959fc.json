{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\n\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\n\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-whitelist';\nconst messages = ruleMessages(ruleName, {\n  rejected: name => `Unexpected media feature name \"${name}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString, _.isRegExp]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'media-feature-name-allowed-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n    root.walkAtRules(/^media$/i, atRule => {\n      mediaParser(atRule.params).walk(/^media-feature$/i, mediaFeatureNode => {\n        const parent = mediaFeatureNode.parent;\n        const mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n        let value;\n        let sourceIndex;\n\n        if (mediaFeatureRangeContext) {\n          const parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n          value = parsedRangeContext.name.value;\n          sourceIndex = parsedRangeContext.name.sourceIndex;\n        } else {\n          value = mediaFeatureNode.value;\n          sourceIndex = mediaFeatureNode.sourceIndex;\n        }\n\n        if (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n          return;\n        }\n\n        if (matchesStringOrRegExp(value, list)) {\n          return;\n        }\n\n        report({\n          index: atRuleParamIndex(atRule) + sourceIndex,\n          message: messages.rejected(value),\n          node: atRule,\n          ruleName,\n          result\n        });\n      });\n    });\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-feature-name-whitelist/index.js"],"names":["_","require","atRuleParamIndex","isCustomMediaQuery","isRangeContextMediaFeature","isStandardSyntaxMediaFeatureName","matchesStringOrRegExp","mediaParser","default","rangeContextNodeParser","report","ruleMessages","validateOptions","ruleName","messages","rejected","name","rule","list","root","result","validOptions","actual","possible","isString","isRegExp","warn","stylelintType","stylelintReference","walkAtRules","atRule","params","walk","mediaFeatureNode","parent","mediaFeatureRangeContext","value","sourceIndex","parsedRangeContext","index","message","node","primaryOptionArray","meta","deprecated","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-whitelist';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected media feature name \"${name}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString, _.isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(\n\t\t\t`'${ruleName}' has been deprecated. Instead use 'media-feature-name-allowed-list'.`,\n\t\t\t{\n\t\t\t\tstylelintType: 'deprecation',\n\t\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t\t},\n\t\t);\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (matchesStringOrRegExp(value, list)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}