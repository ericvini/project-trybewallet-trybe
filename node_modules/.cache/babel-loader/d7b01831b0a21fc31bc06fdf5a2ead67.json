{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\nconst messages = ruleMessages(ruleName, {\n  expectedOpening: 'Expected single space after \"(\"',\n  rejectedOpening: 'Unexpected whitespace after \"(\"',\n  expectedClosing: 'Expected single space before \")\"',\n  rejectedClosing: 'Unexpected whitespace before \")\"'\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(/^media$/i, atRule => {\n      // If there are comments in the params, the complete string\n      // will be at atRule.raws.params.raw\n      const params = _.get(atRule, 'raws.params.raw', atRule.params);\n\n      const indexBoost = atRuleParamIndex(atRule);\n      const violations = [];\n      const parsedParams = valueParser(params).walk(node => {\n        if (node.type === 'function') {\n          const len = valueParser.stringify(node).length;\n\n          if (expectation === 'never') {\n            if (/[ \\t]/.test(node.before)) {\n              if (context.fix) node.before = '';\n              violations.push({\n                message: messages.rejectedOpening,\n                index: node.sourceIndex + 1 + indexBoost\n              });\n            }\n\n            if (/[ \\t]/.test(node.after)) {\n              if (context.fix) node.after = '';\n              violations.push({\n                message: messages.rejectedClosing,\n                index: node.sourceIndex - 2 + len + indexBoost\n              });\n            }\n          } else if (expectation === 'always') {\n            if (node.before === '') {\n              if (context.fix) node.before = ' ';\n              violations.push({\n                message: messages.expectedOpening,\n                index: node.sourceIndex + 1 + indexBoost\n              });\n            }\n\n            if (node.after === '') {\n              if (context.fix) node.after = ' ';\n              violations.push({\n                message: messages.expectedClosing,\n                index: node.sourceIndex - 2 + len + indexBoost\n              });\n            }\n          }\n        }\n      });\n\n      if (violations.length) {\n        if (context.fix) {\n          atRule.params = parsedParams.toString();\n          return;\n        }\n\n        violations.forEach(err => {\n          report({\n            message: err.message,\n            node: atRule,\n            index: err.index,\n            result,\n            ruleName\n          });\n        });\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js"],"names":["_","require","atRuleParamIndex","report","ruleMessages","validateOptions","valueParser","ruleName","messages","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","rule","expectation","options","context","root","result","validOptions","actual","possible","walkAtRules","atRule","params","get","indexBoost","violations","parsedParams","walk","node","type","len","stringify","length","test","before","fix","push","message","index","sourceIndex","after","toString","forEach","err","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'media-feature-parentheses-space-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected single space after \"(\"',\n\trejectedOpening: 'Unexpected whitespace after \"(\"',\n\texpectedClosing: 'Expected single space before \")\"',\n\trejectedClosing: 'Unexpected whitespace before \")\"',\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\t// If there are comments in the params, the complete string\n\t\t\t// will be at atRule.raws.params.raw\n\t\t\tconst params = _.get(atRule, 'raws.params.raw', atRule.params);\n\t\t\tconst indexBoost = atRuleParamIndex(atRule);\n\t\t\tconst violations = [];\n\n\t\t\tconst parsedParams = valueParser(params).walk((node) => {\n\t\t\t\tif (node.type === 'function') {\n\t\t\t\t\tconst len = valueParser.stringify(node).length;\n\n\t\t\t\t\tif (expectation === 'never') {\n\t\t\t\t\t\tif (/[ \\t]/.test(node.before)) {\n\t\t\t\t\t\t\tif (context.fix) node.before = '';\n\n\t\t\t\t\t\t\tviolations.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/[ \\t]/.test(node.after)) {\n\t\t\t\t\t\t\tif (context.fix) node.after = '';\n\n\t\t\t\t\t\t\tviolations.push({\n\t\t\t\t\t\t\t\tmessage: messages.rejectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (expectation === 'always') {\n\t\t\t\t\t\tif (node.before === '') {\n\t\t\t\t\t\t\tif (context.fix) node.before = ' ';\n\n\t\t\t\t\t\t\tviolations.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedOpening,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex + 1 + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.after === '') {\n\t\t\t\t\t\t\tif (context.fix) node.after = ' ';\n\n\t\t\t\t\t\t\tviolations.push({\n\t\t\t\t\t\t\t\tmessage: messages.expectedClosing,\n\t\t\t\t\t\t\t\tindex: node.sourceIndex - 2 + len + indexBoost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (violations.length) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tatRule.params = parsedParams.toString();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tviolations.forEach((err) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tnode: atRule,\n\t\t\t\t\t\tindex: err.index,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}