{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst Module = require('module');\n\nconst fs = require('fs');\n\nconst resolveFrom = (fromDirectory, moduleId, silent) => {\n  if (typeof fromDirectory !== 'string') {\n    throw new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDirectory}\\``);\n  }\n\n  if (typeof moduleId !== 'string') {\n    throw new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n  }\n\n  try {\n    fromDirectory = fs.realpathSync(fromDirectory);\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      fromDirectory = path.resolve(fromDirectory);\n    } else if (silent) {\n      return;\n    } else {\n      throw error;\n    }\n  }\n\n  const fromFile = path.join(fromDirectory, 'noop.js');\n\n  const resolveFileName = () => Module._resolveFilename(moduleId, {\n    id: fromFile,\n    filename: fromFile,\n    paths: Module._nodeModulePaths(fromDirectory)\n  });\n\n  if (silent) {\n    try {\n      return resolveFileName();\n    } catch (error) {\n      return;\n    }\n  }\n\n  return resolveFileName();\n};\n\nmodule.exports = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId);\n\nmodule.exports.silent = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId, true);","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/node_modules/resolve-from/index.js"],"names":["path","require","Module","fs","resolveFrom","fromDirectory","moduleId","silent","TypeError","realpathSync","error","code","resolve","fromFile","join","resolveFileName","_resolveFilename","id","filename","paths","_nodeModulePaths","module","exports"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMG,WAAW,GAAG,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,MAA1B,KAAqC;AACxD,MAAI,OAAOF,aAAP,KAAyB,QAA7B,EAAuC;AACtC,UAAM,IAAIG,SAAJ,CAAe,wDAAuD,OAAOH,aAAc,IAA3F,CAAN;AACA;;AAED,MAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AACjC,UAAM,IAAIE,SAAJ,CAAe,yDAAwD,OAAOF,QAAS,IAAvF,CAAN;AACA;;AAED,MAAI;AACHD,IAAAA,aAAa,GAAGF,EAAE,CAACM,YAAH,CAAgBJ,aAAhB,CAAhB;AACA,GAFD,CAEE,OAAOK,KAAP,EAAc;AACf,QAAIA,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AAC5BN,MAAAA,aAAa,GAAGL,IAAI,CAACY,OAAL,CAAaP,aAAb,CAAhB;AACA,KAFD,MAEO,IAAIE,MAAJ,EAAY;AAClB;AACA,KAFM,MAEA;AACN,YAAMG,KAAN;AACA;AACD;;AAED,QAAMG,QAAQ,GAAGb,IAAI,CAACc,IAAL,CAAUT,aAAV,EAAyB,SAAzB,CAAjB;;AAEA,QAAMU,eAAe,GAAG,MAAMb,MAAM,CAACc,gBAAP,CAAwBV,QAAxB,EAAkC;AAC/DW,IAAAA,EAAE,EAAEJ,QAD2D;AAE/DK,IAAAA,QAAQ,EAAEL,QAFqD;AAG/DM,IAAAA,KAAK,EAAEjB,MAAM,CAACkB,gBAAP,CAAwBf,aAAxB;AAHwD,GAAlC,CAA9B;;AAMA,MAAIE,MAAJ,EAAY;AACX,QAAI;AACH,aAAOQ,eAAe,EAAtB;AACA,KAFD,CAEE,OAAOL,KAAP,EAAc;AACf;AACA;AACD;;AAED,SAAOK,eAAe,EAAtB;AACA,CAtCD;;AAwCAM,MAAM,CAACC,OAAP,GAAiB,CAACjB,aAAD,EAAgBC,QAAhB,KAA6BF,WAAW,CAACC,aAAD,EAAgBC,QAAhB,CAAzD;;AACAe,MAAM,CAACC,OAAP,CAAef,MAAf,GAAwB,CAACF,aAAD,EAAgBC,QAAhB,KAA6BF,WAAW,CAACC,aAAD,EAAgBC,QAAhB,EAA0B,IAA1B,CAAhE","sourcesContent":["'use strict';\nconst path = require('path');\nconst Module = require('module');\nconst fs = require('fs');\n\nconst resolveFrom = (fromDirectory, moduleId, silent) => {\n\tif (typeof fromDirectory !== 'string') {\n\t\tthrow new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDirectory}\\``);\n\t}\n\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n\t}\n\n\ttry {\n\t\tfromDirectory = fs.realpathSync(fromDirectory);\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\tfromDirectory = path.resolve(fromDirectory);\n\t\t} else if (silent) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tconst fromFile = path.join(fromDirectory, 'noop.js');\n\n\tconst resolveFileName = () => Module._resolveFilename(moduleId, {\n\t\tid: fromFile,\n\t\tfilename: fromFile,\n\t\tpaths: Module._nodeModulePaths(fromDirectory)\n\t});\n\n\tif (silent) {\n\t\ttry {\n\t\t\treturn resolveFileName();\n\t\t} catch (error) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn resolveFileName();\n};\n\nmodule.exports = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId);\nmodule.exports.silent = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId, true);\n"]},"metadata":{},"sourceType":"script"}