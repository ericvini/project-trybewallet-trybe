{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-pattern';\nconst messages = ruleMessages(ruleName, {\n  expected: pattern => `Expected comment to match pattern \"${pattern}\"`\n});\n\nfunction rule(pattern) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: pattern,\n      possible: [_.isRegExp, _.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern;\n    root.walkComments(comment => {\n      const text = comment.text;\n\n      if (normalizedPattern.test(text)) {\n        return;\n      }\n\n      report({\n        message: messages.expected(pattern),\n        node: comment,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/comment-pattern/index.js"],"names":["_","require","report","ruleMessages","validateOptions","ruleName","messages","expected","pattern","rule","root","result","validOptions","actual","possible","isRegExp","isString","normalizedPattern","RegExp","walkComments","comment","text","test","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMI,QAAQ,GAAG,iBAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,OAAD,IAAc,sCAAqCA,OAAQ;AAD9B,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcD,OAAd,EAAuB;AACtB,SAAO,CAACE,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGR,eAAe,CAACO,MAAD,EAASN,QAAT,EAAmB;AACtDQ,MAAAA,MAAM,EAAEL,OAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAACd,CAAC,CAACe,QAAH,EAAaf,CAAC,CAACgB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAED,UAAMK,iBAAiB,GAAGjB,CAAC,CAACgB,QAAF,CAAWR,OAAX,IAAsB,IAAIU,MAAJ,CAAWV,OAAX,CAAtB,GAA4CA,OAAtE;AAEAE,IAAAA,IAAI,CAACS,YAAL,CAAmBC,OAAD,IAAa;AAC9B,YAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;;AAEA,UAAIJ,iBAAiB,CAACK,IAAlB,CAAuBD,IAAvB,CAAJ,EAAkC;AACjC;AACA;;AAEDnB,MAAAA,MAAM,CAAC;AACNqB,QAAAA,OAAO,EAAEjB,QAAQ,CAACC,QAAT,CAAkBC,OAAlB,CADH;AAENgB,QAAAA,IAAI,EAAEJ,OAFA;AAGNT,QAAAA,MAHM;AAINN,QAAAA;AAJM,OAAD,CAAN;AAMA,KAbD;AAcA,GA1BD;AA2BA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAmB,MAAM,CAACC,OAAP,GAAiBjB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected comment to match pattern \"${pattern}\"`,\n});\n\nfunction rule(pattern) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: pattern,\n\t\t\tpossible: [_.isRegExp, _.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern;\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\n\t\t\tif (normalizedPattern.test(text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}