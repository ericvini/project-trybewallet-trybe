{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-id-pattern';\nconst messages = ruleMessages(ruleName, {\n  expected: (selectorValue, pattern) => `Expected ID selector \"#${selectorValue}\" to match pattern \"${pattern}\"`\n});\n\nfunction rule(pattern) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: pattern,\n      possible: [_.isRegExp, _.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern; // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      const selector = rule.selector;\n      parseSelector(selector, result, rule, fullSelector => {\n        fullSelector.walk(selectorNode => {\n          if (selectorNode.type !== 'id') {\n            return;\n          }\n\n          const value = selectorNode.value;\n          const sourceIndex = selectorNode.sourceIndex;\n\n          if (normalizedPattern.test(value)) {\n            return;\n          }\n\n          report({\n            result,\n            ruleName,\n            message: messages.expected(value, pattern),\n            node: rule,\n            index: sourceIndex\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-id-pattern/index.js"],"names":["_","require","isStandardSyntaxRule","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","expected","selectorValue","pattern","rule","root","result","validOptions","actual","possible","isRegExp","isString","normalizedPattern","RegExp","walkRules","selector","fullSelector","walk","selectorNode","type","value","sourceIndex","test","message","node","index","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMM,QAAQ,GAAG,qBAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,aAAD,EAAgBC,OAAhB,KACR,0BAAyBD,aAAc,uBAAsBC,OAAQ;AAFhC,CAAX,CAA7B;;AAKA,SAASC,IAAT,CAAcD,OAAd,EAAuB;AACtB,SAAO,CAACE,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGT,eAAe,CAACQ,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEL,OAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAACjB,CAAC,CAACkB,QAAH,EAAalB,CAAC,CAACmB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAED,UAAMK,iBAAiB,GAAGpB,CAAC,CAACmB,QAAF,CAAWR,OAAX,IAAsB,IAAIU,MAAJ,CAAWV,OAAX,CAAtB,GAA4CA,OAAtE,CAVwB,CAYxB;AACA;;AACAE,IAAAA,IAAI,CAACS,SAAL,CAAgBV,IAAD,IAAU;AACxB,UAAI,CAACV,oBAAoB,CAACU,IAAD,CAAzB,EAAiC;AAChC;AACA;;AAED,YAAMW,QAAQ,GAAGX,IAAI,CAACW,QAAtB;AAEApB,MAAAA,aAAa,CAACoB,QAAD,EAAWT,MAAX,EAAmBF,IAAnB,EAA0BY,YAAD,IAAkB;AACvDA,QAAAA,YAAY,CAACC,IAAb,CAAmBC,YAAD,IAAkB;AACnC,cAAIA,YAAY,CAACC,IAAb,KAAsB,IAA1B,EAAgC;AAC/B;AACA;;AAED,gBAAMC,KAAK,GAAGF,YAAY,CAACE,KAA3B;AACA,gBAAMC,WAAW,GAAGH,YAAY,CAACG,WAAjC;;AAEA,cAAIT,iBAAiB,CAACU,IAAlB,CAAuBF,KAAvB,CAAJ,EAAmC;AAClC;AACA;;AAEDxB,UAAAA,MAAM,CAAC;AACNU,YAAAA,MADM;AAENP,YAAAA,QAFM;AAGNwB,YAAAA,OAAO,EAAEvB,QAAQ,CAACC,QAAT,CAAkBmB,KAAlB,EAAyBjB,OAAzB,CAHH;AAINqB,YAAAA,IAAI,EAAEpB,IAJA;AAKNqB,YAAAA,KAAK,EAAEJ;AALD,WAAD,CAAN;AAOA,SAnBD;AAoBA,OArBY,CAAb;AAsBA,KA7BD;AA8BA,GA5CD;AA6CA;;AAEDjB,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACA0B,MAAM,CAACC,OAAP,GAAiBvB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-id-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selectorValue, pattern) =>\n\t\t`Expected ID selector \"#${selectorValue}\" to match pattern \"${pattern}\"`,\n});\n\nfunction rule(pattern) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: pattern,\n\t\t\tpossible: [_.isRegExp, _.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern;\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = rule.selector;\n\n\t\t\tparseSelector(selector, result, rule, (fullSelector) => {\n\t\t\t\tfullSelector.walk((selectorNode) => {\n\t\t\t\t\tif (selectorNode.type !== 'id') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = selectorNode.value;\n\t\t\t\t\tconst sourceIndex = selectorNode.sourceIndex;\n\n\t\t\t\t\tif (normalizedPattern.test(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.expected(value, pattern),\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tindex: sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}