{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst chalk = require('chalk');\n\nconst path = require('path');\n\nconst stringWidth = require('string-width');\n\nconst symbols = require('log-symbols');\n\nconst table = require('table');\n\nconst MARGIN_WIDTHS = 9;\nconst levelColors = {\n  info: 'blue',\n  warning: 'yellow',\n  error: 'red',\n  success: undefined\n};\n/**\n * @param {import('stylelint').StylelintResult[]} results\n * @returns {string}\n */\n\nfunction deprecationsFormatter(results) {\n  const allDeprecationWarnings = _.flatMap(results, 'deprecations');\n\n  const uniqueDeprecationWarnings = _.uniqBy(allDeprecationWarnings, 'text');\n\n  if (!uniqueDeprecationWarnings || !uniqueDeprecationWarnings.length) {\n    return '';\n  }\n\n  return uniqueDeprecationWarnings.reduce((output, warning) => {\n    output += chalk.yellow('Deprecation Warning: ');\n    output += warning.text;\n\n    if (warning.reference) {\n      output += chalk.dim(' See: ');\n      output += chalk.dim.underline(warning.reference);\n    }\n\n    return `${output}\\n`;\n  }, '\\n');\n}\n/**\n * @param {import('stylelint').StylelintResult[]} results\n * @return {string}\n */\n\n\nfunction invalidOptionsFormatter(results) {\n  const allInvalidOptionWarnings = _.flatMap(results, r => r.invalidOptionWarnings.map(w => w.text));\n\n  const uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n  return uniqueInvalidOptionWarnings.reduce((output, warning) => {\n    output += chalk.red('Invalid Option: ');\n    output += warning;\n    return `${output}\\n`;\n  }, '\\n');\n}\n/**\n * @param {string} fromValue\n * @return {string}\n */\n\n\nfunction logFrom(fromValue) {\n  if (fromValue.startsWith('<')) return fromValue;\n  return path.relative(process.cwd(), fromValue).split(path.sep).join('/');\n}\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\n\n\nfunction getMessageWidth(columnWidths) {\n  if (!process.stdout.isTTY) {\n    return columnWidths[3];\n  }\n\n  const availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n  const fullWidth = Object.values(columnWidths).reduce((a, b) => a + b); // If there is no reason to wrap the text, we won't align the last column to the right\n\n  if (availableWidth > fullWidth + MARGIN_WIDTHS) {\n    return columnWidths[3];\n  }\n\n  return availableWidth - (fullWidth - columnWidths[3] + MARGIN_WIDTHS);\n}\n/**\n * @param {import('stylelint').StylelintWarning[]} messages\n * @param {string} source\n * @return {string}\n */\n\n\nfunction formatter(messages, source) {\n  if (!messages.length) return '';\n\n  const orderedMessages = _.sortBy(messages, // eslint-disable-next-line no-confusing-arrow\n  m => m.line ? 2 : 1, // positionless first\n  m => m.line, m => m.column);\n  /**\n   * Create a list of column widths, needed to calculate\n   * the size of the message column and if needed wrap it.\n   * @type {{[k: string]: number}}\n   */\n\n\n  const columnWidths = {\n    0: 1,\n    1: 1,\n    2: 1,\n    3: 1,\n    4: 1\n  };\n  /**\n   * @param {[string, string, string, string, string]} columns\n   * @return {[string, string, string, string, string]}\n   */\n\n  function calculateWidths(columns) {\n    for (const [key, value] of Object.entries(columns)) {\n      const normalisedValue = value ? value.toString() : value;\n      columnWidths[key] = Math.max(columnWidths[key], stringWidth(normalisedValue));\n    }\n\n    return columns;\n  }\n\n  let output = '\\n';\n\n  if (source) {\n    output += `${chalk.underline(logFrom(source))}\\n`;\n  }\n\n  const cleanedMessages = orderedMessages.map(message => {\n    const {\n      line,\n      column\n    } = message;\n    const severity =\n    /** @type {keyof import('log-symbols')} */\n    message.severity;\n    /**\n     * @type {[string, string, string, string, string]}\n     */\n\n    const row = [line ? line.toString() : '', column ? column.toString() : '', symbols[severity] ? chalk[\n    /** @type {'blue' | 'red' | 'yellow'} */\n    levelColors[severity]](symbols[severity]) : severity, message.text // Remove all control characters (newline, tab and etc)\n    .replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n    .replace(/\\.$/, '') // eslint-disable-next-line prefer-template\n    .replace(new RegExp(_.escapeRegExp('(' + message.rule + ')') + '$'), ''), chalk.dim(message.rule || '')];\n    calculateWidths(row);\n    return row;\n  });\n  output += table.table(cleanedMessages, {\n    border: table.getBorderCharacters('void'),\n    columns: {\n      0: {\n        alignment: 'right',\n        width: columnWidths[0],\n        paddingRight: 0\n      },\n      1: {\n        alignment: 'left',\n        width: columnWidths[1]\n      },\n      2: {\n        alignment: 'center',\n        width: columnWidths[2]\n      },\n      3: {\n        alignment: 'left',\n        width: getMessageWidth(columnWidths),\n        wrapWord: getMessageWidth(columnWidths) > 1\n      },\n      4: {\n        alignment: 'left',\n        width: columnWidths[4],\n        paddingRight: 0\n      }\n    },\n    drawHorizontalLine: () => false\n  }).split('\\n').map(\n  /**\n   * @param {string} el\n   * @returns {string}\n   */\n  el => el.replace(/(\\d+)\\s+(\\d+)/, (m, p1, p2) => chalk.dim(`${p1}:${p2}`))).join('\\n');\n  return output;\n}\n/**\n * @type {import('stylelint').Formatter}\n */\n\n\nmodule.exports = function (results) {\n  let output = invalidOptionsFormatter(results);\n  output += deprecationsFormatter(results); // TODO: Issue #4985\n  // eslint-disable-next-line no-shadow\n\n  output = results.reduce((output, result) => {\n    // Treat parseErrors as warnings\n    if (result.parseErrors) {\n      result.parseErrors.forEach(error => result.warnings.push({\n        line: error.line,\n        column: error.column,\n        rule: error.stylelintType,\n        severity: 'error',\n        text: `${error.text} (${error.stylelintType})`\n      }));\n    }\n\n    output += formatter(result.warnings, result.source || '');\n    return output;\n  }, output); // Ensure consistent padding\n\n  output = output.trim();\n\n  if (output !== '') {\n    output = `\\n${output}\\n\\n`;\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/formatters/stringFormatter.js"],"names":["_","require","chalk","path","stringWidth","symbols","table","MARGIN_WIDTHS","levelColors","info","warning","error","success","undefined","deprecationsFormatter","results","allDeprecationWarnings","flatMap","uniqueDeprecationWarnings","uniqBy","length","reduce","output","yellow","text","reference","dim","underline","invalidOptionsFormatter","allInvalidOptionWarnings","r","invalidOptionWarnings","map","w","uniqueInvalidOptionWarnings","Set","red","logFrom","fromValue","startsWith","relative","process","cwd","split","sep","join","getMessageWidth","columnWidths","stdout","isTTY","availableWidth","columns","fullWidth","Object","values","a","b","formatter","messages","source","orderedMessages","sortBy","m","line","column","calculateWidths","key","value","entries","normalisedValue","toString","Math","max","cleanedMessages","message","severity","row","replace","RegExp","escapeRegExp","rule","border","getBorderCharacters","alignment","width","paddingRight","wrapWord","drawHorizontalLine","el","p1","p2","module","exports","result","parseErrors","forEach","warnings","push","stylelintType","trim"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst path = require('path');\nconst stringWidth = require('string-width');\nconst symbols = require('log-symbols');\nconst table = require('table');\n\nconst MARGIN_WIDTHS = 9;\n\nconst levelColors = {\n\tinfo: 'blue',\n\twarning: 'yellow',\n\terror: 'red',\n\tsuccess: undefined,\n};\n\n/**\n * @param {import('stylelint').StylelintResult[]} results\n * @returns {string}\n */\nfunction deprecationsFormatter(results) {\n\tconst allDeprecationWarnings = _.flatMap(results, 'deprecations');\n\tconst uniqueDeprecationWarnings = _.uniqBy(allDeprecationWarnings, 'text');\n\n\tif (!uniqueDeprecationWarnings || !uniqueDeprecationWarnings.length) {\n\t\treturn '';\n\t}\n\n\treturn uniqueDeprecationWarnings.reduce((output, warning) => {\n\t\toutput += chalk.yellow('Deprecation Warning: ');\n\t\toutput += warning.text;\n\n\t\tif (warning.reference) {\n\t\t\toutput += chalk.dim(' See: ');\n\t\t\toutput += chalk.dim.underline(warning.reference);\n\t\t}\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {import('stylelint').StylelintResult[]} results\n * @return {string}\n */\nfunction invalidOptionsFormatter(results) {\n\tconst allInvalidOptionWarnings = _.flatMap(results, (r) =>\n\t\tr.invalidOptionWarnings.map((w) => w.text),\n\t);\n\tconst uniqueInvalidOptionWarnings = [...new Set(allInvalidOptionWarnings)];\n\n\treturn uniqueInvalidOptionWarnings.reduce((output, warning) => {\n\t\toutput += chalk.red('Invalid Option: ');\n\t\toutput += warning;\n\n\t\treturn `${output}\\n`;\n\t}, '\\n');\n}\n\n/**\n * @param {string} fromValue\n * @return {string}\n */\nfunction logFrom(fromValue) {\n\tif (fromValue.startsWith('<')) return fromValue;\n\n\treturn path.relative(process.cwd(), fromValue).split(path.sep).join('/');\n}\n\n/**\n * @param {{[k: number]: number}} columnWidths\n * @return {number}\n */\nfunction getMessageWidth(columnWidths) {\n\tif (!process.stdout.isTTY) {\n\t\treturn columnWidths[3];\n\t}\n\n\tconst availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns;\n\tconst fullWidth = Object.values(columnWidths).reduce((a, b) => a + b);\n\n\t// If there is no reason to wrap the text, we won't align the last column to the right\n\tif (availableWidth > fullWidth + MARGIN_WIDTHS) {\n\t\treturn columnWidths[3];\n\t}\n\n\treturn availableWidth - (fullWidth - columnWidths[3] + MARGIN_WIDTHS);\n}\n\n/**\n * @param {import('stylelint').StylelintWarning[]} messages\n * @param {string} source\n * @return {string}\n */\nfunction formatter(messages, source) {\n\tif (!messages.length) return '';\n\n\tconst orderedMessages = _.sortBy(\n\t\tmessages,\n\t\t// eslint-disable-next-line no-confusing-arrow\n\t\t(m) => (m.line ? 2 : 1), // positionless first\n\t\t(m) => m.line,\n\t\t(m) => m.column,\n\t);\n\n\t/**\n\t * Create a list of column widths, needed to calculate\n\t * the size of the message column and if needed wrap it.\n\t * @type {{[k: string]: number}}\n\t */\n\tconst columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 };\n\n\t/**\n\t * @param {[string, string, string, string, string]} columns\n\t * @return {[string, string, string, string, string]}\n\t */\n\tfunction calculateWidths(columns) {\n\t\tfor (const [key, value] of Object.entries(columns)) {\n\t\t\tconst normalisedValue = value ? value.toString() : value;\n\n\t\t\tcolumnWidths[key] = Math.max(columnWidths[key], stringWidth(normalisedValue));\n\t\t}\n\n\t\treturn columns;\n\t}\n\n\tlet output = '\\n';\n\n\tif (source) {\n\t\toutput += `${chalk.underline(logFrom(source))}\\n`;\n\t}\n\n\tconst cleanedMessages = orderedMessages.map((message) => {\n\t\tconst { line, column } = message;\n\t\tconst severity = /** @type {keyof import('log-symbols')} */ (message.severity);\n\t\t/**\n\t\t * @type {[string, string, string, string, string]}\n\t\t */\n\t\tconst row = [\n\t\t\tline ? line.toString() : '',\n\t\t\tcolumn ? column.toString() : '',\n\t\t\tsymbols[severity]\n\t\t\t\t? chalk[/** @type {'blue' | 'red' | 'yellow'} */ (levelColors[severity])](symbols[severity])\n\t\t\t\t: severity,\n\t\t\tmessage.text\n\t\t\t\t// Remove all control characters (newline, tab and etc)\n\t\t\t\t.replace(/[\\u0001-\\u001A]+/g, ' ') // eslint-disable-line no-control-regex\n\t\t\t\t.replace(/\\.$/, '')\n\t\t\t\t// eslint-disable-next-line prefer-template\n\t\t\t\t.replace(new RegExp(_.escapeRegExp('(' + message.rule + ')') + '$'), ''),\n\t\t\tchalk.dim(message.rule || ''),\n\t\t];\n\n\t\tcalculateWidths(row);\n\n\t\treturn row;\n\t});\n\n\toutput += table\n\t\t.table(cleanedMessages, {\n\t\t\tborder: table.getBorderCharacters('void'),\n\t\t\tcolumns: {\n\t\t\t\t0: { alignment: 'right', width: columnWidths[0], paddingRight: 0 },\n\t\t\t\t1: { alignment: 'left', width: columnWidths[1] },\n\t\t\t\t2: { alignment: 'center', width: columnWidths[2] },\n\t\t\t\t3: {\n\t\t\t\t\talignment: 'left',\n\t\t\t\t\twidth: getMessageWidth(columnWidths),\n\t\t\t\t\twrapWord: getMessageWidth(columnWidths) > 1,\n\t\t\t\t},\n\t\t\t\t4: { alignment: 'left', width: columnWidths[4], paddingRight: 0 },\n\t\t\t},\n\t\t\tdrawHorizontalLine: () => false,\n\t\t})\n\t\t.split('\\n')\n\t\t.map(\n\t\t\t/**\n\t\t\t * @param {string} el\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\t(el) => el.replace(/(\\d+)\\s+(\\d+)/, (m, p1, p2) => chalk.dim(`${p1}:${p2}`)),\n\t\t)\n\t\t.join('\\n');\n\n\treturn output;\n}\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function (results) {\n\tlet output = invalidOptionsFormatter(results);\n\n\toutput += deprecationsFormatter(results);\n\n\t// TODO: Issue #4985\n\t// eslint-disable-next-line no-shadow\n\toutput = results.reduce((output, result) => {\n\t\t// Treat parseErrors as warnings\n\t\tif (result.parseErrors) {\n\t\t\tresult.parseErrors.forEach((error) =>\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\tline: error.line,\n\t\t\t\t\tcolumn: error.column,\n\t\t\t\t\trule: error.stylelintType,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${error.text} (${error.stylelintType})`,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\toutput += formatter(result.warnings, result.source || '');\n\n\t\treturn output;\n\t}, output);\n\n\t// Ensure consistent padding\n\toutput = output.trim();\n\n\tif (output !== '') {\n\t\toutput = `\\n${output}\\n\\n`;\n\t}\n\n\treturn output;\n};\n"]},"metadata":{},"sourceType":"script"}