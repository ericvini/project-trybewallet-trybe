{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst findMediaOperator = require('../findMediaOperator');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected single space before range operator',\n  rejectedBefore: () => 'Unexpected whitespace before range operator'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(/^media$/i, atRule => {\n      const fixOperatorIndices = [];\n      const fix = context.fix ? index => fixOperatorIndices.push(index) : null;\n      findMediaOperator(atRule, (match, params, node) => {\n        checkBeforeOperator(match, params, node, fix);\n      });\n\n      if (fixOperatorIndices.length) {\n        let params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n        fixOperatorIndices.sort((a, b) => b - a).forEach(index => {\n          const beforeOperator = params.slice(0, index);\n          const afterOperator = params.slice(index);\n\n          if (expectation === 'always') {\n            params = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n          } else if (expectation === 'never') {\n            params = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n          }\n        });\n\n        if (atRule.raws.params) {\n          atRule.raws.params.raw = params;\n        } else {\n          atRule.params = params;\n        }\n      }\n    });\n\n    function checkBeforeOperator(match, params, node, fix) {\n      // The extra `+ 1` is because the match itself contains\n      // the character before the operator\n      checker.before({\n        source: params,\n        index: match.startIndex,\n        err: m => {\n          if (fix) {\n            fix(match.startIndex);\n            return;\n          }\n\n          report({\n            message: m,\n            node,\n            index: match.startIndex - 1 + atRuleParamIndex(node),\n            result,\n            ruleName\n          });\n        }\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-feature-range-operator-space-before/index.js"],"names":["atRuleParamIndex","require","findMediaOperator","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","rejectedBefore","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","walkAtRules","atRule","fixOperatorIndices","fix","index","push","match","params","node","checkBeforeOperator","length","raws","raw","sort","a","b","forEach","beforeOperator","slice","afterOperator","replace","before","source","startIndex","err","m","message","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst findMediaOperator = require('../findMediaOperator');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-feature-range-operator-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before range operator',\n\trejectedBefore: () => 'Unexpected whitespace before range operator',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst fixOperatorIndices = [];\n\t\t\tconst fix = context.fix ? (index) => fixOperatorIndices.push(index) : null;\n\n\t\t\tfindMediaOperator(atRule, (match, params, node) => {\n\t\t\t\tcheckBeforeOperator(match, params, node, fix);\n\t\t\t});\n\n\t\t\tif (fixOperatorIndices.length) {\n\t\t\t\tlet params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\t\t\tfixOperatorIndices\n\t\t\t\t\t.sort((a, b) => b - a)\n\t\t\t\t\t.forEach((index) => {\n\t\t\t\t\t\tconst beforeOperator = params.slice(0, index);\n\t\t\t\t\t\tconst afterOperator = params.slice(index);\n\n\t\t\t\t\t\tif (expectation === 'always') {\n\t\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, ' ') + afterOperator;\n\t\t\t\t\t\t} else if (expectation === 'never') {\n\t\t\t\t\t\t\tparams = beforeOperator.replace(/\\s*$/, '') + afterOperator;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\tif (atRule.raws.params) {\n\t\t\t\t\tatRule.raws.params.raw = params;\n\t\t\t\t} else {\n\t\t\t\t\tatRule.params = params;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tfunction checkBeforeOperator(match, params, node, fix) {\n\t\t\t// The extra `+ 1` is because the match itself contains\n\t\t\t// the character before the operator\n\t\t\tchecker.before({\n\t\t\t\tsource: params,\n\t\t\t\tindex: match.startIndex,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (fix) {\n\t\t\t\t\t\tfix(match.startIndex);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex: match.startIndex - 1 + atRuleParamIndex(node),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}