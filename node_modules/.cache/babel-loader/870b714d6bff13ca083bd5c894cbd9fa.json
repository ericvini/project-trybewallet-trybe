{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\n\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\nconst messages = ruleMessages(ruleName, {\n  expected: () => 'Expected quotes',\n  rejected: () => 'Unexpected quotes'\n});\n\nfunction rule(expectation, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    }, {\n      actual: options,\n      possible: {\n        except: ['empty']\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(checkAtRuleParams);\n    root.walkDecls(checkDeclParams);\n\n    function checkDeclParams(decl) {\n      functionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n        checkArgs(args, decl, index, 'url');\n      });\n    }\n\n    function checkAtRuleParams(atRule) {\n      const atRuleParamsLowerCase = atRule.params.toLowerCase();\n      functionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n        checkArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n      });\n      functionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n        checkArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n      });\n      functionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n        checkArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n      });\n    }\n\n    function checkArgs(args, node, index, functionName) {\n      let shouldHasQuotes = expectation === 'always';\n      const leftTrimmedArgs = args.trimStart();\n\n      if (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n        return;\n      }\n\n      const complaintIndex = index + args.length - leftTrimmedArgs.length;\n      const hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n      const trimmedArg = args.trim();\n      const isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n      if (optionsMatches(options, 'except', 'empty') && isEmptyArgument) {\n        shouldHasQuotes = !shouldHasQuotes;\n      }\n\n      if (shouldHasQuotes) {\n        if (hasQuotes) {\n          return;\n        }\n\n        complain(messages.expected(functionName), node, complaintIndex);\n      } else {\n        if (!hasQuotes) {\n          return;\n        }\n\n        complain(messages.rejected(functionName), node, complaintIndex);\n      }\n    }\n\n    function complain(message, node, index) {\n      report({\n        message,\n        node,\n        index,\n        result,\n        ruleName\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/function-url-quotes/index.js"],"names":["atRuleParamIndex","require","functionArgumentsSearch","isStandardSyntaxUrl","optionsMatches","report","ruleMessages","validateOptions","ruleName","messages","expected","rejected","rule","expectation","options","root","result","validOptions","actual","possible","except","optional","walkAtRules","checkAtRuleParams","walkDecls","checkDeclParams","decl","toString","toLowerCase","args","index","checkArgs","atRule","atRuleParamsLowerCase","params","node","functionName","shouldHasQuotes","leftTrimmedArgs","trimStart","complaintIndex","length","hasQuotes","startsWith","trimmedArg","trim","isEmptyArgument","includes","complain","message","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxUrl = require('../../utils/isStandardSyntaxUrl');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'function-url-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: () => 'Expected quotes',\n\trejected: () => 'Unexpected quotes',\n});\n\nfunction rule(expectation, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: expectation,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: ['empty'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(checkAtRuleParams);\n\t\troot.walkDecls(checkDeclParams);\n\n\t\tfunction checkDeclParams(decl) {\n\t\t\tfunctionArgumentsSearch(decl.toString().toLowerCase(), 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, decl, index, 'url');\n\t\t\t});\n\t\t}\n\n\t\tfunction checkAtRuleParams(atRule) {\n\t\t\tconst atRuleParamsLowerCase = atRule.params.toLowerCase();\n\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'url-prefix', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'url-prefix');\n\t\t\t});\n\t\t\tfunctionArgumentsSearch(atRuleParamsLowerCase, 'domain', (args, index) => {\n\t\t\t\tcheckArgs(args, atRule, index + atRuleParamIndex(atRule), 'domain');\n\t\t\t});\n\t\t}\n\n\t\tfunction checkArgs(args, node, index, functionName) {\n\t\t\tlet shouldHasQuotes = expectation === 'always';\n\n\t\t\tconst leftTrimmedArgs = args.trimStart();\n\n\t\t\tif (!isStandardSyntaxUrl(leftTrimmedArgs)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst complaintIndex = index + args.length - leftTrimmedArgs.length;\n\t\t\tconst hasQuotes = leftTrimmedArgs.startsWith(\"'\") || leftTrimmedArgs.startsWith('\"');\n\n\t\t\tconst trimmedArg = args.trim();\n\t\t\tconst isEmptyArgument = ['', \"''\", '\"\"'].includes(trimmedArg);\n\n\t\t\tif (optionsMatches(options, 'except', 'empty') && isEmptyArgument) {\n\t\t\t\tshouldHasQuotes = !shouldHasQuotes;\n\t\t\t}\n\n\t\t\tif (shouldHasQuotes) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.expected(functionName), node, complaintIndex);\n\t\t\t} else {\n\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcomplain(messages.rejected(functionName), node, complaintIndex);\n\t\t\t}\n\t\t}\n\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}