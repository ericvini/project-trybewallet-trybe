{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\n\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\nconst messages = ruleMessages(ruleName, {\n  rejected: (unexpected, expected) => `Unexpected longhand value '${unexpected}' instead of '${expected}'`\n});\nconst propertiesWithShorthandNotation = new Set(['margin', 'padding', 'border-color', 'border-radius', 'border-style', 'border-width', 'grid-gap']);\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\nfunction hasIgnoredCharacters(value) {\n  return ignoredCharacters.some(char => value.includes(char));\n}\n\nfunction isShorthandProperty(property) {\n  return propertiesWithShorthandNotation.has(property);\n}\n\nfunction canCondense(top, right, bottom, left) {\n  const lowerTop = top.toLowerCase();\n  const lowerRight = right.toLowerCase();\n  const lowerBottom = bottom && bottom.toLowerCase();\n  const lowerLeft = left && left.toLowerCase();\n\n  if (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n    return [top];\n  }\n\n  if (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n    return [top, right];\n  }\n\n  if (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n    return [top, right, bottom];\n  }\n\n  return [top, right, bottom, left];\n}\n\nfunction canCondenseToOneValue(top, right, bottom, left) {\n  if (top !== right) {\n    return false;\n  }\n\n  return top === bottom && (bottom === left || !left) || !bottom && !left;\n}\n\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n  return top === bottom && right === left || top === bottom && !left && top !== right;\n}\n\nfunction canCondenseToThreeValues(top, right, bottom, left) {\n  return right === left;\n}\n\nfunction rule(actual, secondary, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      if (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n        return;\n      }\n\n      const prop = decl.prop;\n      const value = decl.value;\n      const normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n      if (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n        return;\n      }\n\n      const valuesToShorthand = [];\n      valueParser(value).walk(valueNode => {\n        if (valueNode.type !== 'word') {\n          return;\n        }\n\n        valuesToShorthand.push(valueParser.stringify(valueNode));\n      });\n\n      if (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n        return;\n      }\n\n      const shortestForm = canCondense(...valuesToShorthand); // TODO: Issue #4985\n      // eslint-disable-next-line no-shadow\n\n      const shortestFormString = shortestForm.filter(value => value).join(' ');\n      const valuesFormString = valuesToShorthand.join(' ');\n\n      if (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n        return;\n      }\n\n      if (context.fix) {\n        decl.value = decl.value.replace(value, shortestFormString);\n      } else {\n        report({\n          message: messages.rejected(value, shortestFormString),\n          node: decl,\n          result,\n          ruleName\n        });\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js"],"names":["isStandardSyntaxDeclaration","require","isStandardSyntaxProperty","report","ruleMessages","validateOptions","valueParser","vendor","ruleName","messages","rejected","unexpected","expected","propertiesWithShorthandNotation","Set","ignoredCharacters","hasIgnoredCharacters","value","some","char","includes","isShorthandProperty","property","has","canCondense","top","right","bottom","left","lowerTop","toLowerCase","lowerRight","lowerBottom","lowerLeft","canCondenseToOneValue","canCondenseToTwoValues","canCondenseToThreeValues","rule","actual","secondary","context","root","result","validOptions","walkDecls","decl","prop","normalizedProp","unprefixed","valuesToShorthand","walk","valueNode","type","push","stringify","length","shortestForm","shortestFormString","filter","join","valuesFormString","fix","replace","message","node","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'shorthand-property-no-redundant-values';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unexpected, expected) =>\n\t\t`Unexpected longhand value '${unexpected}' instead of '${expected}'`,\n});\n\nconst propertiesWithShorthandNotation = new Set([\n\t'margin',\n\t'padding',\n\t'border-color',\n\t'border-radius',\n\t'border-style',\n\t'border-width',\n\t'grid-gap',\n]);\n\nconst ignoredCharacters = ['+', '*', '/', '(', ')', '$', '@', '--', 'var('];\n\nfunction hasIgnoredCharacters(value) {\n\treturn ignoredCharacters.some((char) => value.includes(char));\n}\n\nfunction isShorthandProperty(property) {\n\treturn propertiesWithShorthandNotation.has(property);\n}\n\nfunction canCondense(top, right, bottom, left) {\n\tconst lowerTop = top.toLowerCase();\n\tconst lowerRight = right.toLowerCase();\n\tconst lowerBottom = bottom && bottom.toLowerCase();\n\tconst lowerLeft = left && left.toLowerCase();\n\n\tif (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top];\n\t}\n\n\tif (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right];\n\t}\n\n\tif (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {\n\t\treturn [top, right, bottom];\n\t}\n\n\treturn [top, right, bottom, left];\n}\n\nfunction canCondenseToOneValue(top, right, bottom, left) {\n\tif (top !== right) {\n\t\treturn false;\n\t}\n\n\treturn (top === bottom && (bottom === left || !left)) || (!bottom && !left);\n}\n\nfunction canCondenseToTwoValues(top, right, bottom, left) {\n\treturn (top === bottom && right === left) || (top === bottom && !left && top !== right);\n}\n\nfunction canCondenseToThreeValues(top, right, bottom, left) {\n\treturn right === left;\n}\n\nfunction rule(actual, secondary, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst normalizedProp = vendor.unprefixed(prop.toLowerCase());\n\n\t\t\tif (hasIgnoredCharacters(value) || !isShorthandProperty(normalizedProp)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst valuesToShorthand = [];\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvaluesToShorthand.push(valueParser.stringify(valueNode));\n\t\t\t});\n\n\t\t\tif (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst shortestForm = canCondense(...valuesToShorthand);\n\t\t\t// TODO: Issue #4985\n\t\t\t// eslint-disable-next-line no-shadow\n\t\t\tconst shortestFormString = shortestForm.filter((value) => value).join(' ');\n\t\t\tconst valuesFormString = valuesToShorthand.join(' ');\n\n\t\t\tif (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.value = decl.value.replace(value, shortestFormString);\n\t\t\t} else {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(value, shortestFormString),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}