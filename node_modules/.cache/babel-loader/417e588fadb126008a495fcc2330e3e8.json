{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\n\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'property-case';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['lower', 'upper']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      const prop = decl.prop;\n\n      if (!isStandardSyntaxProperty(prop)) {\n        return;\n      }\n\n      if (isCustomProperty(prop)) {\n        return;\n      }\n\n      const expectedProp = expectation === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n      if (prop === expectedProp) {\n        return;\n      }\n\n      if (context.fix) {\n        decl.prop = expectedProp;\n        return;\n      }\n\n      report({\n        message: messages.expected(prop, expectedProp),\n        node: decl,\n        ruleName,\n        result\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/property-case/index.js"],"names":["isCustomProperty","require","isStandardSyntaxProperty","report","ruleMessages","validateOptions","ruleName","messages","expected","actual","rule","expectation","options","context","root","result","validOptions","possible","walkDecls","decl","prop","expectedProp","toLowerCase","toUpperCase","fix","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,sCAAD,CAAxC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,eAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,MAAD,EAASD,QAAT,KAAuB,aAAYC,MAAO,YAAWD,QAAS;AADjC,CAAX,CAA7B;;AAIA,SAASE,IAAT,CAAcC,WAAd,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC5C,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAAST,QAAT,EAAmB;AACtDG,MAAAA,MAAM,EAAEE,WAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,OAAV;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACD,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACI,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;;AAEA,UAAI,CAAClB,wBAAwB,CAACkB,IAAD,CAA7B,EAAqC;AACpC;AACA;;AAED,UAAIpB,gBAAgB,CAACoB,IAAD,CAApB,EAA4B;AAC3B;AACA;;AAED,YAAMC,YAAY,GAAGV,WAAW,KAAK,OAAhB,GAA0BS,IAAI,CAACE,WAAL,EAA1B,GAA+CF,IAAI,CAACG,WAAL,EAApE;;AAEA,UAAIH,IAAI,KAAKC,YAAb,EAA2B;AAC1B;AACA;;AAED,UAAIR,OAAO,CAACW,GAAZ,EAAiB;AAChBL,QAAAA,IAAI,CAACC,IAAL,GAAYC,YAAZ;AAEA;AACA;;AAEDlB,MAAAA,MAAM,CAAC;AACNsB,QAAAA,OAAO,EAAElB,QAAQ,CAACC,QAAT,CAAkBY,IAAlB,EAAwBC,YAAxB,CADH;AAENK,QAAAA,IAAI,EAAEP,IAFA;AAGNb,QAAAA,QAHM;AAINS,QAAAA;AAJM,OAAD,CAAN;AAMA,KA7BD;AA8BA,GAxCD;AAyCA;;AAEDL,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAoB,MAAM,CAACC,OAAP,GAAiBlB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'property-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expectedProp = expectation === 'lower' ? prop.toLowerCase() : prop.toUpperCase();\n\n\t\t\tif (prop === expectedProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tdecl.prop = expectedProp;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(prop, expectedProp),\n\t\t\t\tnode: decl,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}