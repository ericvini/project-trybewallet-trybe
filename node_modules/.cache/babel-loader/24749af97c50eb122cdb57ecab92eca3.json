{"ast":null,"code":"'use strict';\n\nconst filterFilePaths = require('./utils/filterFilePaths');\n\nconst getFileIgnorer = require('./utils/getFileIgnorer');\n\nconst micromatch = require('micromatch');\n\nconst path = require('path');\n\nconst slash = require('slash');\n/**\n * To find out if a path is ignored, we need to load the config,\n * which may have an ignoreFiles property. We then check the path\n * against these.\n * @param {import('stylelint').StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @return {Promise<boolean>}\n */\n\n\nmodule.exports = function (stylelint, filePath) {\n  if (!filePath) {\n    return Promise.resolve(false);\n  }\n\n  const cwd = process.cwd();\n  const ignorer = getFileIgnorer(stylelint._options);\n  return stylelint.getConfigForFile(filePath).then(result => {\n    if (!result) {\n      return true;\n    } // Glob patterns for micromatch should be in POSIX-style\n\n\n    const ignoreFiles =\n    /** @type {Array<string>} */\n    (result.config.ignoreFiles || []).map(slash);\n    const absoluteFilePath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);\n\n    if (micromatch([absoluteFilePath], ignoreFiles).length) {\n      return true;\n    } // Check filePath with .stylelintignore file\n\n\n    if (filterFilePaths(ignorer, [path.relative(cwd, absoluteFilePath)]).length === 0) {\n      return true;\n    }\n\n    return false;\n  });\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/isPathIgnored.js"],"names":["filterFilePaths","require","getFileIgnorer","micromatch","path","slash","module","exports","stylelint","filePath","Promise","resolve","cwd","process","ignorer","_options","getConfigForFile","then","result","ignoreFiles","config","map","absoluteFilePath","isAbsolute","length","relative"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,yBAAD,CAA/B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqBC,QAArB,EAA+B;AAC/C,MAAI,CAACA,QAAL,EAAe;AACd,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACA;;AAED,QAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,EAAZ;AACA,QAAME,OAAO,GAAGZ,cAAc,CAACM,SAAS,CAACO,QAAX,CAA9B;AAEA,SAAOP,SAAS,CAACQ,gBAAV,CAA2BP,QAA3B,EAAqCQ,IAArC,CAA2CC,MAAD,IAAY;AAC5D,QAAI,CAACA,MAAL,EAAa;AACZ,aAAO,IAAP;AACA,KAH2D,CAK5D;;;AACA,UAAMC,WAAW;AAAG;AAA6B,KAACD,MAAM,CAACE,MAAP,CAAcD,WAAd,IAA6B,EAA9B,EAAkCE,GAAlC,CAAsChB,KAAtC,CAAjD;AAEA,UAAMiB,gBAAgB,GAAGlB,IAAI,CAACmB,UAAL,CAAgBd,QAAhB,IACtBA,QADsB,GAEtBL,IAAI,CAACO,OAAL,CAAaE,OAAO,CAACD,GAAR,EAAb,EAA4BH,QAA5B,CAFH;;AAIA,QAAIN,UAAU,CAAC,CAACmB,gBAAD,CAAD,EAAqBH,WAArB,CAAV,CAA4CK,MAAhD,EAAwD;AACvD,aAAO,IAAP;AACA,KAd2D,CAgB5D;;;AACA,QAAIxB,eAAe,CAACc,OAAD,EAAU,CAACV,IAAI,CAACqB,QAAL,CAAcb,GAAd,EAAmBU,gBAAnB,CAAD,CAAV,CAAf,CAAiEE,MAAjE,KAA4E,CAAhF,EAAmF;AAClF,aAAO,IAAP;AACA;;AAED,WAAO,KAAP;AACA,GAtBM,CAAP;AAuBA,CA/BD","sourcesContent":["'use strict';\n\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst micromatch = require('micromatch');\nconst path = require('path');\nconst slash = require('slash');\n\n/**\n * To find out if a path is ignored, we need to load the config,\n * which may have an ignoreFiles property. We then check the path\n * against these.\n * @param {import('stylelint').StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @return {Promise<boolean>}\n */\nmodule.exports = function (stylelint, filePath) {\n\tif (!filePath) {\n\t\treturn Promise.resolve(false);\n\t}\n\n\tconst cwd = process.cwd();\n\tconst ignorer = getFileIgnorer(stylelint._options);\n\n\treturn stylelint.getConfigForFile(filePath).then((result) => {\n\t\tif (!result) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\tconst ignoreFiles = /** @type {Array<string>} */ (result.config.ignoreFiles || []).map(slash);\n\n\t\tconst absoluteFilePath = path.isAbsolute(filePath)\n\t\t\t? filePath\n\t\t\t: path.resolve(process.cwd(), filePath);\n\n\t\tif (micromatch([absoluteFilePath], ignoreFiles).length) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check filePath with .stylelintignore file\n\t\tif (filterFilePaths(ignorer, [path.relative(cwd, absoluteFilePath)]).length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}