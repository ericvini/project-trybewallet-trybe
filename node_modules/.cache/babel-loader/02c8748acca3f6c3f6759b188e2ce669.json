{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'at-rule-no-unknown';\nconst messages = ruleMessages(ruleName, {\n  rejected: atRule => `Unexpected unknown at-rule \"${atRule}\"`\n});\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignoreAtRules: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(atRule => {\n      if (!isStandardSyntaxAtRule(atRule)) {\n        return;\n      }\n\n      const name = atRule.name; // Return early if at-rule is to be ignored\n\n      if (optionsMatches(options, 'ignoreAtRules', atRule.name)) {\n        return;\n      }\n\n      if (vendor.prefix(name) || keywordSets.atRules.has(name.toLowerCase())) {\n        return;\n      }\n\n      report({\n        message: messages.rejected(`@${name}`),\n        node: atRule,\n        ruleName,\n        result\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-no-unknown/index.js"],"names":["_","require","isStandardSyntaxAtRule","keywordSets","optionsMatches","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","atRule","rule","actual","options","root","result","validOptions","possible","ignoreAtRules","isString","isRegExp","optional","walkAtRules","name","prefix","atRules","has","toLowerCase","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,oCAAD,CAAtC;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,6BAAD,CAA3B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMQ,QAAQ,GAAG,oBAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,MAAD,IAAa,+BAA8BA,MAAO;AADrB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B;AAC9B,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CACnCU,MADmC,EAEnCR,QAFmC,EAGnC;AAAEK,MAAAA;AAAF,KAHmC,EAInC;AACCA,MAAAA,MAAM,EAAEC,OADT;AAECI,MAAAA,QAAQ,EAAE;AACTC,QAAAA,aAAa,EAAE,CAACpB,CAAC,CAACqB,QAAH,EAAarB,CAAC,CAACsB,QAAf;AADN,OAFX;AAKCC,MAAAA,QAAQ,EAAE;AALX,KAJmC,CAApC;;AAaA,QAAI,CAACL,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACQ,WAAL,CAAkBZ,MAAD,IAAY;AAC5B,UAAI,CAACV,sBAAsB,CAACU,MAAD,CAA3B,EAAqC;AACpC;AACA;;AAED,YAAMa,IAAI,GAAGb,MAAM,CAACa,IAApB,CAL4B,CAO5B;;AACA,UAAIrB,cAAc,CAACW,OAAD,EAAU,eAAV,EAA2BH,MAAM,CAACa,IAAlC,CAAlB,EAA2D;AAC1D;AACA;;AAED,UAAIjB,MAAM,CAACkB,MAAP,CAAcD,IAAd,KAAuBtB,WAAW,CAACwB,OAAZ,CAAoBC,GAApB,CAAwBH,IAAI,CAACI,WAAL,EAAxB,CAA3B,EAAwE;AACvE;AACA;;AAEDxB,MAAAA,MAAM,CAAC;AACNyB,QAAAA,OAAO,EAAEpB,QAAQ,CAACC,QAAT,CAAmB,IAAGc,IAAK,EAA3B,CADH;AAENM,QAAAA,IAAI,EAAEnB,MAFA;AAGNH,QAAAA,QAHM;AAINQ,QAAAA;AAJM,OAAD,CAAN;AAMA,KAtBD;AAuBA,GAzCD;AA0CA;;AAEDJ,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAsB,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'at-rule-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atRule) => `Unexpected unknown at-rule \"${atRule}\"`,\n});\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreAtRules: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst name = atRule.name;\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(options, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (vendor.prefix(name) || keywordSets.atRules.has(name.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(`@${name}`),\n\t\t\t\tnode: atRule,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}