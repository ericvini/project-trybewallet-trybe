{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\n\nconst blockString = require('../../utils/blockString');\n\nconst hasBlock = require('../../utils/hasBlock');\n\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected newline before \"{\"',\n  expectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n  rejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n  expectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n  rejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('newline', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'always-single-line', 'never-single-line', 'always-multi-line', 'never-multi-line']\n    });\n\n    if (!validOptions) {\n      return;\n    } // Check both kinds of statement: rules and at-rules\n\n\n    root.walkRules(check);\n    root.walkAtRules(check);\n\n    function check(statement) {\n      // Return early if blockless or has an empty block\n      if (!hasBlock(statement) || hasEmptyBlock(statement)) {\n        return;\n      }\n\n      const source = beforeBlockString(statement);\n      const beforeBraceNoRaw = beforeBlockString(statement, {\n        noRawBefore: true\n      });\n      let index = beforeBraceNoRaw.length - 1;\n\n      if (beforeBraceNoRaw[index - 1] === '\\r') {\n        index -= 1;\n      }\n\n      checker.beforeAllowingIndentation({\n        lineCheckStr: blockString(statement),\n        source,\n        index: source.length,\n        err: m => {\n          if (context.fix) {\n            if (expectation.startsWith('always')) {\n              const spaceIndex = statement.raws.between.search(/\\s+$/);\n\n              if (spaceIndex >= 0) {\n                statement.raws.between = statement.raws.between.slice(0, spaceIndex) + context.newline + statement.raws.between.slice(spaceIndex);\n              } else {\n                statement.raws.between += context.newline;\n              }\n\n              return;\n            }\n\n            if (expectation.startsWith('never')) {\n              statement.raws.between = statement.raws.between.replace(/\\s*$/, '');\n              return;\n            }\n          }\n\n          report({\n            message: m,\n            node: statement,\n            index,\n            result,\n            ruleName\n          });\n        }\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/block-opening-brace-newline-before/index.js"],"names":["beforeBlockString","require","blockString","hasBlock","hasEmptyBlock","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","walkRules","check","walkAtRules","statement","source","beforeBraceNoRaw","noRawBefore","index","length","beforeAllowingIndentation","lineCheckStr","err","m","fix","startsWith","spaceIndex","raws","between","search","slice","newline","replace","message","node","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \"{\"',\n\texpectedBeforeSingleLine: () => 'Expected newline before \"{\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"{\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected newline before \"{\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"{\" of a multi-line block',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('newline', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = beforeBlockString(statement);\n\t\t\tconst beforeBraceNoRaw = beforeBlockString(statement, {\n\t\t\t\tnoRawBefore: true,\n\t\t\t});\n\n\t\t\tlet index = beforeBraceNoRaw.length - 1;\n\n\t\t\tif (beforeBraceNoRaw[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tlineCheckStr: blockString(statement),\n\t\t\t\tsource,\n\t\t\t\tindex: source.length,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (expectation.startsWith('always')) {\n\t\t\t\t\t\t\tconst spaceIndex = statement.raws.between.search(/\\s+$/);\n\n\t\t\t\t\t\t\tif (spaceIndex >= 0) {\n\t\t\t\t\t\t\t\tstatement.raws.between =\n\t\t\t\t\t\t\t\t\tstatement.raws.between.slice(0, spaceIndex) +\n\t\t\t\t\t\t\t\t\tcontext.newline +\n\t\t\t\t\t\t\t\t\tstatement.raws.between.slice(spaceIndex);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatement.raws.between += context.newline;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.between = statement.raws.between.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}