{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst transformSelector = require('../../utils/transformSelector');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['lower', 'upper']\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      const selector = rule.selector;\n\n      if (!selector.includes(':')) {\n        return;\n      }\n\n      transformSelector(result, rule, selectorTree => {\n        selectorTree.walkPseudos(pseudoNode => {\n          const pseudoElement = pseudoNode.value;\n\n          if (!isStandardSyntaxSelector(pseudoElement)) {\n            return;\n          }\n\n          if (!pseudoElement.includes('::') && !keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))) {\n            return;\n          }\n\n          const expectedPseudoElement = expectation === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n          if (pseudoElement === expectedPseudoElement) {\n            return;\n          }\n\n          if (context.fix) {\n            pseudoNode.value = expectedPseudoElement;\n            return;\n          }\n\n          report({\n            message: messages.expected(pseudoElement, expectedPseudoElement),\n            node: rule,\n            index: pseudoNode.sourceIndex,\n            ruleName,\n            result\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-pseudo-element-case/index.js"],"names":["isStandardSyntaxRule","require","isStandardSyntaxSelector","keywordSets","report","ruleMessages","transformSelector","validateOptions","ruleName","messages","expected","actual","rule","expectation","options","context","root","result","validOptions","possible","walkRules","selector","includes","selectorTree","walkPseudos","pseudoNode","pseudoElement","value","levelOneAndTwoPseudoElements","has","toLowerCase","slice","expectedPseudoElement","toUpperCase","fix","message","node","index","sourceIndex","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst transformSelector = require('../../utils/transformSelector');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-element-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = rule.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransformSelector(result, rule, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst pseudoElement = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(pseudoElement)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!pseudoElement.includes('::') &&\n\t\t\t\t\t\t!keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst expectedPseudoElement =\n\t\t\t\t\t\texpectation === 'lower' ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase();\n\n\t\t\t\t\tif (pseudoElement === expectedPseudoElement) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tpseudoNode.value = expectedPseudoElement;\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(pseudoElement, expectedPseudoElement),\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}