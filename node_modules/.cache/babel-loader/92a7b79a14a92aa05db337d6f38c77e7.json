{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst blockString = require('../../utils/blockString');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected newline before \";\"',\n  expectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n  rejectedBeforeMultiLine: () => 'Unexpected whitespace before \";\" in a multi-line declaration block'\n});\n\nfunction rule(expectation) {\n  const checker = whitespaceChecker('newline', expectation, messages);\n  return function (root, result) {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'always-multi-line', 'never-multi-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      const parentRule = decl.parent;\n\n      if (!parentRule.raws.semicolon && parentRule.last === decl) {\n        return;\n      }\n\n      const declString = decl.toString();\n      checker.beforeAllowingIndentation({\n        source: declString,\n        index: declString.length,\n        lineCheckStr: blockString(parentRule),\n        err: m => {\n          report({\n            message: m,\n            node: decl,\n            index: decl.toString().length - 1,\n            result,\n            ruleName\n          });\n        }\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js"],"names":["blockString","require","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","expectedBeforeMultiLine","rejectedBeforeMultiLine","rule","expectation","checker","root","result","validOptions","actual","possible","walkDecls","decl","parentRule","parent","raws","semicolon","last","declString","toString","beforeAllowingIndentation","source","index","length","lineCheckStr","err","m","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMK,QAAQ,GAAG,4CAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,cAAc,EAAE,MAAM,6BADiB;AAEvCC,EAAAA,uBAAuB,EAAE,MAAM,+DAFQ;AAGvCC,EAAAA,uBAAuB,EAAE,MACxB;AAJsC,CAAX,CAA7B;;AAOA,SAASC,IAAT,CAAcC,WAAd,EAA2B;AAC1B,QAAMC,OAAO,GAAGR,iBAAiB,CAAC,SAAD,EAAYO,WAAZ,EAAyBL,QAAzB,CAAjC;AAEA,SAAO,UAAUO,IAAV,EAAgBC,MAAhB,EAAwB;AAC9B,UAAMC,YAAY,GAAGZ,eAAe,CAACW,MAAD,EAAST,QAAT,EAAmB;AACtDW,MAAAA,MAAM,EAAEL,WAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,mBAAX,EAAgC,kBAAhC;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACK,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,UAAU,GAAGD,IAAI,CAACE,MAAxB;;AAEA,UAAI,CAACD,UAAU,CAACE,IAAX,CAAgBC,SAAjB,IAA8BH,UAAU,CAACI,IAAX,KAAoBL,IAAtD,EAA4D;AAC3D;AACA;;AAED,YAAMM,UAAU,GAAGN,IAAI,CAACO,QAAL,EAAnB;AAEAd,MAAAA,OAAO,CAACe,yBAAR,CAAkC;AACjCC,QAAAA,MAAM,EAAEH,UADyB;AAEjCI,QAAAA,KAAK,EAAEJ,UAAU,CAACK,MAFe;AAGjCC,QAAAA,YAAY,EAAEhC,WAAW,CAACqB,UAAD,CAHQ;AAIjCY,QAAAA,GAAG,EAAGC,CAAD,IAAO;AACXhC,UAAAA,MAAM,CAAC;AACNiC,YAAAA,OAAO,EAAED,CADH;AAENE,YAAAA,IAAI,EAAEhB,IAFA;AAGNU,YAAAA,KAAK,EAAEV,IAAI,CAACO,QAAL,GAAgBI,MAAhB,GAAyB,CAH1B;AAINhB,YAAAA,MAJM;AAKNT,YAAAA;AALM,WAAD,CAAN;AAOA;AAZgC,OAAlC;AAcA,KAvBD;AAwBA,GAlCD;AAmCA;;AAEDK,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACA8B,MAAM,CAACC,OAAP,GAAiB3B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-block-semicolon-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \";\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \";\" in a multi-line declaration block',\n\trejectedBeforeMultiLine: () =>\n\t\t'Unexpected whitespace before \";\" in a multi-line declaration block',\n});\n\nfunction rule(expectation) {\n\tconst checker = whitespaceChecker('newline', expectation, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.beforeAllowingIndentation({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}