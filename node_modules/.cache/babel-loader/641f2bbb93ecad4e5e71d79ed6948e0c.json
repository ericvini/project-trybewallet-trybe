{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\n\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\n\n\nfunction nodesShareLines(a, b) {\n  return _.get(a, 'source.end.line') === _.get(b, 'source.start.line');\n}\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\n\n\nmodule.exports = function isSharedLineComment(node) {\n  if (node.type !== 'comment') {\n    return false;\n  }\n\n  const previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n  if (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n    return true;\n  }\n\n  const nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n  if (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n    return true;\n  }\n\n  const parentNode = node.parent; // It's a first child and located on the same line as block start\n\n  if (parentNode !== undefined && parentNode.type !== 'root' && parentNode.index(node) === 0 && node.raws.before !== undefined && !node.raws.before.includes('\\n')) {\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/isSharedLineComment.js"],"names":["_","require","getNextNonSharedLineCommentNode","getPreviousNonSharedLineCommentNode","nodesShareLines","a","b","get","module","exports","isSharedLineComment","node","type","previousNonSharedLineCommentNode","nextNonSharedLineCommentNode","parentNode","parent","undefined","index","raws","before","includes"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,+BAA+B,GAAGD,OAAO,CAAC,mCAAD,CAA/C;;AACA,MAAME,mCAAmC,GAAGF,OAAO,CAAC,uCAAD,CAAnD;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASG,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC9B,SAAON,CAAC,CAACO,GAAF,CAAMF,CAAN,EAAS,iBAAT,MAAgCL,CAAC,CAACO,GAAF,CAAMD,CAAN,EAAS,mBAAT,CAAvC;AACA;AAED;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACnD,MAAIA,IAAI,CAACC,IAAL,KAAc,SAAlB,EAA6B;AAC5B,WAAO,KAAP;AACA;;AAED,QAAMC,gCAAgC,GAAGV,mCAAmC,CAACQ,IAAD,CAA5E;;AAEA,MAAIP,eAAe,CAACS,gCAAD,EAAmCF,IAAnC,CAAnB,EAA6D;AAC5D,WAAO,IAAP;AACA;;AAED,QAAMG,4BAA4B,GAAGZ,+BAA+B,CAACS,IAAD,CAApE;;AAEA,MAAIG,4BAA4B,IAAIV,eAAe,CAACO,IAAD,EAAOG,4BAAP,CAAnD,EAAyF;AACxF,WAAO,IAAP;AACA;;AAED,QAAMC,UAAU,GAAGJ,IAAI,CAACK,MAAxB,CAjBmD,CAmBnD;;AACA,MACCD,UAAU,KAAKE,SAAf,IACAF,UAAU,CAACH,IAAX,KAAoB,MADpB,IAEAG,UAAU,CAACG,KAAX,CAAiBP,IAAjB,MAA2B,CAF3B,IAGAA,IAAI,CAACQ,IAAL,CAAUC,MAAV,KAAqBH,SAHrB,IAIA,CAACN,IAAI,CAACQ,IAAL,CAAUC,MAAV,CAAiBC,QAAjB,CAA0B,IAA1B,CALF,EAME;AACD,WAAO,IAAP;AACA;;AAED,SAAO,KAAP;AACA,CA/BD","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst getNextNonSharedLineCommentNode = require('./getNextNonSharedLineCommentNode');\nconst getPreviousNonSharedLineCommentNode = require('./getPreviousNonSharedLineCommentNode');\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n *\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\treturn _.get(a, 'source.end.line') === _.get(b, 'source.start.line');\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nmodule.exports = function isSharedLineComment(node) {\n\tif (node.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\tparentNode.type !== 'root' &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n"]},"metadata":{},"sourceType":"script"}