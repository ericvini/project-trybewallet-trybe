{"ast":null,"code":"'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\n\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\n\nfunction extractSuggestions(ruleName) {\n  const suggestions = new Array(MAX_LEVENSHTEIN_DISTANCE);\n\n  for (let i = 0; i < suggestions.length; i++) {\n    suggestions[i] = [];\n  }\n\n  Object.keys(rules).forEach(existRuleName => {\n    const distance = levenshtein.distance(existRuleName, ruleName);\n\n    if (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n      suggestions[distance - 1].push(existRuleName);\n    }\n  });\n  /** @type {string[]} */\n\n  let result = [];\n\n  for (let i = 0; i < suggestions.length; i++) {\n    if (suggestions[i].length > 0) {\n      if (i < 3) {\n        return suggestions[i].slice(0, MAX_SUGGESTIONS_COUNT);\n      }\n\n      result = result.concat(suggestions[i]);\n    }\n  }\n\n  return result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\n\n\nfunction rejectMessage(ruleName, suggestions = []) {\n  return `Unknown rule ${ruleName}.${suggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''}`;\n}\n/** @type {Map<string, string[]>} */\n\n\nconst cache = new Map();\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\n\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n  const suggestions = cache.has(unknownRuleName) ?\n  /** @type {string[]} */\n  cache.get(unknownRuleName) : extractSuggestions(unknownRuleName);\n  const warningProperties = {\n    severity: 'error',\n    rule: unknownRuleName,\n    node: postcssRoot,\n    index: 0\n  };\n  cache.set(unknownRuleName, suggestions);\n  postcssResult.warn(rejectMessage(unknownRuleName, suggestions), warningProperties);\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/reportUnknownRuleNames.js"],"names":["levenshtein","require","rules","MAX_LEVENSHTEIN_DISTANCE","MAX_SUGGESTIONS_COUNT","extractSuggestions","ruleName","suggestions","Array","i","length","Object","keys","forEach","existRuleName","distance","push","result","slice","concat","rejectMessage","join","cache","Map","module","exports","reportUnknownRuleNames","unknownRuleName","postcssRoot","postcssResult","has","get","warningProperties","severity","rule","node","index","set","warn"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,wBAAwB,GAAG,CAAjC;AACA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACrC,QAAMC,WAAW,GAAG,IAAIC,KAAJ,CAAUL,wBAAV,CAApB;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC5CF,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiB,EAAjB;AACA;;AAEDE,EAAAA,MAAM,CAACC,IAAP,CAAYV,KAAZ,EAAmBW,OAAnB,CAA4BC,aAAD,IAAmB;AAC7C,UAAMC,QAAQ,GAAGf,WAAW,CAACe,QAAZ,CAAqBD,aAArB,EAAoCR,QAApC,CAAjB;;AAEA,QAAIS,QAAQ,IAAIZ,wBAAhB,EAA0C;AACzCI,MAAAA,WAAW,CAACQ,QAAQ,GAAG,CAAZ,CAAX,CAA0BC,IAA1B,CAA+BF,aAA/B;AACA;AACD,GAND;AAQA;;AACA,MAAIG,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC5C,QAAIF,WAAW,CAACE,CAAD,CAAX,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC9B,UAAID,CAAC,GAAG,CAAR,EAAW;AACV,eAAOF,WAAW,CAACE,CAAD,CAAX,CAAeS,KAAf,CAAqB,CAArB,EAAwBd,qBAAxB,CAAP;AACA;;AAEDa,MAAAA,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAcZ,WAAW,CAACE,CAAD,CAAzB,CAAT;AACA;AACD;;AAED,SAAOQ,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBd,qBAAhB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASgB,aAAT,CAAuBd,QAAvB,EAAiCC,WAAW,GAAG,EAA/C,EAAmD;AAClD,SAAQ,gBAAeD,QAAS,IAC/BC,WAAW,CAACG,MAAZ,GAAqB,CAArB,GAA0B,iBAAgBH,WAAW,CAACc,IAAZ,CAAiB,IAAjB,CAAuB,GAAjE,GAAsE,EACtE,EAFD;AAGA;AAED;;;AACA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CAAgCC,eAAhC,EAAiDC,WAAjD,EAA8DC,aAA9D,EAA6E;AAC7F,QAAMtB,WAAW,GAAGe,KAAK,CAACQ,GAAN,CAAUH,eAAV;AACjB;AAAyBL,EAAAA,KAAK,CAACS,GAAN,CAAUJ,eAAV,CADR,GAEjBtB,kBAAkB,CAACsB,eAAD,CAFrB;AAGA,QAAMK,iBAAiB,GAAG;AACzBC,IAAAA,QAAQ,EAAE,OADe;AAEzBC,IAAAA,IAAI,EAAEP,eAFmB;AAGzBQ,IAAAA,IAAI,EAAEP,WAHmB;AAIzBQ,IAAAA,KAAK,EAAE;AAJkB,GAA1B;AAOAd,EAAAA,KAAK,CAACe,GAAN,CAAUV,eAAV,EAA2BpB,WAA3B;AACAsB,EAAAA,aAAa,CAACS,IAAd,CAAmBlB,aAAa,CAACO,eAAD,EAAkBpB,WAAlB,CAAhC,EAAgEyB,iBAAhE;AACA,CAbD","sourcesContent":["'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = new Array(MAX_LEVENSHTEIN_DISTANCE);\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tObject.keys(rules).forEach((existRuleName) => {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t});\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tif (suggestions[i].length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestions[i].slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestions[i]);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\tconst warningProperties = {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t};\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), warningProperties);\n};\n"]},"metadata":{},"sourceType":"script"}