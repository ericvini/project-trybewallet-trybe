{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-whitelist';\nconst messages = ruleMessages(ruleName, {\n  rejected: unit => `Unexpected unit \"${unit}\"`\n});\n\nfunction rule(listInput, options) {\n  const list = [].concat(listInput);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString]\n    }, {\n      optional: true,\n      actual: options,\n      possible: {\n        ignoreProperties: validateObjectWithArrayProps([_.isString, _.isRegExp])\n      }\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'unit-allowed-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n\n    function check(node, value, getIndex) {\n      // make sure multiplication operations (*) are divided - not handled\n      // by postcss-value-parser\n      value = value.replace(/\\*/g, ',');\n      valueParser(value).walk(valueNode => {\n        // Ignore wrong units within `url` function\n        if (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n          return false;\n        }\n\n        const unit = getUnitFromValueNode(valueNode);\n\n        if (!unit || unit && list.includes(unit.toLowerCase())) {\n          return;\n        }\n\n        if (options && optionsMatches(options.ignoreProperties, unit.toLowerCase(), node.prop)) {\n          return;\n        }\n\n        report({\n          index: getIndex(node) + valueNode.sourceIndex,\n          message: messages.rejected(unit),\n          node,\n          result,\n          ruleName\n        });\n      });\n    }\n\n    root.walkAtRules(/^media$/i, atRule => check(atRule, atRule.params, atRuleParamIndex));\n    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex));\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/unit-whitelist/index.js"],"names":["_","require","atRuleParamIndex","declarationValueIndex","getUnitFromValueNode","optionsMatches","report","ruleMessages","validateObjectWithArrayProps","validateOptions","valueParser","ruleName","messages","rejected","unit","rule","listInput","options","list","concat","root","result","validOptions","actual","possible","isString","optional","ignoreProperties","isRegExp","warn","stylelintType","stylelintReference","check","node","value","getIndex","replace","walk","valueNode","type","toLowerCase","includes","prop","index","sourceIndex","message","walkAtRules","atRule","params","walkDecls","decl","primaryOptionArray","meta","deprecated","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-whitelist';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\nfunction rule(listInput, options) {\n\tconst list = [].concat(listInput);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: list,\n\t\t\t\tpossible: [_.isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: validateObjectWithArrayProps([_.isString, _.isRegExp]),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(`'${ruleName}' has been deprecated. Instead use 'unit-allowed-list'.`, {\n\t\t\tstylelintType: 'deprecation',\n\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t});\n\n\t\tfunction check(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t\tif (!unit || (unit && list.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (options && optionsMatches(options.ignoreProperties, unit.toLowerCase(), node.prop)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: getIndex(node) + valueNode.sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\t\tnode,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => check(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}