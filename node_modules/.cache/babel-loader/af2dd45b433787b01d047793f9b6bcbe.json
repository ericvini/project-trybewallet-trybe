{"ast":null,"code":"'use strict';\n\nconst isScssVariable = require('./isScssVariable');\n\nconst {\n  isRoot\n} = require('./typeGuards');\n/**\n * @param {string} [lang]\n */\n\n\nfunction isStandardSyntaxLang(lang) {\n  return lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\n\n\nmodule.exports = function (decl) {\n  const prop = decl.prop;\n  const parent = decl.parent; // Declarations belong in a declaration block or standard CSS source\n\n  if (isRoot(parent) && parent.source && !isStandardSyntaxLang(\n  /** @type {import('postcss').NodeSource & {lang?: string}} */\n  parent.source.lang)) {\n    return false;\n  } // SCSS var\n\n\n  if (isScssVariable(prop)) {\n    return false;\n  } // Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\n\n  if (prop[0] === '@' && prop[1] !== '{') {\n    return false;\n  } // Sass nested properties (e.g. border: { style: solid; color: red; })\n\n\n  if ( // @ts-ignore TODO TYPES selector does not exists\n  parent.selector && // @ts-ignore\n  parent.selector[parent.selector.length - 1] === ':' && // @ts-ignore\n  parent.selector.substring(0, 2) !== '--') {\n    return false;\n  } // Less &:extend\n\n\n  if ('extend' in decl && decl.extend) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.js"],"names":["isScssVariable","require","isRoot","isStandardSyntaxLang","lang","module","exports","decl","prop","parent","source","selector","length","substring","extend"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,cAAD,CAA1B;AAEA;AACA;AACA;;;AACA,SAASE,oBAAT,CAA8BC,IAA9B,EAAoC;AACnC,SAAOA,IAAI,KAAKA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,iBAA3B,IAAgDA,IAAI,KAAK,kBAA9D,CAAX;AACA;AAED;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAChC,QAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,QAAMC,MAAM,GAAGF,IAAI,CAACE,MAApB,CAFgC,CAIhC;;AACA,MACCP,MAAM,CAACO,MAAD,CAAN,IACAA,MAAM,CAACC,MADP,IAEA,CAACP,oBAAoB;AACpB;AAA+DM,EAAAA,MAAM,CAACC,MAAR,CAAgBN,IAD1D,CAHtB,EAME;AACD,WAAO,KAAP;AACA,GAb+B,CAehC;;;AACA,MAAIJ,cAAc,CAACQ,IAAD,CAAlB,EAA0B;AACzB,WAAO,KAAP;AACA,GAlB+B,CAoBhC;;;AACA,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAnC,EAAwC;AACvC,WAAO,KAAP;AACA,GAvB+B,CAyBhC;;;AACA,OACC;AACAC,EAAAA,MAAM,CAACE,QAAP,IACA;AACAF,EAAAA,MAAM,CAACE,QAAP,CAAgBF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,GAAyB,CAAzC,MAAgD,GAFhD,IAGA;AACAH,EAAAA,MAAM,CAACE,QAAP,CAAgBE,SAAhB,CAA0B,CAA1B,EAA6B,CAA7B,MAAoC,IANrC,EAOE;AACD,WAAO,KAAP;AACA,GAnC+B,CAqChC;;;AACA,MAAI,YAAYN,IAAZ,IAAoBA,IAAI,CAACO,MAA7B,EAAqC;AACpC,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA,CA3CD","sourcesContent":["'use strict';\n\nconst isScssVariable = require('./isScssVariable');\nconst { isRoot } = require('./typeGuards');\n\n/**\n * @param {string} [lang]\n */\nfunction isStandardSyntaxLang(lang) {\n\treturn lang && (lang === 'css' || lang === 'custom-template' || lang === 'template-literal');\n}\n\n/**\n * Check whether a declaration is standard\n *\n * @param {import('postcss').Declaration | import('postcss-less').Declaration} decl\n */\nmodule.exports = function (decl) {\n\tconst prop = decl.prop;\n\tconst parent = decl.parent;\n\n\t// Declarations belong in a declaration block or standard CSS source\n\tif (\n\t\tisRoot(parent) &&\n\t\tparent.source &&\n\t\t!isStandardSyntaxLang(\n\t\t\t/** @type {import('postcss').NodeSource & {lang?: string}} */ (parent.source).lang,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// SCSS var\n\tif (isScssVariable(prop)) {\n\t\treturn false;\n\t}\n\n\t// Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})\n\tif (prop[0] === '@' && prop[1] !== '{') {\n\t\treturn false;\n\t}\n\n\t// Sass nested properties (e.g. border: { style: solid; color: red; })\n\tif (\n\t\t// @ts-ignore TODO TYPES selector does not exists\n\t\tparent.selector &&\n\t\t// @ts-ignore\n\t\tparent.selector[parent.selector.length - 1] === ':' &&\n\t\t// @ts-ignore\n\t\tparent.selector.substring(0, 2) !== '--'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Less &:extend\n\tif ('extend' in decl && decl.extend) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"]},"metadata":{},"sourceType":"script"}