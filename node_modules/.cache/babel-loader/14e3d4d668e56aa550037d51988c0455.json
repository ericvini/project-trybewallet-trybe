{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\n\nconst blockString = require('../../utils/blockString');\n\nconst isSingleLineString = require('../../utils/isSingleLineString');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\nconst messages = ruleMessages(ruleName, {\n  expected: max => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`\n});\n\nfunction rule(quantity) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: quantity,\n      possible: [_.isNumber]\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isSingleLineString(blockString(rule))) {\n        return;\n      }\n\n      if (!rule.nodes) {\n        return;\n      }\n\n      const decls = rule.nodes.filter(node => node.type === 'decl');\n\n      if (decls.length <= quantity) {\n        return;\n      }\n\n      report({\n        message: messages.expected(quantity),\n        node: rule,\n        index: beforeBlockString(rule, {\n          noRawBefore: true\n        }).length,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js"],"names":["_","require","beforeBlockString","blockString","isSingleLineString","report","ruleMessages","validateOptions","ruleName","messages","expected","max","rule","quantity","root","result","validOptions","actual","possible","isNumber","walkRules","nodes","decls","filter","node","type","length","message","index","noRawBefore","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMO,QAAQ,GAAG,gDAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,GAAD,IAAU,yBAAwBA,GAAI,IAAGA,GAAG,KAAK,CAAR,GAAY,aAAZ,GAA4B,cAAe;AADvD,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,QAAd,EAAwB;AACvB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGT,eAAe,CAACQ,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEJ,QAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAAClB,CAAC,CAACmB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA,KARuB,CAUxB;AACA;;;AACAF,IAAAA,IAAI,CAACM,SAAL,CAAgBR,IAAD,IAAU;AACxB,UAAI,CAACR,kBAAkB,CAACD,WAAW,CAACS,IAAD,CAAZ,CAAvB,EAA4C;AAC3C;AACA;;AAED,UAAI,CAACA,IAAI,CAACS,KAAV,EAAiB;AAChB;AACA;;AAED,YAAMC,KAAK,GAAGV,IAAI,CAACS,KAAL,CAAWE,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAc,MAA1C,CAAd;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBb,QAApB,EAA8B;AAC7B;AACA;;AAEDR,MAAAA,MAAM,CAAC;AACNsB,QAAAA,OAAO,EAAElB,QAAQ,CAACC,QAAT,CAAkBG,QAAlB,CADH;AAENW,QAAAA,IAAI,EAAEZ,IAFA;AAGNgB,QAAAA,KAAK,EAAE1B,iBAAiB,CAACU,IAAD,EAAO;AAAEiB,UAAAA,WAAW,EAAE;AAAf,SAAP,CAAjB,CAA+CH,MAHhD;AAINX,QAAAA,MAJM;AAKNP,QAAAA;AALM,OAAD,CAAN;AAOA,KAtBD;AAuBA,GAnCD;AAoCA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAqB,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst isSingleLineString = require('../../utils/isSingleLineString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nfunction rule(quantity) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: quantity,\n\t\t\tpossible: [_.isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isSingleLineString(blockString(rule))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!rule.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = rule.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= quantity) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(quantity),\n\t\t\t\tnode: rule,\n\t\t\t\tindex: beforeBlockString(rule, { noRawBefore: true }).length,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}