{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n/** @typedef {import('postcss').ChildNode} ChildNode */\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @param {ChildNode} node\n * @param {'\\n' | '\\r\\n'} newline\n * @returns {ChildNode}\n */\n\n\nfunction addEmptyLineAfter(node, newline) {\n  if (node.raws.after === undefined) {\n    return node;\n  }\n\n  const after = _.last(node.raws.after.split(';')) || '';\n\n  if (!/\\r?\\n/.test(after)) {\n    node.raws.after += newline.repeat(2);\n  } else {\n    node.raws.after = node.raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n  }\n\n  return node;\n}\n\nmodule.exports = addEmptyLineAfter;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/addEmptyLineAfter.js"],"names":["_","require","addEmptyLineAfter","node","newline","raws","after","undefined","last","split","test","repeat","replace","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;AACzC,MAAID,IAAI,CAACE,IAAL,CAAUC,KAAV,KAAoBC,SAAxB,EAAmC;AAClC,WAAOJ,IAAP;AACA;;AAED,QAAMG,KAAK,GAAGN,CAAC,CAACQ,IAAF,CAAOL,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgBG,KAAhB,CAAsB,GAAtB,CAAP,KAAsC,EAApD;;AAEA,MAAI,CAAC,QAAQC,IAAR,CAAaJ,KAAb,CAAL,EAA0B;AACzBH,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAV,IAAmBF,OAAO,CAACO,MAAR,CAAe,CAAf,CAAnB;AACA,GAFD,MAEO;AACNR,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAV,GAAkBH,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgBM,OAAhB,CAAwB,SAAxB,EAAoC,GAAER,OAAQ,IAA9C,CAAlB;AACA;;AAED,SAAOD,IAAP;AACA;;AAEDU,MAAM,CAACC,OAAP,GAAiBZ,iBAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\n/** @typedef {import('postcss').ChildNode} ChildNode */\n\n/**\n * Add an empty line after a node. Mutates the node.\n *\n * @param {ChildNode} node\n * @param {'\\n' | '\\r\\n'} newline\n * @returns {ChildNode}\n */\nfunction addEmptyLineAfter(node, newline) {\n\tif (node.raws.after === undefined) {\n\t\treturn node;\n\t}\n\n\tconst after = _.last(node.raws.after.split(';')) || '';\n\n\tif (!/\\r?\\n/.test(after)) {\n\t\tnode.raws.after += newline.repeat(2);\n\t} else {\n\t\tnode.raws.after = node.raws.after.replace(/(\\r?\\n)/, `${newline}$1`);\n\t}\n\n\treturn node;\n}\n\nmodule.exports = addEmptyLineAfter;\n"]},"metadata":{},"sourceType":"script"}