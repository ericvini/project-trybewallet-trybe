{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-property-required-list';\nconst messages = ruleMessages(ruleName, {\n  expected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isObject]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(atRule => {\n      if (!isStandardSyntaxAtRule(atRule)) {\n        return;\n      }\n\n      const {\n        name,\n        nodes\n      } = atRule;\n      const atRuleName = name.toLowerCase();\n\n      if (!list[atRuleName]) {\n        return;\n      }\n\n      list[atRuleName].forEach(property => {\n        const propertyName = property.toLowerCase();\n        const hasProperty = nodes.find(({\n          type,\n          prop\n        }) => type === 'decl' && prop.toLowerCase() === propertyName);\n\n        if (hasProperty) {\n          return;\n        }\n\n        return report({\n          message: messages.expected(propertyName, atRuleName),\n          node: atRule,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-property-required-list/index.js"],"names":["_","require","isStandardSyntaxAtRule","report","ruleMessages","validateOptions","ruleName","messages","expected","property","atRule","rule","list","root","result","validOptions","actual","possible","isObject","walkAtRules","name","nodes","atRuleName","toLowerCase","forEach","propertyName","hasProperty","find","type","prop","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,oCAAD,CAAtC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,gCAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAuB,sBAAqBD,QAAS,kBAAiBC,MAAO;AADhD,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGV,eAAe,CAACS,MAAD,EAASR,QAAT,EAAmB;AACtDU,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAACjB,CAAC,CAACkB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACM,WAAL,CAAkBT,MAAD,IAAY;AAC5B,UAAI,CAACR,sBAAsB,CAACQ,MAAD,CAA3B,EAAqC;AACpC;AACA;;AAED,YAAM;AAAEU,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBX,MAAxB;AACA,YAAMY,UAAU,GAAGF,IAAI,CAACG,WAAL,EAAnB;;AAEA,UAAI,CAACX,IAAI,CAACU,UAAD,CAAT,EAAuB;AACtB;AACA;;AAEDV,MAAAA,IAAI,CAACU,UAAD,CAAJ,CAAiBE,OAAjB,CAA0Bf,QAAD,IAAc;AACtC,cAAMgB,YAAY,GAAGhB,QAAQ,CAACc,WAAT,EAArB;AAEA,cAAMG,WAAW,GAAGL,KAAK,CAACM,IAAN,CACnB,CAAC;AAAEC,UAAAA,IAAF;AAAQC,UAAAA;AAAR,SAAD,KAAoBD,IAAI,KAAK,MAAT,IAAmBC,IAAI,CAACN,WAAL,OAAuBE,YAD3C,CAApB;;AAIA,YAAIC,WAAJ,EAAiB;AAChB;AACA;;AAED,eAAOvB,MAAM,CAAC;AACb2B,UAAAA,OAAO,EAAEvB,QAAQ,CAACC,QAAT,CAAkBiB,YAAlB,EAAgCH,UAAhC,CADI;AAEbS,UAAAA,IAAI,EAAErB,MAFO;AAGbI,UAAAA,MAHa;AAIbR,UAAAA;AAJa,SAAD,CAAb;AAMA,OAjBD;AAkBA,KA9BD;AA+BA,GAzCD;AA0CA;;AAEDK,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AAEAyB,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isObject],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\n\t\t\tif (!list[atRuleName]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlist[atRuleName].forEach((property) => {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t({ type, prop }) => type === 'decl' && prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn report({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}