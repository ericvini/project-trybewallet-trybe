{"ast":null,"code":"// Calculate the specificity for a selector by dividing it into simple selectors and counting them\nvar calculate = function (input) {\n  var selectors,\n      selector,\n      i,\n      len,\n      results = []; // Separate input by commas\n\n  selectors = input.split(',');\n\n  for (i = 0, len = selectors.length; i < len; i += 1) {\n    selector = selectors[i];\n\n    if (selector.length > 0) {\n      results.push(calculateSingle(selector));\n    }\n  }\n\n  return results;\n};\n/**\n * Calculates the specificity of CSS selectors\n * http://www.w3.org/TR/css3-selectors/#specificity\n *\n * Returns an object with the following properties:\n *  - selector: the input\n *  - specificity: e.g. 0,1,0,0\n *  - parts: array with details about each part of the selector that counts towards the specificity\n *  - specificityArray: e.g. [0, 1, 0, 0]\n */\n\n\nvar calculateSingle = function (input) {\n  var selector = input,\n      findMatch,\n      typeCount = {\n    'a': 0,\n    'b': 0,\n    'c': 0\n  },\n      parts = [],\n      // The following regular expressions assume that selectors matching the preceding regular expressions have been removed\n  attributeRegex = /(\\[[^\\]]+\\])/g,\n      idRegex = /(#[^\\#\\s\\+>~\\.\\[:\\)]+)/g,\n      classRegex = /(\\.[^\\s\\+>~\\.\\[:\\)]+)/g,\n      pseudoElementRegex = /(::[^\\s\\+>~\\.\\[:]+|:first-line|:first-letter|:before|:after)/gi,\n      // A regex for pseudo classes with brackets - :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-type(), :lang()\n  // The negation psuedo class (:not) is filtered out because specificity is calculated on its argument\n  // :global and :local are filtered out - they look like psuedo classes but are an identifier for CSS Modules\n  pseudoClassWithBracketsRegex = /(:(?!not|global|local)[\\w-]+\\([^\\)]*\\))/gi,\n      // A regex for other pseudo classes, which don't have brackets\n  pseudoClassRegex = /(:(?!not|global|local)[^\\s\\+>~\\.\\[:]+)/g,\n      elementRegex = /([^\\s\\+>~\\.\\[:]+)/g; // Find matches for a regular expression in a string and push their details to parts\n  // Type is \"a\" for IDs, \"b\" for classes, attributes and pseudo-classes and \"c\" for elements and pseudo-elements\n\n  findMatch = function (regex, type) {\n    var matches, i, len, match, index, length;\n\n    if (regex.test(selector)) {\n      matches = selector.match(regex);\n\n      for (i = 0, len = matches.length; i < len; i += 1) {\n        typeCount[type] += 1;\n        match = matches[i];\n        index = selector.indexOf(match);\n        length = match.length;\n        parts.push({\n          selector: input.substr(index, length),\n          type: type,\n          index: index,\n          length: length\n        }); // Replace this simple selector with whitespace so it won't be counted in further simple selectors\n\n        selector = selector.replace(match, Array(length + 1).join(' '));\n      }\n    }\n  }; // Replace escaped characters with plain text, using the \"A\" character\n  // https://www.w3.org/TR/CSS21/syndata.html#characters\n\n\n  (function () {\n    var replaceWithPlainText = function (regex) {\n      var matches, i, len, match;\n\n      if (regex.test(selector)) {\n        matches = selector.match(regex);\n\n        for (i = 0, len = matches.length; i < len; i += 1) {\n          match = matches[i];\n          selector = selector.replace(match, Array(match.length + 1).join('A'));\n        }\n      }\n    },\n        // Matches a backslash followed by six hexadecimal digits followed by an optional single whitespace character\n    escapeHexadecimalRegex = /\\\\[0-9A-Fa-f]{6}\\s?/g,\n        // Matches a backslash followed by fewer than six hexadecimal digits followed by a mandatory single whitespace character\n    escapeHexadecimalRegex2 = /\\\\[0-9A-Fa-f]{1,5}\\s/g,\n        // Matches a backslash followed by any character\n    escapeSpecialCharacter = /\\\\./g;\n\n    replaceWithPlainText(escapeHexadecimalRegex);\n    replaceWithPlainText(escapeHexadecimalRegex2);\n    replaceWithPlainText(escapeSpecialCharacter);\n  })(); // Remove anything after a left brace in case a user has pasted in a rule, not just a selector\n\n\n  (function () {\n    var regex = /{[^]*/gm,\n        matches,\n        i,\n        len,\n        match;\n\n    if (regex.test(selector)) {\n      matches = selector.match(regex);\n\n      for (i = 0, len = matches.length; i < len; i += 1) {\n        match = matches[i];\n        selector = selector.replace(match, Array(match.length + 1).join(' '));\n      }\n    }\n  })(); // Add attribute selectors to parts collection (type b)\n\n\n  findMatch(attributeRegex, 'b'); // Add ID selectors to parts collection (type a)\n\n  findMatch(idRegex, 'a'); // Add class selectors to parts collection (type b)\n\n  findMatch(classRegex, 'b'); // Add pseudo-element selectors to parts collection (type c)\n\n  findMatch(pseudoElementRegex, 'c'); // Add pseudo-class selectors to parts collection (type b)\n\n  findMatch(pseudoClassWithBracketsRegex, 'b');\n  findMatch(pseudoClassRegex, 'b'); // Remove universal selector and separator characters\n\n  selector = selector.replace(/[\\*\\s\\+>~]/g, ' '); // Remove any stray dots or hashes which aren't attached to words\n  // These may be present if the user is live-editing this selector\n\n  selector = selector.replace(/[#\\.]/g, ' '); // Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument\n  // Remove non-standard :local and :global CSS Module identifiers because they do not effect the specificity\n\n  selector = selector.replace(/:not/g, '    ');\n  selector = selector.replace(/:local/g, '      ');\n  selector = selector.replace(/:global/g, '       ');\n  selector = selector.replace(/[\\(\\)]/g, ' '); // The only things left should be element selectors (type c)\n\n  findMatch(elementRegex, 'c'); // Order the parts in the order they appear in the original selector\n  // This is neater for external apps to deal with\n\n  parts.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  return {\n    selector: input,\n    specificity: '0,' + typeCount.a.toString() + ',' + typeCount.b.toString() + ',' + typeCount.c.toString(),\n    specificityArray: [0, typeCount.a, typeCount.b, typeCount.c],\n    parts: parts\n  };\n};\n/**\n * Compares two CSS selectors for specificity\n * Alternatively you can replace one of the CSS selectors with a specificity array\n *\n *  - it returns -1 if a has a lower specificity than b\n *  - it returns 1 if a has a higher specificity than b\n *  - it returns 0 if a has the same specificity than b\n */\n\n\nvar compare = function (a, b) {\n  var aSpecificity, bSpecificity, i;\n\n  if (typeof a === 'string') {\n    if (a.indexOf(',') !== -1) {\n      throw 'Invalid CSS selector';\n    } else {\n      aSpecificity = calculateSingle(a)['specificityArray'];\n    }\n  } else if (Array.isArray(a)) {\n    if (a.filter(function (e) {\n      return typeof e === 'number';\n    }).length !== 4) {\n      throw 'Invalid specificity array';\n    } else {\n      aSpecificity = a;\n    }\n  } else {\n    throw 'Invalid CSS selector or specificity array';\n  }\n\n  if (typeof b === 'string') {\n    if (b.indexOf(',') !== -1) {\n      throw 'Invalid CSS selector';\n    } else {\n      bSpecificity = calculateSingle(b)['specificityArray'];\n    }\n  } else if (Array.isArray(b)) {\n    if (b.filter(function (e) {\n      return typeof e === 'number';\n    }).length !== 4) {\n      throw 'Invalid specificity array';\n    } else {\n      bSpecificity = b;\n    }\n  } else {\n    throw 'Invalid CSS selector or specificity array';\n  }\n\n  for (i = 0; i < 4; i += 1) {\n    if (aSpecificity[i] < bSpecificity[i]) {\n      return -1;\n    } else if (aSpecificity[i] > bSpecificity[i]) {\n      return 1;\n    }\n  }\n\n  return 0;\n};\n\nexport { calculate, compare };","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/specificity/dist/specificity.mjs"],"names":["calculate","input","selectors","selector","i","len","results","split","length","push","calculateSingle","findMatch","typeCount","parts","attributeRegex","idRegex","classRegex","pseudoElementRegex","pseudoClassWithBracketsRegex","pseudoClassRegex","elementRegex","regex","type","matches","match","index","test","indexOf","substr","replace","Array","join","replaceWithPlainText","escapeHexadecimalRegex","escapeHexadecimalRegex2","escapeSpecialCharacter","sort","a","b","specificity","toString","c","specificityArray","compare","aSpecificity","bSpecificity","isArray","filter","e"],"mappings":"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","sourcesContent":["// Calculate the specificity for a selector by dividing it into simple selectors and counting them\nvar calculate = function(input) {\n\tvar selectors,\n\t\tselector,\n\t\ti,\n\t\tlen,\n\t\tresults = [];\n\n\t// Separate input by commas\n\tselectors = input.split(',');\n\n\tfor (i = 0, len = selectors.length; i < len; i += 1) {\n\t\tselector = selectors[i];\n\t\tif (selector.length > 0) {\n\t\t\tresults.push(calculateSingle(selector));\n\t\t}\n\t}\n\n\treturn results;\n};\n\n/**\n * Calculates the specificity of CSS selectors\n * http://www.w3.org/TR/css3-selectors/#specificity\n *\n * Returns an object with the following properties:\n *  - selector: the input\n *  - specificity: e.g. 0,1,0,0\n *  - parts: array with details about each part of the selector that counts towards the specificity\n *  - specificityArray: e.g. [0, 1, 0, 0]\n */\nvar calculateSingle = function(input) {\n\tvar selector = input,\n\t\tfindMatch,\n\t\ttypeCount = {\n\t\t\t'a': 0,\n\t\t\t'b': 0,\n\t\t\t'c': 0\n\t\t},\n\t\tparts = [],\n\t\t// The following regular expressions assume that selectors matching the preceding regular expressions have been removed\n\t\tattributeRegex = /(\\[[^\\]]+\\])/g,\n\t\tidRegex = /(#[^\\#\\s\\+>~\\.\\[:\\)]+)/g,\n\t\tclassRegex = /(\\.[^\\s\\+>~\\.\\[:\\)]+)/g,\n\t\tpseudoElementRegex = /(::[^\\s\\+>~\\.\\[:]+|:first-line|:first-letter|:before|:after)/gi,\n\t\t// A regex for pseudo classes with brackets - :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-type(), :lang()\n\t\t// The negation psuedo class (:not) is filtered out because specificity is calculated on its argument\n\t\t// :global and :local are filtered out - they look like psuedo classes but are an identifier for CSS Modules\n\t\tpseudoClassWithBracketsRegex = /(:(?!not|global|local)[\\w-]+\\([^\\)]*\\))/gi,\n\t\t// A regex for other pseudo classes, which don't have brackets\n\t\tpseudoClassRegex = /(:(?!not|global|local)[^\\s\\+>~\\.\\[:]+)/g,\n\t\telementRegex = /([^\\s\\+>~\\.\\[:]+)/g;\n\n\t// Find matches for a regular expression in a string and push their details to parts\n\t// Type is \"a\" for IDs, \"b\" for classes, attributes and pseudo-classes and \"c\" for elements and pseudo-elements\n\tfindMatch = function(regex, type) {\n\t\tvar matches, i, len, match, index, length;\n\t\tif (regex.test(selector)) {\n\t\t\tmatches = selector.match(regex);\n\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\ttypeCount[type] += 1;\n\t\t\t\tmatch = matches[i];\n\t\t\t\tindex = selector.indexOf(match);\n\t\t\t\tlength = match.length;\n\t\t\t\tparts.push({\n\t\t\t\t\tselector: input.substr(index, length),\n\t\t\t\t\ttype: type,\n\t\t\t\t\tindex: index,\n\t\t\t\t\tlength: length\n\t\t\t\t});\n\t\t\t\t// Replace this simple selector with whitespace so it won't be counted in further simple selectors\n\t\t\t\tselector = selector.replace(match, Array(length + 1).join(' '));\n\t\t\t}\n\t\t}\n\t};\n\n\t// Replace escaped characters with plain text, using the \"A\" character\n\t// https://www.w3.org/TR/CSS21/syndata.html#characters\n\t(function() {\n\t\tvar replaceWithPlainText = function(regex) {\n\t\t\t\tvar matches, i, len, match;\n\t\t\t\tif (regex.test(selector)) {\n\t\t\t\t\tmatches = selector.match(regex);\n\t\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\t\tselector = selector.replace(match, Array(match.length + 1).join('A'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// Matches a backslash followed by six hexadecimal digits followed by an optional single whitespace character\n\t\t\tescapeHexadecimalRegex = /\\\\[0-9A-Fa-f]{6}\\s?/g,\n\t\t\t// Matches a backslash followed by fewer than six hexadecimal digits followed by a mandatory single whitespace character\n\t\t\tescapeHexadecimalRegex2 = /\\\\[0-9A-Fa-f]{1,5}\\s/g,\n\t\t\t// Matches a backslash followed by any character\n\t\t\tescapeSpecialCharacter = /\\\\./g;\n\n\t\treplaceWithPlainText(escapeHexadecimalRegex);\n\t\treplaceWithPlainText(escapeHexadecimalRegex2);\n\t\treplaceWithPlainText(escapeSpecialCharacter);\n\t}());\n\n\t// Remove anything after a left brace in case a user has pasted in a rule, not just a selector\n\t(function() {\n\t\tvar regex = /{[^]*/gm,\n\t\t\tmatches, i, len, match;\n\t\tif (regex.test(selector)) {\n\t\t\tmatches = selector.match(regex);\n\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\tmatch = matches[i];\n\t\t\t\tselector = selector.replace(match, Array(match.length + 1).join(' '));\n\t\t\t}\n\t\t}\n\t}());\n\n\t// Add attribute selectors to parts collection (type b)\n\tfindMatch(attributeRegex, 'b');\n\n\t// Add ID selectors to parts collection (type a)\n\tfindMatch(idRegex, 'a');\n\n\t// Add class selectors to parts collection (type b)\n\tfindMatch(classRegex, 'b');\n\n\t// Add pseudo-element selectors to parts collection (type c)\n\tfindMatch(pseudoElementRegex, 'c');\n\n\t// Add pseudo-class selectors to parts collection (type b)\n\tfindMatch(pseudoClassWithBracketsRegex, 'b');\n\tfindMatch(pseudoClassRegex, 'b');\n\n\t// Remove universal selector and separator characters\n\tselector = selector.replace(/[\\*\\s\\+>~]/g, ' ');\n\n\t// Remove any stray dots or hashes which aren't attached to words\n\t// These may be present if the user is live-editing this selector\n\tselector = selector.replace(/[#\\.]/g, ' ');\n\n\t// Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument\n \t// Remove non-standard :local and :global CSS Module identifiers because they do not effect the specificity\n\tselector = selector.replace(/:not/g, '    ');\n\tselector = selector.replace(/:local/g, '      ');\n\tselector = selector.replace(/:global/g, '       ');\n\tselector = selector.replace(/[\\(\\)]/g, ' ');\n\n\t// The only things left should be element selectors (type c)\n\tfindMatch(elementRegex, 'c');\n\n\t// Order the parts in the order they appear in the original selector\n\t// This is neater for external apps to deal with\n\tparts.sort(function(a, b) {\n\t\treturn a.index - b.index;\n\t});\n\n\treturn {\n\t\tselector: input,\n\t\tspecificity: '0,' + typeCount.a.toString() + ',' + typeCount.b.toString() + ',' + typeCount.c.toString(),\n\t\tspecificityArray: [0, typeCount.a, typeCount.b, typeCount.c],\n\t\tparts: parts\n\t};\n};\n\n/**\n * Compares two CSS selectors for specificity\n * Alternatively you can replace one of the CSS selectors with a specificity array\n *\n *  - it returns -1 if a has a lower specificity than b\n *  - it returns 1 if a has a higher specificity than b\n *  - it returns 0 if a has the same specificity than b\n */\nvar compare = function(a, b) {\n\tvar aSpecificity,\n\t\tbSpecificity,\n\t\ti;\n\n\tif (typeof a ==='string') {\n\t\tif (a.indexOf(',') !== -1) {\n\t\t\tthrow 'Invalid CSS selector';\n\t\t} else {\n\t\t\taSpecificity = calculateSingle(a)['specificityArray'];\n\t\t}\n\t} else if (Array.isArray(a)) {\n\t\tif (a.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {\n\t\t\tthrow 'Invalid specificity array';\n\t\t} else {\n\t\t\taSpecificity = a;\n\t\t}\n\t} else {\n\t\tthrow 'Invalid CSS selector or specificity array';\n\t}\n\n\tif (typeof b ==='string') {\n\t\tif (b.indexOf(',') !== -1) {\n\t\t\tthrow 'Invalid CSS selector';\n\t\t} else {\n\t\t\tbSpecificity = calculateSingle(b)['specificityArray'];\n\t\t}\n\t} else if (Array.isArray(b)) {\n\t\tif (b.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {\n\t\t\tthrow 'Invalid specificity array';\n\t\t} else {\n\t\t\tbSpecificity = b;\n\t\t}\n\t} else {\n\t\tthrow 'Invalid CSS selector or specificity array';\n\t}\n\n\tfor (i = 0; i < 4; i += 1) {\n\t\tif (aSpecificity[i] < bSpecificity[i]) {\n\t\t\treturn -1;\n\t\t} else if (aSpecificity[i] > bSpecificity[i]) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n};\n\nexport { calculate, compare };\n"]},"metadata":{},"sourceType":"module"}