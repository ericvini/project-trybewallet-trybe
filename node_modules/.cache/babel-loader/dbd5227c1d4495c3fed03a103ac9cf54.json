{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: () => 'Expected single space after \"!\"',\n  rejectedAfter: () => 'Unexpected whitespace after \"!\"'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    declarationBangSpaceChecker({\n      root,\n      result,\n      locationChecker: checker.after,\n      checkedRuleName: ruleName,\n      fix: context.fix ? (decl, index) => {\n        let bangIndex = index - declarationValueIndex(decl);\n        const value = decl.raws.value ? decl.raws.value.raw : decl.value;\n        let target;\n        let setFixed;\n\n        if (bangIndex < value.length) {\n          target = value; // TODO: Issue #4985\n          // eslint-disable-next-line no-shadow\n\n          setFixed = value => {\n            if (decl.raws.value) {\n              decl.raws.value.raw = value;\n            } else {\n              decl.value = value;\n            }\n          };\n        } else if (decl.important) {\n          target = decl.raws.important || ' !important';\n          bangIndex -= value.length; // TODO: Issue #4985\n          // eslint-disable-next-line no-shadow\n\n          setFixed = value => {\n            decl.raws.important = value;\n          };\n        } else {\n          return false; // not standard\n        }\n\n        const targetBefore = target.slice(0, bangIndex + 1);\n        const targetAfter = target.slice(bangIndex + 1);\n\n        if (expectation === 'always') {\n          setFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n          return true;\n        }\n\n        if (expectation === 'never') {\n          setFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n          return true;\n        }\n      } : null\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-bang-space-after/index.js"],"names":["declarationBangSpaceChecker","require","declarationValueIndex","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","rejectedAfter","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","locationChecker","after","checkedRuleName","fix","decl","index","bangIndex","value","raws","raw","target","setFixed","length","important","targetBefore","slice","targetAfter","replace","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst declarationBangSpaceChecker = require('../declarationBangSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-bang-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"!\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"!\"',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationBangSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tlet bangIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst value = decl.raws.value ? decl.raws.value.raw : decl.value;\n\t\t\t\t\t\tlet target;\n\t\t\t\t\t\tlet setFixed;\n\n\t\t\t\t\t\tif (bangIndex < value.length) {\n\t\t\t\t\t\t\ttarget = value;\n\t\t\t\t\t\t\t// TODO: Issue #4985\n\t\t\t\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tif (decl.raws.value) {\n\t\t\t\t\t\t\t\t\tdecl.raws.value.raw = value;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdecl.value = value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (decl.important) {\n\t\t\t\t\t\t\ttarget = decl.raws.important || ' !important';\n\t\t\t\t\t\t\tbangIndex -= value.length;\n\t\t\t\t\t\t\t// TODO: Issue #4985\n\t\t\t\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\t\t\t\tsetFixed = (value) => {\n\t\t\t\t\t\t\t\tdecl.raws.important = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false; // not standard\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst targetBefore = target.slice(0, bangIndex + 1);\n\t\t\t\t\t\tconst targetAfter = target.slice(bangIndex + 1);\n\n\t\t\t\t\t\tif (expectation === 'always') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation === 'never') {\n\t\t\t\t\t\t\tsetFixed(targetBefore + targetAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}