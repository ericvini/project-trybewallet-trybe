{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-media-pattern';\nconst messages = ruleMessages(ruleName, {\n  expected: pattern => `Expected custom media query name to match pattern \"${pattern}\"`\n});\n\nfunction rule(pattern) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: pattern,\n      possible: [_.isRegExp, _.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const regexpPattern = _.isString(pattern) ? new RegExp(pattern) : pattern;\n    root.walkAtRules(atRule => {\n      if (atRule.name.toLowerCase() !== 'custom-media') {\n        return;\n      }\n\n      const customMediaName = atRule.params.match(/^--(\\S+)\\b/)[1];\n\n      if (regexpPattern.test(customMediaName)) {\n        return;\n      }\n\n      report({\n        message: messages.expected(pattern),\n        node: atRule,\n        index: atRuleParamIndex(atRule),\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/custom-media-pattern/index.js"],"names":["_","require","atRuleParamIndex","report","ruleMessages","validateOptions","ruleName","messages","expected","pattern","rule","root","result","validOptions","actual","possible","isRegExp","isString","regexpPattern","RegExp","walkAtRules","atRule","name","toLowerCase","customMediaName","params","match","test","message","node","index","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,sBAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,OAAD,IAAc,sDAAqDA,OAAQ;AAD9C,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcD,OAAd,EAAuB;AACtB,SAAO,CAACE,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGR,eAAe,CAACO,MAAD,EAASN,QAAT,EAAmB;AACtDQ,MAAAA,MAAM,EAAEL,OAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAACf,CAAC,CAACgB,QAAH,EAAahB,CAAC,CAACiB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAED,UAAMK,aAAa,GAAGlB,CAAC,CAACiB,QAAF,CAAWR,OAAX,IAAsB,IAAIU,MAAJ,CAAWV,OAAX,CAAtB,GAA4CA,OAAlE;AAEAE,IAAAA,IAAI,CAACS,WAAL,CAAkBC,MAAD,IAAY;AAC5B,UAAIA,MAAM,CAACC,IAAP,CAAYC,WAAZ,OAA8B,cAAlC,EAAkD;AACjD;AACA;;AAED,YAAMC,eAAe,GAAGH,MAAM,CAACI,MAAP,CAAcC,KAAd,CAAoB,YAApB,EAAkC,CAAlC,CAAxB;;AAEA,UAAIR,aAAa,CAACS,IAAd,CAAmBH,eAAnB,CAAJ,EAAyC;AACxC;AACA;;AAEDrB,MAAAA,MAAM,CAAC;AACNyB,QAAAA,OAAO,EAAErB,QAAQ,CAACC,QAAT,CAAkBC,OAAlB,CADH;AAENoB,QAAAA,IAAI,EAAER,MAFA;AAGNS,QAAAA,KAAK,EAAE5B,gBAAgB,CAACmB,MAAD,CAHjB;AAINT,QAAAA,MAJM;AAKNN,QAAAA;AALM,OAAD,CAAN;AAOA,KAlBD;AAmBA,GA/BD;AAgCA;;AAEDI,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAwB,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'custom-media-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (pattern) => `Expected custom media query name to match pattern \"${pattern}\"`,\n});\n\nfunction rule(pattern) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: pattern,\n\t\t\tpossible: [_.isRegExp, _.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexpPattern = _.isString(pattern) ? new RegExp(pattern) : pattern;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() !== 'custom-media') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst customMediaName = atRule.params.match(/^--(\\S+)\\b/)[1];\n\n\t\t\tif (regexpPattern.test(customMediaName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected(pattern),\n\t\t\t\tnode: atRule,\n\t\t\t\tindex: atRuleParamIndex(atRule),\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}