{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframes-name-pattern';\nconst messages = ruleMessages(ruleName, {\n  expected: (keyframeName, pattern) => `Expected keyframe name \"${keyframeName}\" to match pattern \"${pattern}\"`\n});\n\nfunction rule(pattern) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: pattern,\n      possible: [_.isRegExp, _.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const regex = _.isString(pattern) ? new RegExp(pattern) : pattern;\n    root.walkAtRules(/keyframes/i, keyframesNode => {\n      const value = keyframesNode.params;\n\n      if (regex.test(value)) {\n        return;\n      }\n\n      report({\n        index: atRuleParamIndex(keyframesNode),\n        message: messages.expected(value, pattern),\n        node: keyframesNode,\n        ruleName,\n        result\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/keyframes-name-pattern/index.js"],"names":["_","require","atRuleParamIndex","report","ruleMessages","validateOptions","ruleName","messages","expected","keyframeName","pattern","rule","root","result","validOptions","actual","possible","isRegExp","isString","regex","RegExp","walkAtRules","keyframesNode","value","params","test","index","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,wBAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,YAAD,EAAeC,OAAf,KACR,2BAA0BD,YAAa,uBAAsBC,OAAQ;AAFhC,CAAX,CAA7B;;AAKA,SAASC,IAAT,CAAcD,OAAd,EAAuB;AACtB,SAAO,CAACE,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGT,eAAe,CAACQ,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEL,OAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAAChB,CAAC,CAACiB,QAAH,EAAajB,CAAC,CAACkB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAED,UAAMK,KAAK,GAAGnB,CAAC,CAACkB,QAAF,CAAWR,OAAX,IAAsB,IAAIU,MAAJ,CAAWV,OAAX,CAAtB,GAA4CA,OAA1D;AAEAE,IAAAA,IAAI,CAACS,WAAL,CAAiB,YAAjB,EAAgCC,aAAD,IAAmB;AACjD,YAAMC,KAAK,GAAGD,aAAa,CAACE,MAA5B;;AAEA,UAAIL,KAAK,CAACM,IAAN,CAAWF,KAAX,CAAJ,EAAuB;AACtB;AACA;;AAEDpB,MAAAA,MAAM,CAAC;AACNuB,QAAAA,KAAK,EAAExB,gBAAgB,CAACoB,aAAD,CADjB;AAENK,QAAAA,OAAO,EAAEpB,QAAQ,CAACC,QAAT,CAAkBe,KAAlB,EAAyBb,OAAzB,CAFH;AAGNkB,QAAAA,IAAI,EAAEN,aAHA;AAINhB,QAAAA,QAJM;AAKNO,QAAAA;AALM,OAAD,CAAN;AAOA,KAdD;AAeA,GA3BD;AA4BA;;AAEDF,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAsB,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'keyframes-name-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (keyframeName, pattern) =>\n\t\t`Expected keyframe name \"${keyframeName}\" to match pattern \"${pattern}\"`,\n});\n\nfunction rule(pattern) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: pattern,\n\t\t\tpossible: [_.isRegExp, _.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regex = _.isString(pattern) ? new RegExp(pattern) : pattern;\n\n\t\troot.walkAtRules(/keyframes/i, (keyframesNode) => {\n\t\t\tconst value = keyframesNode.params;\n\n\t\t\tif (regex.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: atRuleParamIndex(keyframesNode),\n\t\t\t\tmessage: messages.expected(value, pattern),\n\t\t\t\tnode: keyframesNode,\n\t\t\t\truleName,\n\t\t\t\tresult,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}