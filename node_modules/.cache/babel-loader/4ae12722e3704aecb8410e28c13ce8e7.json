{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-disallowed-list';\nconst messages = ruleMessages(ruleName, {\n  rejected: unit => `Unexpected unit \"${unit}\"`\n}); // a function to retrieve only the media feature name\n// could be externalized in an utils function if needed in other code\n\nconst getMediaFeatureName = mediaFeatureNode => {\n  const value = mediaFeatureNode.value.toLowerCase();\n  return /((-?\\w*)*)/i.exec(value)[1];\n};\n\nfunction rule(listInput, options) {\n  const list = [].concat(listInput);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString]\n    }, {\n      optional: true,\n      actual: options,\n      possible: {\n        ignoreProperties: validateObjectWithArrayProps([_.isString, _.isRegExp]),\n        ignoreMediaFeatureNames: validateObjectWithArrayProps([_.isString, _.isRegExp])\n      }\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    function check(node, nodeIndex, valueNode, input, option) {\n      const unit = getUnitFromValueNode(valueNode); // There is not unit or it is not configured as a violation\n\n      if (!unit || unit && !list.includes(unit.toLowerCase())) {\n        return;\n      } // The unit has an ignore option for the specific input\n\n\n      if (optionsMatches(option, unit.toLowerCase(), input)) {\n        return;\n      }\n\n      report({\n        index: nodeIndex + valueNode.sourceIndex,\n        message: messages.rejected(unit),\n        node,\n        result,\n        ruleName\n      });\n    }\n\n    function checkMedia(node, value, getIndex) {\n      mediaParser(node.params).walk(/^media-feature$/i, mediaFeatureNode => {\n        const mediaName = getMediaFeatureName(mediaFeatureNode);\n        const parentValue = mediaFeatureNode.parent.value;\n        valueParser(value).walk(valueNode => {\n          // Ignore all non-word valueNode and\n          // the values not included in the parentValue string\n          if (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n            return;\n          }\n\n          check(node, getIndex(node), valueNode, mediaName, options ? options.ignoreMediaFeatureNames : {});\n        });\n      });\n    }\n\n    function checkDecl(node, value, getIndex) {\n      // make sure multiplication operations (*) are divided - not handled\n      // by postcss-value-parser\n      value = value.replace(/\\*/g, ',');\n      valueParser(value).walk(valueNode => {\n        // Ignore wrong units within `url` function\n        if (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n          return false;\n        }\n\n        check(node, getIndex(node), valueNode, node.prop, options ? options.ignoreProperties : {});\n      });\n    }\n\n    root.walkAtRules(/^media$/i, atRule => checkMedia(atRule, atRule.params, atRuleParamIndex));\n    root.walkDecls(decl => checkDecl(decl, decl.value, declarationValueIndex));\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/unit-disallowed-list/index.js"],"names":["_","require","atRuleParamIndex","declarationValueIndex","getUnitFromValueNode","mediaParser","default","optionsMatches","report","ruleMessages","validateObjectWithArrayProps","validateOptions","valueParser","ruleName","messages","rejected","unit","getMediaFeatureName","mediaFeatureNode","value","toLowerCase","exec","rule","listInput","options","list","concat","root","result","validOptions","actual","possible","isString","optional","ignoreProperties","isRegExp","ignoreMediaFeatureNames","check","node","nodeIndex","valueNode","input","option","includes","index","sourceIndex","message","checkMedia","getIndex","params","walk","mediaName","parentValue","parent","type","checkDecl","replace","prop","walkAtRules","atRule","walkDecls","decl","primaryOptionArray","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateObjectWithArrayProps = require('../../utils/validateObjectWithArrayProps');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (unit) => `Unexpected unit \"${unit}\"`,\n});\n\n// a function to retrieve only the media feature name\n// could be externalized in an utils function if needed in other code\nconst getMediaFeatureName = (mediaFeatureNode) => {\n\tconst value = mediaFeatureNode.value.toLowerCase();\n\n\treturn /((-?\\w*)*)/i.exec(value)[1];\n};\n\nfunction rule(listInput, options) {\n\tconst list = [].concat(listInput);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: list,\n\t\t\t\tpossible: [_.isString],\n\t\t\t},\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: validateObjectWithArrayProps([_.isString, _.isRegExp]),\n\t\t\t\t\tignoreMediaFeatureNames: validateObjectWithArrayProps([_.isString, _.isRegExp]),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction check(node, nodeIndex, valueNode, input, option) {\n\t\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\t\t// There is not unit or it is not configured as a violation\n\t\t\tif (!unit || (unit && !list.includes(unit.toLowerCase()))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The unit has an ignore option for the specific input\n\t\t\tif (optionsMatches(option, unit.toLowerCase(), input)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tindex: nodeIndex + valueNode.sourceIndex,\n\t\t\t\tmessage: messages.rejected(unit),\n\t\t\t\tnode,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t}\n\n\t\tfunction checkMedia(node, value, getIndex) {\n\t\t\tmediaParser(node.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst mediaName = getMediaFeatureName(mediaFeatureNode);\n\t\t\t\tconst parentValue = mediaFeatureNode.parent.value;\n\n\t\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t\t// Ignore all non-word valueNode and\n\t\t\t\t\t// the values not included in the parentValue string\n\t\t\t\t\tif (valueNode.type !== 'word' || !parentValue.includes(valueNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcheck(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tgetIndex(node),\n\t\t\t\t\t\tvalueNode,\n\t\t\t\t\t\tmediaName,\n\t\t\t\t\t\toptions ? options.ignoreMediaFeatureNames : {},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tfunction checkDecl(node, value, getIndex) {\n\t\t\t// make sure multiplication operations (*) are divided - not handled\n\t\t\t// by postcss-value-parser\n\t\t\tvalue = value.replace(/\\*/g, ',');\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcheck(node, getIndex(node), valueNode, node.prop, options ? options.ignoreProperties : {});\n\t\t\t});\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => checkMedia(atRule, atRule.params, atRuleParamIndex));\n\t\troot.walkDecls((decl) => checkDecl(decl, decl.value, declarationValueIndex));\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}