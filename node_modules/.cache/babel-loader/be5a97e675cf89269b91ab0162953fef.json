{"ast":null,"code":"\"use strict\";\n\nconst parseStyle = require(\"./parse-style\");\n\nfunction getSyntax(config, syntax) {\n  if (typeof syntax !== \"string\") {\n    return syntax;\n  }\n\n  let syntaxConfig = config[syntax];\n\n  if (syntaxConfig) {\n    syntaxConfig = getSyntax(config, syntaxConfig);\n  } else {\n    syntaxConfig = {\n      extract: require(syntax.toLowerCase().replace(/^(postcss-)?/i, \"postcss-\") + \"/extract\")\n    };\n    config[syntax] = syntaxConfig;\n  }\n\n  return syntaxConfig;\n}\n\nfunction processor(source, lang, opts) {\n  const syntax = getSyntax(opts.syntax.config, lang);\n  const styles = (syntax.extract || syntax)(source, opts) || [];\n  return parseStyle(source, opts, styles);\n}\n\nmodule.exports = processor;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/postcss-syntax/processor.js"],"names":["parseStyle","require","getSyntax","config","syntax","syntaxConfig","extract","toLowerCase","replace","processor","source","lang","opts","styles","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,SAASC,SAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AACnC,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,WAAOA,MAAP;AACA;;AACD,MAAIC,YAAY,GAAGF,MAAM,CAACC,MAAD,CAAzB;;AAEA,MAAIC,YAAJ,EAAkB;AACjBA,IAAAA,YAAY,GAAGH,SAAS,CAACC,MAAD,EAASE,YAAT,CAAxB;AACA,GAFD,MAEO;AACNA,IAAAA,YAAY,GAAG;AACdC,MAAAA,OAAO,EAAEL,OAAO,CAACG,MAAM,CAACG,WAAP,GAAqBC,OAArB,CAA6B,eAA7B,EAA8C,UAA9C,IAA4D,UAA7D;AADF,KAAf;AAGAL,IAAAA,MAAM,CAACC,MAAD,CAAN,GAAiBC,YAAjB;AACA;;AAED,SAAOA,YAAP;AACA;;AAED,SAASI,SAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwC;AACvC,QAAMR,MAAM,GAAGF,SAAS,CAACU,IAAI,CAACR,MAAL,CAAYD,MAAb,EAAqBQ,IAArB,CAAxB;AACA,QAAME,MAAM,GAAG,CAACT,MAAM,CAACE,OAAP,IAAkBF,MAAnB,EAA2BM,MAA3B,EAAmCE,IAAnC,KAA4C,EAA3D;AACA,SAAOZ,UAAU,CAACU,MAAD,EAASE,IAAT,EAAeC,MAAf,CAAjB;AACA;;AAEDC,MAAM,CAACC,OAAP,GAAiBN,SAAjB","sourcesContent":["\"use strict\";\n\nconst parseStyle = require(\"./parse-style\");\n\nfunction getSyntax (config, syntax) {\n\tif (typeof syntax !== \"string\") {\n\t\treturn syntax;\n\t}\n\tlet syntaxConfig = config[syntax];\n\n\tif (syntaxConfig) {\n\t\tsyntaxConfig = getSyntax(config, syntaxConfig);\n\t} else {\n\t\tsyntaxConfig = {\n\t\t\textract: require(syntax.toLowerCase().replace(/^(postcss-)?/i, \"postcss-\") + \"/extract\"),\n\t\t};\n\t\tconfig[syntax] = syntaxConfig;\n\t}\n\n\treturn syntaxConfig;\n}\n\nfunction processor (source, lang, opts) {\n\tconst syntax = getSyntax(opts.syntax.config, lang);\n\tconst styles = (syntax.extract || syntax)(source, opts) || [];\n\treturn parseStyle(source, opts, styles);\n}\n\nmodule.exports = processor;\n"]},"metadata":{},"sourceType":"script"}