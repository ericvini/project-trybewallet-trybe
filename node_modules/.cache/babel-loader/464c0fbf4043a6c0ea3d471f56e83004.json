{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst chalk = require('chalk');\n\nconst stringFormatter = require('./stringFormatter');\n/**\n * @type {import('stylelint').Formatter}\n */\n\n\nmodule.exports = function (results) {\n  let output = stringFormatter(results);\n\n  if (output === '') {\n    output = '\\n';\n  }\n\n  const sourceWord = results.length > 1 ? 'sources' : 'source';\n  const ignoredCount = results.filter(result => result.ignored).length;\n  const checkedDisplay = ignoredCount ? `${results.length - ignoredCount} of ${results.length}` : results.length;\n  output += chalk.underline(`${checkedDisplay} ${sourceWord} checked\\n`);\n  results.forEach(result => {\n    let formatting = 'green';\n\n    if (result.errored) {\n      formatting = 'red';\n    } else if (result.warnings.length) {\n      formatting = 'yellow';\n    } else if (result.ignored) {\n      formatting = 'dim';\n    }\n\n    let sourceText = `${result.source}`;\n\n    if (result.ignored) {\n      sourceText += ' (ignored)';\n    }\n\n    output += _.get(chalk, formatting)(` ${sourceText}\\n`);\n  });\n\n  const warnings = _.flatten(results.map(r => r.warnings));\n\n  const warningsBySeverity = _.groupBy(warnings, 'severity');\n\n  const problemWord = warnings.length === 1 ? 'problem' : 'problems';\n  output += chalk.underline(`\\n${warnings.length} ${problemWord} found\\n`);\n\n  for (const [severityLevel, warningList] of Object.entries(warningsBySeverity)) {\n    const warningsByRule = _.groupBy(warningList, 'rule');\n\n    output += ` severity level \"${severityLevel}\": ${warningList.length}\\n`;\n\n    for (const [rule, list] of Object.entries(warningsByRule)) {\n      output += chalk.dim(`  ${rule}: ${list.length}\\n`);\n    }\n  }\n\n  return `${output}\\n`;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/formatters/verboseFormatter.js"],"names":["_","require","chalk","stringFormatter","module","exports","results","output","sourceWord","length","ignoredCount","filter","result","ignored","checkedDisplay","underline","forEach","formatting","errored","warnings","sourceText","source","get","flatten","map","r","warningsBySeverity","groupBy","problemWord","severityLevel","warningList","Object","entries","warningsByRule","rule","list","dim"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA/B;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AACnC,MAAIC,MAAM,GAAGJ,eAAe,CAACG,OAAD,CAA5B;;AAEA,MAAIC,MAAM,KAAK,EAAf,EAAmB;AAClBA,IAAAA,MAAM,GAAG,IAAT;AACA;;AAED,QAAMC,UAAU,GAAGF,OAAO,CAACG,MAAR,GAAiB,CAAjB,GAAqB,SAArB,GAAiC,QAApD;AACA,QAAMC,YAAY,GAAGJ,OAAO,CAACK,MAAR,CAAgBC,MAAD,IAAYA,MAAM,CAACC,OAAlC,EAA2CJ,MAAhE;AACA,QAAMK,cAAc,GAAGJ,YAAY,GAC/B,GAAEJ,OAAO,CAACG,MAAR,GAAiBC,YAAa,OAAMJ,OAAO,CAACG,MAAO,EADtB,GAEhCH,OAAO,CAACG,MAFX;AAIAF,EAAAA,MAAM,IAAIL,KAAK,CAACa,SAAN,CAAiB,GAAED,cAAe,IAAGN,UAAW,YAAhD,CAAV;AACAF,EAAAA,OAAO,CAACU,OAAR,CAAiBJ,MAAD,IAAY;AAC3B,QAAIK,UAAU,GAAG,OAAjB;;AAEA,QAAIL,MAAM,CAACM,OAAX,EAAoB;AACnBD,MAAAA,UAAU,GAAG,KAAb;AACA,KAFD,MAEO,IAAIL,MAAM,CAACO,QAAP,CAAgBV,MAApB,EAA4B;AAClCQ,MAAAA,UAAU,GAAG,QAAb;AACA,KAFM,MAEA,IAAIL,MAAM,CAACC,OAAX,EAAoB;AAC1BI,MAAAA,UAAU,GAAG,KAAb;AACA;;AAED,QAAIG,UAAU,GAAI,GAAER,MAAM,CAACS,MAAO,EAAlC;;AAEA,QAAIT,MAAM,CAACC,OAAX,EAAoB;AACnBO,MAAAA,UAAU,IAAI,YAAd;AACA;;AAEDb,IAAAA,MAAM,IAAIP,CAAC,CAACsB,GAAF,CAAMpB,KAAN,EAAae,UAAb,EAA0B,IAAGG,UAAW,IAAxC,CAAV;AACA,GAlBD;;AAoBA,QAAMD,QAAQ,GAAGnB,CAAC,CAACuB,OAAF,CAAUjB,OAAO,CAACkB,GAAR,CAAaC,CAAD,IAAOA,CAAC,CAACN,QAArB,CAAV,CAAjB;;AACA,QAAMO,kBAAkB,GAAG1B,CAAC,CAAC2B,OAAF,CAAUR,QAAV,EAAoB,UAApB,CAA3B;;AACA,QAAMS,WAAW,GAAGT,QAAQ,CAACV,MAAT,KAAoB,CAApB,GAAwB,SAAxB,GAAoC,UAAxD;AAEAF,EAAAA,MAAM,IAAIL,KAAK,CAACa,SAAN,CAAiB,KAAII,QAAQ,CAACV,MAAO,IAAGmB,WAAY,UAApD,CAAV;;AAEA,OAAK,MAAM,CAACC,aAAD,EAAgBC,WAAhB,CAAX,IAA2CC,MAAM,CAACC,OAAP,CAAeN,kBAAf,CAA3C,EAA+E;AAC9E,UAAMO,cAAc,GAAGjC,CAAC,CAAC2B,OAAF,CAAUG,WAAV,EAAuB,MAAvB,CAAvB;;AAEAvB,IAAAA,MAAM,IAAK,oBAAmBsB,aAAc,MAAKC,WAAW,CAACrB,MAAO,IAApE;;AAEA,SAAK,MAAM,CAACyB,IAAD,EAAOC,IAAP,CAAX,IAA2BJ,MAAM,CAACC,OAAP,CAAeC,cAAf,CAA3B,EAA2D;AAC1D1B,MAAAA,MAAM,IAAIL,KAAK,CAACkC,GAAN,CAAW,KAAIF,IAAK,KAAIC,IAAI,CAAC1B,MAAO,IAApC,CAAV;AACA;AACD;;AAED,SAAQ,GAAEF,MAAO,IAAjB;AACA,CAnDD","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst stringFormatter = require('./stringFormatter');\n\n/**\n * @type {import('stylelint').Formatter}\n */\nmodule.exports = function (results) {\n\tlet output = stringFormatter(results);\n\n\tif (output === '') {\n\t\toutput = '\\n';\n\t}\n\n\tconst sourceWord = results.length > 1 ? 'sources' : 'source';\n\tconst ignoredCount = results.filter((result) => result.ignored).length;\n\tconst checkedDisplay = ignoredCount\n\t\t? `${results.length - ignoredCount} of ${results.length}`\n\t\t: results.length;\n\n\toutput += chalk.underline(`${checkedDisplay} ${sourceWord} checked\\n`);\n\tresults.forEach((result) => {\n\t\tlet formatting = 'green';\n\n\t\tif (result.errored) {\n\t\t\tformatting = 'red';\n\t\t} else if (result.warnings.length) {\n\t\t\tformatting = 'yellow';\n\t\t} else if (result.ignored) {\n\t\t\tformatting = 'dim';\n\t\t}\n\n\t\tlet sourceText = `${result.source}`;\n\n\t\tif (result.ignored) {\n\t\t\tsourceText += ' (ignored)';\n\t\t}\n\n\t\toutput += _.get(chalk, formatting)(` ${sourceText}\\n`);\n\t});\n\n\tconst warnings = _.flatten(results.map((r) => r.warnings));\n\tconst warningsBySeverity = _.groupBy(warnings, 'severity');\n\tconst problemWord = warnings.length === 1 ? 'problem' : 'problems';\n\n\toutput += chalk.underline(`\\n${warnings.length} ${problemWord} found\\n`);\n\n\tfor (const [severityLevel, warningList] of Object.entries(warningsBySeverity)) {\n\t\tconst warningsByRule = _.groupBy(warningList, 'rule');\n\n\t\toutput += ` severity level \"${severityLevel}\": ${warningList.length}\\n`;\n\n\t\tfor (const [rule, list] of Object.entries(warningsByRule)) {\n\t\t\toutput += chalk.dim(`  ${rule}: ${list.length}\\n`);\n\t\t}\n\t}\n\n\treturn `${output}\\n`;\n};\n"]},"metadata":{},"sourceType":"script"}