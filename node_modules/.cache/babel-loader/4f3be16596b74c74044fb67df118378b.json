{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isCustomProperty = require('../../utils/isCustomProperty');\n\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'property-blacklist';\nconst messages = ruleMessages(ruleName, {\n  rejected: property => `Unexpected property \"${property}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString, _.isRegExp]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'property-disallowed-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n    root.walkDecls(decl => {\n      const prop = decl.prop;\n\n      if (!isStandardSyntaxProperty(prop)) {\n        return;\n      }\n\n      if (isCustomProperty(prop)) {\n        return;\n      }\n\n      if (!matchesStringOrRegExp(vendor.unprefixed(prop), list)) {\n        return;\n      }\n\n      report({\n        message: messages.rejected(prop),\n        node: decl,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/property-blacklist/index.js"],"names":["_","require","isCustomProperty","isStandardSyntaxProperty","matchesStringOrRegExp","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","property","rule","list","root","result","validOptions","actual","possible","isString","isRegExp","warn","stylelintType","stylelintReference","walkDecls","decl","prop","unprefixed","message","node","primaryOptionArray","meta","deprecated","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAME,wBAAwB,GAAGF,OAAO,CAAC,sCAAD,CAAxC;;AACA,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMQ,QAAQ,GAAG,oBAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,QAAD,IAAe,wBAAuBA,QAAS;AADlB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGV,eAAe,CAACS,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAACnB,CAAC,CAACoB,QAAH,EAAapB,CAAC,CAACqB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAEDD,IAAAA,MAAM,CAACM,IAAP,CAAa,IAAGb,QAAS,gEAAzB,EAA0F;AACzFc,MAAAA,aAAa,EAAE,aAD0E;AAEzFC,MAAAA,kBAAkB,EAAG,gEAA+Df,QAAS;AAFJ,KAA1F;AAKAM,IAAAA,IAAI,CAACU,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;;AAEA,UAAI,CAACxB,wBAAwB,CAACwB,IAAD,CAA7B,EAAqC;AACpC;AACA;;AAED,UAAIzB,gBAAgB,CAACyB,IAAD,CAApB,EAA4B;AAC3B;AACA;;AAED,UAAI,CAACvB,qBAAqB,CAACI,MAAM,CAACoB,UAAP,CAAkBD,IAAlB,CAAD,EAA0Bb,IAA1B,CAA1B,EAA2D;AAC1D;AACA;;AAEDT,MAAAA,MAAM,CAAC;AACNwB,QAAAA,OAAO,EAAEnB,QAAQ,CAACC,QAAT,CAAkBgB,IAAlB,CADH;AAENG,QAAAA,IAAI,EAAEJ,IAFA;AAGNV,QAAAA,MAHM;AAINP,QAAAA;AAJM,OAAD,CAAN;AAMA,KArBD;AAsBA,GArCD;AAsCA;;AAEDI,IAAI,CAACkB,kBAAL,GAA0B,IAA1B;AAEAlB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAG,IAAI,CAACmB,IAAL,GAAY;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isCustomProperty = require('../../utils/isCustomProperty');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'property-blacklist';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property) => `Unexpected property \"${property}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString, _.isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(`'${ruleName}' has been deprecated. Instead use 'property-disallowed-list'.`, {\n\t\t\tstylelintType: 'deprecation',\n\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\n\t\t\tif (!isStandardSyntaxProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCustomProperty(prop)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(prop), list)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}