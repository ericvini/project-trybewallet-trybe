{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _ExplorerBase = require(\"./ExplorerBase\");\n\nvar _readFile = require(\"./readFile\");\n\nvar _cacheWrapper = require(\"./cacheWrapper\");\n\nvar _getDirectory = require(\"./getDirectory\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass ExplorerSync extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n\n  searchSync(searchFrom = process.cwd()) {\n    const startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n    return result;\n  }\n\n  searchFromDirectorySync(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  searchDirectorySync(dir) {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    } // config not found\n\n\n    return null;\n  }\n\n  loadSearchPlaceSync(dir, place) {\n    const filepath = _path.default.join(dir, place);\n\n    const content = (0, _readFile.readFileSync)(filepath);\n    const result = this.createCosmiconfigResultSync(filepath, content);\n    return result;\n  }\n\n  loadFileContentSync(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n\n    if (content.trim() === '') {\n      return undefined;\n    }\n\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n    return loaderResult;\n  }\n\n  createCosmiconfigResultSync(filepath, content) {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n    return result;\n  }\n\n  loadSync(filepath) {\n    this.validateFilePath(filepath);\n\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n\n    const runLoadSync = () => {\n      const content = (0, _readFile.readFileSync)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(absoluteFilePath, content);\n      const transformResult = this.config.transform(cosmiconfigResult);\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n\n}\n\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"sources":["../src/ExplorerSync.ts"],"names":["ExplorerBase","constructor","searchSync","searchFrom","process","startDirectory","result","searchFromDirectorySync","absoluteDir","path","run","nextDir","transformResult","searchDirectorySync","placeResult","loadSearchPlaceSync","filepath","content","loadFileContentSync","loader","loaderResult","createCosmiconfigResultSync","fileContent","loadSync","absoluteFilePath","runLoadSync","throwNotFound","cosmiconfigResult"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;;;;;;;AAOA,MAAA,YAAA,SAA2BA,aAAAA,CAA3B,YAAA,CAA6D;AACpDC,EAAAA,WAAP,CAAA,OAAA,EAAiD;AAC/C,UAAA,OAAA;AACD;;AAEMC,EAAAA,UAAP,CAAkBC,UAAkB,GAAGC,OAAO,CAA9C,GAAuCA,EAAvC,EAAyE;AACvE,UAAMC,cAAc,GAAG,CAAA,GAAA,aAAA,CAAA,gBAAA,EAAvB,UAAuB,CAAvB;AACA,UAAMC,MAAM,GAAG,KAAA,uBAAA,CAAf,cAAe,CAAf;AAEA,WAAA,MAAA;AACD;;AAEOC,EAAAA,uBAAR,CAAA,GAAA,EAAgE;AAC9D,UAAMC,WAAW,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAaL,OAAO,CAApBK,GAAaL,EAAbK,EAApB,GAAoBA,CAApB;;AAEA,UAAMC,GAAG,GAAG,MAAyB;AACnC,YAAMJ,MAAM,GAAG,KAAA,mBAAA,CAAf,WAAe,CAAf;AACA,YAAMK,OAAO,GAAG,KAAA,qBAAA,CAAA,WAAA,EAAhB,MAAgB,CAAhB;;AAEA,UAAA,OAAA,EAAa;AACX,eAAO,KAAA,uBAAA,CAAP,OAAO,CAAP;AACD;;AAED,YAAMC,eAAe,GAAG,KAAA,MAAA,CAAA,SAAA,CAAxB,MAAwB,CAAxB;AAEA,aAAA,eAAA;AAVF,KAAA;;AAaA,QAAI,KAAJ,WAAA,EAAsB;AACpB,aAAO,CAAA,GAAA,aAAA,CAAA,gBAAA,EAAiB,KAAjB,WAAA,EAAA,WAAA,EAAP,GAAO,CAAP;AACD;;AAED,WAAOF,GAAP,EAAA;AACD;;AAEOG,EAAAA,mBAAR,CAAA,GAAA,EAA4D;AAC1D,SAAK,MAAL,KAAA,IAAoB,KAAA,MAAA,CAApB,YAAA,EAA8C;AAC5C,YAAMC,WAAW,GAAG,KAAA,mBAAA,CAAA,GAAA,EAApB,KAAoB,CAApB;;AAEA,UAAI,KAAA,0BAAA,CAAA,WAAA,MAAJ,IAAA,EAA2D;AACzD,eAAA,WAAA;AACD;AANuD,KAAA,CAS1D;;;AACA,WAAA,IAAA;AACD;;AAEOC,EAAAA,mBAAR,CAAA,GAAA,EAAA,KAAA,EAA2E;AACzE,UAAMC,QAAQ,GAAGP,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAjB,KAAiBA,CAAjB;;AACA,UAAMQ,OAAO,GAAG,CAAA,GAAA,SAAA,CAAA,YAAA,EAAhB,QAAgB,CAAhB;AAEA,UAAMX,MAAM,GAAG,KAAA,2BAAA,CAAA,QAAA,EAAf,OAAe,CAAf;AAEA,WAAA,MAAA;AACD;;AAEOY,EAAAA,mBAAR,CAAA,QAAA,EAAA,OAAA,EAGqB;AACnB,QAAID,OAAO,KAAX,IAAA,EAAsB;AACpB,aAAA,IAAA;AACD;;AACD,QAAIA,OAAO,CAAPA,IAAAA,OAAJ,EAAA,EAA2B;AACzB,aAAA,SAAA;AACD;;AACD,UAAME,MAAM,GAAG,KAAA,qBAAA,CAAf,QAAe,CAAf;AACA,UAAMC,YAAY,GAAGD,MAAM,CAAA,QAAA,EAA3B,OAA2B,CAA3B;AAEA,WAAA,YAAA;AACD;;AAEOE,EAAAA,2BAAR,CAAA,QAAA,EAAA,OAAA,EAGqB;AACnB,UAAMC,WAAW,GAAG,KAAA,mBAAA,CAAA,QAAA,EAApB,OAAoB,CAApB;AACA,UAAMhB,MAAM,GAAG,KAAA,gCAAA,CAAA,QAAA,EAAf,WAAe,CAAf;AAEA,WAAA,MAAA;AACD;;AAEMiB,EAAAA,QAAP,CAAA,QAAA,EAAqD;AACnD,SAAA,gBAAA,CAAA,QAAA;;AACA,UAAMC,gBAAgB,GAAGf,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAaL,OAAO,CAApBK,GAAaL,EAAbK,EAAzB,QAAyBA,CAAzB;;AAEA,UAAMgB,WAAW,GAAG,MAAyB;AAC3C,YAAMR,OAAO,GAAG,CAAA,GAAA,SAAA,CAAA,YAAA,EAAA,gBAAA,EAA+B;AAAES,QAAAA,aAAa,EAAE;AAAjB,OAA/B,CAAhB;AACA,YAAMC,iBAAiB,GAAG,KAAA,2BAAA,CAAA,gBAAA,EAA1B,OAA0B,CAA1B;AAKA,YAAMf,eAAe,GAAG,KAAA,MAAA,CAAA,SAAA,CAAxB,iBAAwB,CAAxB;AAEA,aAAA,eAAA;AATF,KAAA;;AAYA,QAAI,KAAJ,SAAA,EAAoB;AAClB,aAAO,CAAA,GAAA,aAAA,CAAA,gBAAA,EAAiB,KAAjB,SAAA,EAAA,gBAAA,EAAP,WAAO,CAAP;AACD;;AAED,WAAOa,WAAP,EAAA;AACD;;AAxG0D","sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFileSync } from './readFile';\nimport { cacheWrapperSync } from './cacheWrapper';\nimport { getDirectorySync } from './getDirectory';\nimport {\n  CosmiconfigResult,\n  ExplorerOptionsSync,\n  LoadedFileContent,\n} from './types';\n\nclass ExplorerSync extends ExplorerBase<ExplorerOptionsSync> {\n  public constructor(options: ExplorerOptionsSync) {\n    super(options);\n  }\n\n  public searchSync(searchFrom: string = process.cwd()): CosmiconfigResult {\n    const startDirectory = getDirectorySync(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n\n    return result;\n  }\n\n  private searchFromDirectorySync(dir: string): CosmiconfigResult {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = (): CosmiconfigResult => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapperSync(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private searchDirectorySync(dir: string): CosmiconfigResult {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private loadSearchPlaceSync(dir: string, place: string): CosmiconfigResult {\n    const filepath = path.join(dir, place);\n    const content = readFileSync(filepath);\n\n    const result = this.createCosmiconfigResultSync(filepath, content);\n\n    return result;\n  }\n\n  private loadFileContentSync(\n    filepath: string,\n    content: string | null,\n  ): LoadedFileContent {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n\n    return loaderResult;\n  }\n\n  private createCosmiconfigResultSync(\n    filepath: string,\n    content: string | null,\n  ): CosmiconfigResult {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public loadSync(filepath: string): CosmiconfigResult {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoadSync = (): CosmiconfigResult => {\n      const content = readFileSync(absoluteFilePath, { throwNotFound: true });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content,\n      );\n\n      const transformResult = this.config.transform(cosmiconfigResult);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapperSync(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n}\n\nexport { ExplorerSync };\n"]},"metadata":{},"sourceType":"script"}