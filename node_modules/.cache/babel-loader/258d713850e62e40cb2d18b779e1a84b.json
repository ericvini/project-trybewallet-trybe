{"ast":null,"code":"'use strict';\n\nconst augmentConfigFull = require('./augmentConfig').augmentConfigFull;\n\nconst configurationError = require('./utils/configurationError');\n\nconst path = require('path');\n/** @typedef {import('stylelint').StylelintConfig} StylelintConfig */\n\n/** @typedef {import('stylelint').CosmiconfigResult} CosmiconfigResult */\n\n/** @typedef {Promise<CosmiconfigResult | null>} ConfigPromise  */\n\n/**\n * @param {import('stylelint').StylelintInternalApi} stylelint\n * @param {string} [searchPath]\n * @returns {ConfigPromise}\n */\n\n\nmodule.exports = function (stylelint, searchPath = process.cwd()) {\n  const optionsConfig = stylelint._options.config;\n\n  if (optionsConfig !== undefined) {\n    const cached =\n    /** @type {ConfigPromise} */\n    stylelint._specifiedConfigCache.get(optionsConfig);\n\n    if (cached) return cached; // stylelint._fullExplorer (cosmiconfig) is already configured to\n    // run augmentConfigFull; but since we're making up the result here,\n    // we need to manually run the transform\n\n    const augmentedResult = augmentConfigFull(stylelint, {\n      config: optionsConfig,\n      // Add the extra path part so that we can get the directory without being\n      // confused\n      filepath: path.join(process.cwd(), 'argument-config')\n    });\n\n    stylelint._specifiedConfigCache.set(optionsConfig, augmentedResult);\n\n    return augmentedResult;\n  }\n\n  const searchForConfig = stylelint._options.configFile ? stylelint._fullExplorer.load(stylelint._options.configFile) : stylelint._fullExplorer.search(searchPath);\n  return (\n    /** @type {ConfigPromise} */\n    searchForConfig.then(config => {\n      // If no config was found, try looking from process.cwd\n      if (!config) return stylelint._fullExplorer.search(process.cwd());\n      return config;\n    }).then(config => {\n      if (!config) {\n        const ending = searchPath ? ` for ${searchPath}` : '';\n        throw configurationError(`No configuration provided${ending}`);\n      }\n\n      return config;\n    })\n  );\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/getConfigForFile.js"],"names":["augmentConfigFull","require","configurationError","path","module","exports","stylelint","searchPath","process","cwd","optionsConfig","_options","config","undefined","cached","_specifiedConfigCache","get","augmentedResult","filepath","join","set","searchForConfig","configFile","_fullExplorer","load","search","then","ending"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,iBAArD;;AACA,MAAME,kBAAkB,GAAGD,OAAO,CAAC,4BAAD,CAAlC;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqBC,UAAU,GAAGC,OAAO,CAACC,GAAR,EAAlC,EAAiD;AACjE,QAAMC,aAAa,GAAGJ,SAAS,CAACK,QAAV,CAAmBC,MAAzC;;AAEA,MAAIF,aAAa,KAAKG,SAAtB,EAAiC;AAChC,UAAMC,MAAM;AAAG;AAA8BR,IAAAA,SAAS,CAACS,qBAAV,CAAgCC,GAAhC,CAC5CN,aAD4C,CAA7C;;AAIA,QAAII,MAAJ,EAAY,OAAOA,MAAP,CALoB,CAOhC;AACA;AACA;;AACA,UAAMG,eAAe,GAAGjB,iBAAiB,CAACM,SAAD,EAAY;AACpDM,MAAAA,MAAM,EAAEF,aAD4C;AAEpD;AACA;AACAQ,MAAAA,QAAQ,EAAEf,IAAI,CAACgB,IAAL,CAAUX,OAAO,CAACC,GAAR,EAAV,EAAyB,iBAAzB;AAJ0C,KAAZ,CAAzC;;AAOAH,IAAAA,SAAS,CAACS,qBAAV,CAAgCK,GAAhC,CAAoCV,aAApC,EAAmDO,eAAnD;;AAEA,WAAOA,eAAP;AACA;;AAED,QAAMI,eAAe,GAAGf,SAAS,CAACK,QAAV,CAAmBW,UAAnB,GACrBhB,SAAS,CAACiB,aAAV,CAAwBC,IAAxB,CAA6BlB,SAAS,CAACK,QAAV,CAAmBW,UAAhD,CADqB,GAErBhB,SAAS,CAACiB,aAAV,CAAwBE,MAAxB,CAA+BlB,UAA/B,CAFH;AAIA;AAAO;AAA8Bc,IAAAA,eAAe,CAClDK,IADmC,CAC7Bd,MAAD,IAAY;AACjB;AACA,UAAI,CAACA,MAAL,EAAa,OAAON,SAAS,CAACiB,aAAV,CAAwBE,MAAxB,CAA+BjB,OAAO,CAACC,GAAR,EAA/B,CAAP;AAEb,aAAOG,MAAP;AACA,KANmC,EAOnCc,IAPmC,CAO7Bd,MAAD,IAAY;AACjB,UAAI,CAACA,MAAL,EAAa;AACZ,cAAMe,MAAM,GAAGpB,UAAU,GAAI,QAAOA,UAAW,EAAtB,GAA0B,EAAnD;AAEA,cAAML,kBAAkB,CAAE,4BAA2ByB,MAAO,EAApC,CAAxB;AACA;;AAED,aAAOf,MAAP;AACA,KAfmC;AAArC;AAgBA,CA7CD","sourcesContent":["'use strict';\n\nconst augmentConfigFull = require('./augmentConfig').augmentConfigFull;\nconst configurationError = require('./utils/configurationError');\nconst path = require('path');\n\n/** @typedef {import('stylelint').StylelintConfig} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} CosmiconfigResult */\n/** @typedef {Promise<CosmiconfigResult | null>} ConfigPromise  */\n\n/**\n * @param {import('stylelint').StylelintInternalApi} stylelint\n * @param {string} [searchPath]\n * @returns {ConfigPromise}\n */\nmodule.exports = function (stylelint, searchPath = process.cwd()) {\n\tconst optionsConfig = stylelint._options.config;\n\n\tif (optionsConfig !== undefined) {\n\t\tconst cached = /** @type {ConfigPromise} */ (stylelint._specifiedConfigCache.get(\n\t\t\toptionsConfig,\n\t\t));\n\n\t\tif (cached) return cached;\n\n\t\t// stylelint._fullExplorer (cosmiconfig) is already configured to\n\t\t// run augmentConfigFull; but since we're making up the result here,\n\t\t// we need to manually run the transform\n\t\tconst augmentedResult = augmentConfigFull(stylelint, {\n\t\t\tconfig: optionsConfig,\n\t\t\t// Add the extra path part so that we can get the directory without being\n\t\t\t// confused\n\t\t\tfilepath: path.join(process.cwd(), 'argument-config'),\n\t\t});\n\n\t\tstylelint._specifiedConfigCache.set(optionsConfig, augmentedResult);\n\n\t\treturn augmentedResult;\n\t}\n\n\tconst searchForConfig = stylelint._options.configFile\n\t\t? stylelint._fullExplorer.load(stylelint._options.configFile)\n\t\t: stylelint._fullExplorer.search(searchPath);\n\n\treturn /** @type {ConfigPromise} */ (searchForConfig\n\t\t.then((config) => {\n\t\t\t// If no config was found, try looking from process.cwd\n\t\t\tif (!config) return stylelint._fullExplorer.search(process.cwd());\n\n\t\t\treturn config;\n\t\t})\n\t\t.then((config) => {\n\t\t\tif (!config) {\n\t\t\t\tconst ending = searchPath ? ` for ${searchPath}` : '';\n\n\t\t\t\tthrow configurationError(`No configuration provided${ending}`);\n\t\t\t}\n\n\t\t\treturn config;\n\t\t}));\n};\n"]},"metadata":{},"sourceType":"script"}