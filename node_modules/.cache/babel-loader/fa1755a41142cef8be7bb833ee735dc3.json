{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\n\nconst report = require('../utils/report');\n\nconst styleSearch = require('style-search');\n\nmodule.exports = function (opts) {\n  opts.root.walkAtRules(/^media$/i, atRule => {\n    const params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n    styleSearch({\n      source: params,\n      target: ','\n    }, match => {\n      let index = match.startIndex;\n\n      if (opts.allowTrailingComments) {\n        // if there is a comment on the same line at after the comma, check the space after the comment.\n        let execResult;\n\n        while (execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1))) {\n          index += execResult[0].length;\n        }\n\n        if (execResult = /^([^\\S\\r\\n]*\\/\\/([\\s\\S]*?))\\r?\\n/.exec(params.slice(index + 1))) {\n          index += execResult[1].length;\n        }\n      }\n\n      checkComma(params, index, atRule);\n    });\n  });\n\n  function checkComma(source, index, node) {\n    opts.locationChecker({\n      source,\n      index,\n      err: m => {\n        const commaIndex = index + atRuleParamIndex(node);\n\n        if (opts.fix && opts.fix(node, commaIndex)) {\n          return;\n        }\n\n        report({\n          message: m,\n          node,\n          index: commaIndex,\n          result: opts.result,\n          ruleName: opts.checkedRuleName\n        });\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js"],"names":["atRuleParamIndex","require","report","styleSearch","module","exports","opts","root","walkAtRules","atRule","params","raws","raw","source","target","match","index","startIndex","allowTrailingComments","execResult","exec","slice","length","checkComma","node","locationChecker","err","m","commaIndex","fix","message","result","ruleName","checkedRuleName"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,2BAAD,CAAhC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAChCA,EAAAA,IAAI,CAACC,IAAL,CAAUC,WAAV,CAAsB,UAAtB,EAAmCC,MAAD,IAAY;AAC7C,UAAMC,MAAM,GAAGD,MAAM,CAACE,IAAP,CAAYD,MAAZ,GAAqBD,MAAM,CAACE,IAAP,CAAYD,MAAZ,CAAmBE,GAAxC,GAA8CH,MAAM,CAACC,MAApE;AAEAP,IAAAA,WAAW,CAAC;AAAEU,MAAAA,MAAM,EAAEH,MAAV;AAAkBI,MAAAA,MAAM,EAAE;AAA1B,KAAD,EAAmCC,KAAD,IAAW;AACvD,UAAIC,KAAK,GAAGD,KAAK,CAACE,UAAlB;;AAEA,UAAIX,IAAI,CAACY,qBAAT,EAAgC;AAC/B;AACA,YAAIC,UAAJ;;AAEA,eAAQA,UAAU,GAAG,gCAAgCC,IAAhC,CAAqCV,MAAM,CAACW,KAAP,CAAaL,KAAK,GAAG,CAArB,CAArC,CAArB,EAAqF;AACpFA,UAAAA,KAAK,IAAIG,UAAU,CAAC,CAAD,CAAV,CAAcG,MAAvB;AACA;;AAED,YAAKH,UAAU,GAAG,mCAAmCC,IAAnC,CAAwCV,MAAM,CAACW,KAAP,CAAaL,KAAK,GAAG,CAArB,CAAxC,CAAlB,EAAqF;AACpFA,UAAAA,KAAK,IAAIG,UAAU,CAAC,CAAD,CAAV,CAAcG,MAAvB;AACA;AACD;;AAEDC,MAAAA,UAAU,CAACb,MAAD,EAASM,KAAT,EAAgBP,MAAhB,CAAV;AACA,KAjBU,CAAX;AAkBA,GArBD;;AAuBA,WAASc,UAAT,CAAoBV,MAApB,EAA4BG,KAA5B,EAAmCQ,IAAnC,EAAyC;AACxClB,IAAAA,IAAI,CAACmB,eAAL,CAAqB;AACpBZ,MAAAA,MADoB;AAEpBG,MAAAA,KAFoB;AAGpBU,MAAAA,GAAG,EAAGC,CAAD,IAAO;AACX,cAAMC,UAAU,GAAGZ,KAAK,GAAGhB,gBAAgB,CAACwB,IAAD,CAA3C;;AAEA,YAAIlB,IAAI,CAACuB,GAAL,IAAYvB,IAAI,CAACuB,GAAL,CAASL,IAAT,EAAeI,UAAf,CAAhB,EAA4C;AAC3C;AACA;;AAED1B,QAAAA,MAAM,CAAC;AACN4B,UAAAA,OAAO,EAAEH,CADH;AAENH,UAAAA,IAFM;AAGNR,UAAAA,KAAK,EAAEY,UAHD;AAING,UAAAA,MAAM,EAAEzB,IAAI,CAACyB,MAJP;AAKNC,UAAAA,QAAQ,EAAE1B,IAAI,CAAC2B;AALT,SAAD,CAAN;AAOA;AAjBmB,KAArB;AAmBA;AACD,CA7CD","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../utils/atRuleParamIndex');\nconst report = require('../utils/report');\nconst styleSearch = require('style-search');\n\nmodule.exports = function (opts) {\n\topts.root.walkAtRules(/^media$/i, (atRule) => {\n\t\tconst params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;\n\n\t\tstyleSearch({ source: params, target: ',' }, (match) => {\n\t\t\tlet index = match.startIndex;\n\n\t\t\tif (opts.allowTrailingComments) {\n\t\t\t\t// if there is a comment on the same line at after the comma, check the space after the comment.\n\t\t\t\tlet execResult;\n\n\t\t\t\twhile ((execResult = /^[^\\S\\r\\n]*\\/\\*([\\s\\S]*?)\\*\\//.exec(params.slice(index + 1)))) {\n\t\t\t\t\tindex += execResult[0].length;\n\t\t\t\t}\n\n\t\t\t\tif ((execResult = /^([^\\S\\r\\n]*\\/\\/([\\s\\S]*?))\\r?\\n/.exec(params.slice(index + 1)))) {\n\t\t\t\t\tindex += execResult[1].length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckComma(params, index, atRule);\n\t\t});\n\t});\n\n\tfunction checkComma(source, index, node) {\n\t\topts.locationChecker({\n\t\t\tsource,\n\t\t\tindex,\n\t\t\terr: (m) => {\n\t\t\t\tconst commaIndex = index + atRuleParamIndex(node);\n\n\t\t\t\tif (opts.fix && opts.fix(node, commaIndex)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: m,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: commaIndex,\n\t\t\t\t\tresult: opts.result,\n\t\t\t\t\truleName: opts.checkedRuleName,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}