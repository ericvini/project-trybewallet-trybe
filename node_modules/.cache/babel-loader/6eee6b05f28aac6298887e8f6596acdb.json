{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _sliceAnsi = _interopRequireDefault(require(\"slice-ansi\"));\n\nvar _stringWidth = _interopRequireDefault(require(\"string-width\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @param {string} input\n * @param {number} size\n * @returns {Array}\n */\n\n\nconst wrapWord = (input, size) => {\n  let subject;\n  subject = input;\n  const chunks = []; // https://regex101.com/r/gY5kZ1/1\n\n  const re = new RegExp('(^.{1,' + size + '}(\\\\s+|$))|(^.{1,' + (size - 1) + '}(\\\\\\\\|/|_|\\\\.|,|;|-))');\n\n  do {\n    let chunk;\n    chunk = subject.match(re);\n\n    if (chunk) {\n      chunk = chunk[0];\n      subject = (0, _sliceAnsi.default)(subject, (0, _stringWidth.default)(chunk));\n      chunk = chunk.trim();\n    } else {\n      chunk = (0, _sliceAnsi.default)(subject, 0, size);\n      subject = (0, _sliceAnsi.default)(subject, size);\n    }\n\n    chunks.push(chunk);\n  } while ((0, _stringWidth.default)(subject));\n\n  return chunks;\n};\n\nvar _default = wrapWord;\nexports.default = _default;","map":{"version":3,"sources":["../src/wrapWord.js"],"names":["input","size","subject","chunks","re","chunk"],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;kBACgBA,K,EAAOC,I,KAAS;AAC9B,MAAA,OAAA;AAEAC,EAAAA,OAAO,GAAPA,KAAAA;AAEA,QAAMC,MAAM,GALkB,EAK9B,CAL8B,CAO9B;;AACA,QAAMC,EAAE,GAAG,IAAA,MAAA,CAAW,WAAA,IAAA,GAAA,mBAAA,IAAyCH,IAAI,GAA7C,CAAA,IAAtB,wBAAW,CAAX;;AAEA,KAAG;AACD,QAAA,KAAA;AAEAI,IAAAA,KAAK,GAAGH,OAAO,CAAPA,KAAAA,CAARG,EAAQH,CAARG;;AAEA,QAAA,KAAA,EAAW;AACTA,MAAAA,KAAK,GAAGA,KAAK,CAAbA,CAAa,CAAbA;AAEAH,MAAAA,OAAO,GAAG,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,OAAA,EAAe,CAAA,GAAA,YAAA,CAAA,OAAA,EAAzBA,KAAyB,CAAf,CAAVA;AAEAG,MAAAA,KAAK,GAAGA,KAAK,CAAbA,IAAQA,EAARA;AALF,KAAA,MAMO;AACLA,MAAAA,KAAK,GAAG,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAARA,IAAQ,CAARA;AACAH,MAAAA,OAAO,GAAG,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,OAAA,EAAVA,IAAU,CAAVA;AACD;;AAEDC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AAhBF,GAAA,QAiBS,CAAA,GAAA,YAAA,CAAA,OAAA,EAjBT,OAiBS,CAjBT;;AAmBA,SAAA,MAAA","sourcesContent":["import slice from 'slice-ansi';\nimport stringWidth from 'string-width';\n\n/**\n * @param {string} input\n * @param {number} size\n * @returns {Array}\n */\nexport default (input, size) => {\n  let subject;\n\n  subject = input;\n\n  const chunks = [];\n\n  // https://regex101.com/r/gY5kZ1/1\n  const re = new RegExp('(^.{1,' + size + '}(\\\\s+|$))|(^.{1,' + (size - 1) + '}(\\\\\\\\|/|_|\\\\.|,|;|-))');\n\n  do {\n    let chunk;\n\n    chunk = subject.match(re);\n\n    if (chunk) {\n      chunk = chunk[0];\n\n      subject = slice(subject, stringWidth(chunk));\n\n      chunk = chunk.trim();\n    } else {\n      chunk = slice(subject, 0, size);\n      subject = slice(subject, size);\n    }\n\n    chunks.push(chunk);\n  } while (stringWidth(subject));\n\n  return chunks;\n};\n"]},"metadata":{},"sourceType":"script"}