{"ast":null,"code":"'use strict';\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\n\nmodule.exports = function (atRule) {\n  // Ignore scss `@content` inside mixins\n  if (!atRule.nodes && atRule.params === '') {\n    return false;\n  } // Ignore Less mixins\n\n\n  if ('mixin' in atRule && atRule.mixin) {\n    return false;\n  } // Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\n\n  if ('variable' in atRule && atRule.variable || !atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(') {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.js"],"names":["module","exports","atRule","nodes","params","mixin","variable","raws","afterName"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;AAClC;AACA,MAAI,CAACA,MAAM,CAACC,KAAR,IAAiBD,MAAM,CAACE,MAAP,KAAkB,EAAvC,EAA2C;AAC1C,WAAO,KAAP;AACA,GAJiC,CAMlC;;;AACA,MAAI,WAAWF,MAAX,IAAqBA,MAAM,CAACG,KAAhC,EAAuC;AACtC,WAAO,KAAP;AACA,GATiC,CAWlC;;;AACA,MACE,cAAcH,MAAd,IAAwBA,MAAM,CAACI,QAAhC,IACC,CAACJ,MAAM,CAACC,KAAR,IAAiBD,MAAM,CAACK,IAAP,CAAYC,SAAZ,KAA0B,EAA3C,IAAiDN,MAAM,CAACE,MAAP,CAAc,CAAd,MAAqB,GAFxE,EAGE;AACD,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA,CApBD","sourcesContent":["'use strict';\n\n/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @return {boolean} If `true`, the declaration is standard\n */\nmodule.exports = function (atRule) {\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"]},"metadata":{},"sourceType":"script"}