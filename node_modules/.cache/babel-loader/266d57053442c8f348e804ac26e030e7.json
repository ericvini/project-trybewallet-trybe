{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /(\\r?\\n)/;\nconst messages = ruleMessages(ruleName, {\n  rejected: 'Unexpected newline in string'\n});\n\nfunction rule(actual) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walk(node => {\n      switch (node.type) {\n        case 'atrule':\n          checkDeclOrAtRule(node, node.params, atRuleParamIndex);\n          break;\n\n        case 'decl':\n          checkDeclOrAtRule(node, node.value, declarationValueIndex);\n          break;\n\n        case 'rule':\n          checkRule(node);\n          break;\n      }\n    }); // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n    function checkRule(rule) {\n      // Get out quickly if there are no new line\n      if (!reNewLine.test(rule.selector)) {\n        return;\n      }\n\n      if (!isStandardSyntaxSelector(rule.selector)) {\n        return;\n      }\n\n      parseSelector(rule.selector, result, rule, selectorTree => {\n        selectorTree.walkAttributes(attributeNode => {\n          if (!reNewLine.test(attributeNode.value)) {\n            return;\n          }\n\n          const openIndex = [// length of our attribute\n          attributeNode.attribute, // length of our operator , ie '='\n          attributeNode.operator, // length of the contents before newline\n          RegExp.leftContext].reduce((index, str) => index + str.length, // index of the start of our attribute node in our source\n          attributeNode.sourceIndex);\n          report({\n            message: messages.rejected,\n            node: rule,\n            index: openIndex,\n            result,\n            ruleName\n          });\n        });\n      });\n    }\n\n    function checkDeclOrAtRule(node, value, getIndex) {\n      // Get out quickly if there are no new line\n      if (!reNewLine.test(value)) {\n        return;\n      }\n\n      valueParser(value).walk(valueNode => {\n        if (valueNode.type !== 'string' || !reNewLine.test(valueNode.value)) {\n          return;\n        }\n\n        const openIndex = [// length of the quote\n        valueNode.quote, // length of the contents before newline\n        RegExp.leftContext].reduce((index, str) => index + str.length, valueNode.sourceIndex);\n        report({\n          message: messages.rejected,\n          node,\n          index: getIndex(node) + openIndex,\n          result,\n          ruleName\n        });\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/string-no-newline/index.js"],"names":["atRuleParamIndex","require","declarationValueIndex","isStandardSyntaxSelector","parseSelector","report","ruleMessages","validateOptions","valueParser","ruleName","reNewLine","messages","rejected","rule","actual","root","result","validOptions","walk","node","type","checkDeclOrAtRule","params","value","checkRule","test","selector","selectorTree","walkAttributes","attributeNode","openIndex","attribute","operator","RegExp","leftContext","reduce","index","str","length","sourceIndex","message","getIndex","valueNode","quote","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'string-no-newline';\nconst reNewLine = /(\\r?\\n)/;\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected newline in string',\n});\n\nfunction rule(actual) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'atrule':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.params, atRuleParamIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decl':\n\t\t\t\t\tcheckDeclOrAtRule(node, node.value, declarationValueIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rule':\n\t\t\t\t\tcheckRule(node);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\tfunction checkRule(rule) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(rule.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(rule.selector, result, rule, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!reNewLine.test(attributeNode.value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst openIndex = [\n\t\t\t\t\t\t// length of our attribute\n\t\t\t\t\t\tattributeNode.attribute,\n\t\t\t\t\t\t// length of our operator , ie '='\n\t\t\t\t\t\tattributeNode.operator,\n\t\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\t\tRegExp.leftContext,\n\t\t\t\t\t].reduce(\n\t\t\t\t\t\t(index, str) => index + str.length,\n\t\t\t\t\t\t// index of the start of our attribute node in our source\n\t\t\t\t\t\tattributeNode.sourceIndex,\n\t\t\t\t\t);\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tindex: openIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tfunction checkDeclOrAtRule(node, value, getIndex) {\n\t\t\t// Get out quickly if there are no new line\n\t\t\tif (!reNewLine.test(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'string' || !reNewLine.test(valueNode.value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst openIndex = [\n\t\t\t\t\t// length of the quote\n\t\t\t\t\tvalueNode.quote,\n\t\t\t\t\t// length of the contents before newline\n\t\t\t\t\tRegExp.leftContext,\n\t\t\t\t].reduce((index, str) => index + str.length, valueNode.sourceIndex);\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode,\n\t\t\t\t\tindex: getIndex(node) + openIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}