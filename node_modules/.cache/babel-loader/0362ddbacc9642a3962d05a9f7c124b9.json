{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst configurationError = require('./utils/configurationError');\n\nconst getModulePath = require('./utils/getModulePath');\n\nconst globjoin = require('globjoin');\n\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\n\nconst path = require('path');\n/** @typedef {import('stylelint').StylelintConfigPlugins} StylelintConfigPlugins */\n\n/** @typedef {import('stylelint').StylelintConfigProcessor} StylelintConfigProcessor */\n\n/** @typedef {import('stylelint').StylelintConfigProcessors} StylelintConfigProcessors */\n\n/** @typedef {import('stylelint').StylelintConfigRules} StylelintConfigRules */\n\n/** @typedef {import('stylelint').StylelintInternalApi} StylelintInternalApi */\n\n/** @typedef {import('stylelint').StylelintConfig} StylelintConfig */\n\n/** @typedef {import('stylelint').CosmiconfigResult} CosmiconfigResult */\n\n/**\n * - Merges config and configOverrides\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} [allowOverrides]\n * @returns {Promise<StylelintConfig>}\n */\n\n\nfunction augmentConfigBasic(stylelint, config, configDir, allowOverrides) {\n  return Promise.resolve().then(() => {\n    if (!allowOverrides) return config;\n    return _.merge(config, stylelint._options.configOverrides);\n  }).then(augmentedConfig => {\n    return extendConfig(stylelint, augmentedConfig, configDir);\n  }).then(augmentedConfig => {\n    return absolutizePaths(augmentedConfig, configDir);\n  });\n}\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {StylelintInternalApi} stylelint\n * @param {CosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<CosmiconfigResult | null>}\n */\n\n\nfunction augmentConfigExtended(stylelint, cosmiconfigResult) {\n  if (!cosmiconfigResult) return Promise.resolve(null);\n  const configDir = path.dirname(cosmiconfigResult.filepath || '');\n  const {\n    ignoreFiles,\n    ...cleanedConfig\n  } = cosmiconfigResult.config;\n  return augmentConfigBasic(stylelint, cleanedConfig, configDir).then(augmentedConfig => {\n    return {\n      config: augmentedConfig,\n      filepath: cosmiconfigResult.filepath\n    };\n  });\n}\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {CosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<CosmiconfigResult | null>}\n */\n\n\nfunction augmentConfigFull(stylelint, cosmiconfigResult) {\n  if (!cosmiconfigResult) return Promise.resolve(null);\n  const config = cosmiconfigResult.config;\n  const filepath = cosmiconfigResult.filepath;\n  const configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n  return augmentConfigBasic(stylelint, config, configDir, true).then(augmentedConfig => {\n    return addPluginFunctions(augmentedConfig);\n  }).then(augmentedConfig => {\n    return addProcessorFunctions(augmentedConfig);\n  }).then(augmentedConfig => {\n    if (!augmentedConfig.rules) {\n      throw configurationError('No rules found within configuration. Have you provided a \"rules\" property?');\n    }\n\n    return normalizeAllRuleSettings(augmentedConfig);\n  }).then(augmentedConfig => {\n    return {\n      config: augmentedConfig,\n      filepath: cosmiconfigResult.filepath\n    };\n  });\n}\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @returns {StylelintConfig}\n */\n\n\nfunction absolutizePaths(config, configDir) {\n  if (config.ignoreFiles) {\n    config.ignoreFiles =\n    /** @type {string[]} */\n    [].concat(config.ignoreFiles).map(glob => {\n      if (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n      return globjoin(configDir, glob);\n    });\n  }\n\n  if (config.plugins) {\n    config.plugins =\n    /** @type {string[]} */\n    [].concat(config.plugins).map(lookup => {\n      return getModulePath(configDir, lookup);\n    });\n  }\n\n  if (config.processors) {\n    config.processors = absolutizeProcessors(config.processors, configDir);\n  }\n\n  return config;\n}\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\n\n\nfunction absolutizeProcessors(processors, configDir) {\n  const normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n  return normalizedProcessors.map(item => {\n    if (typeof item === 'string') {\n      return getModulePath(configDir, item);\n    }\n\n    return [getModulePath(configDir, item[0]), item[1]];\n  });\n}\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @return {Promise<StylelintConfig>}\n */\n\n\nfunction extendConfig(stylelint, config, configDir) {\n  if (config.extends === undefined) return Promise.resolve(config);\n  const normalizedExtends = Array.isArray(config.extends) ? config.extends : [config.extends];\n  const {\n    extends: configExtends,\n    ...originalWithoutExtends\n  } = config;\n  const loadExtends = normalizedExtends.reduce((resultPromise, extendLookup) => {\n    return resultPromise.then(resultConfig => {\n      return loadExtendedConfig(stylelint, resultConfig, configDir, extendLookup).then(extendResult => {\n        if (!extendResult) return resultConfig;\n        return mergeConfigs(resultConfig, extendResult.config);\n      });\n    });\n  }, Promise.resolve(originalWithoutExtends));\n  return loadExtends.then(resultConfig => {\n    return mergeConfigs(resultConfig, originalWithoutExtends);\n  });\n}\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<CosmiconfigResult | null>}\n */\n\n\nfunction loadExtendedConfig(stylelint, config, configDir, extendLookup) {\n  const extendPath = getModulePath(configDir, extendLookup);\n  return stylelint._extendExplorer.load(extendPath);\n}\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\n\n\nfunction mergeConfigs(a, b) {\n  /** @type {{plugins: StylelintConfigPlugins}} */\n  const pluginMerger = {};\n\n  if (a.plugins || b.plugins) {\n    pluginMerger.plugins = [];\n\n    if (a.plugins) {\n      pluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n    }\n\n    if (b.plugins) {\n      pluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n    }\n  }\n  /** @type {{processors: StylelintConfigProcessors}} */\n\n\n  const processorMerger = {};\n\n  if (a.processors || b.processors) {\n    processorMerger.processors = [];\n\n    if (a.processors) {\n      processorMerger.processors = processorMerger.processors.concat(a.processors);\n    }\n\n    if (b.processors) {\n      processorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n    }\n  }\n\n  const rulesMerger = {};\n\n  if (a.rules || b.rules) {\n    rulesMerger.rules = { ...a.rules,\n      ...b.rules\n    };\n  }\n\n  const result = { ...a,\n    ...b,\n    ...processorMerger,\n    ...pluginMerger,\n    ...rulesMerger\n  };\n  return result;\n}\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\n\n\nfunction addPluginFunctions(config) {\n  if (!config.plugins) return config;\n  const normalizedPlugins = Array.isArray(config.plugins) ? config.plugins : [config.plugins];\n  const pluginFunctions = normalizedPlugins.reduce((result, pluginLookup) => {\n    let pluginImport = require(pluginLookup); // Handle either ES6 or CommonJS modules\n\n\n    pluginImport = pluginImport.default || pluginImport; // A plugin can export either a single rule definition\n    // or an array of them\n\n    const normalizedPluginImport = Array.isArray(pluginImport) ? pluginImport : [pluginImport];\n    normalizedPluginImport.forEach(pluginRuleDefinition => {\n      if (!pluginRuleDefinition.ruleName) {\n        throw configurationError('stylelint v3+ requires plugins to expose a ruleName. ' + `The plugin \"${pluginLookup}\" is not doing this, so will not work ` + 'with stylelint v3+. Please file an issue with the plugin.');\n      }\n\n      if (!pluginRuleDefinition.ruleName.includes('/')) {\n        throw configurationError('stylelint v7+ requires plugin rules to be namespaced, ' + 'i.e. only `plugin-namespace/plugin-rule-name` plugin rule names are supported. ' + `The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. ` + 'Please file an issue with the plugin.');\n      }\n\n      result[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n    });\n    return result;\n  },\n  /** @type {{[k: string]: Function}} */\n  {});\n  config.pluginFunctions = pluginFunctions;\n  return config;\n}\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\n\n\nconst processorCache = new Map();\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\n\nfunction addProcessorFunctions(config) {\n  if (!config.processors) return config;\n  /** @type {Array<Function>} */\n\n  const codeProcessors = [];\n  /** @type {Array<Function>} */\n\n  const resultProcessors = [];\n  /** @type {Array<StylelintConfigProcessor>} */\n\n  [].concat(config.processors).forEach(processorConfig => {\n    const processorKey = JSON.stringify(processorConfig);\n    let initializedProcessor;\n\n    if (processorCache.has(processorKey)) {\n      initializedProcessor = processorCache.get(processorKey);\n    } else {\n      const processorLookup = typeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n      const processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\n      let processor = require(processorLookup);\n\n      processor = processor.default || processor;\n      initializedProcessor = processor(processorOptions);\n      processorCache.set(processorKey, initializedProcessor);\n    }\n\n    if (initializedProcessor && initializedProcessor.code) {\n      codeProcessors.push(initializedProcessor.code);\n    }\n\n    if (initializedProcessor && initializedProcessor.result) {\n      resultProcessors.push(initializedProcessor.result);\n    }\n  });\n  config.codeProcessors = codeProcessors;\n  config.resultProcessors = resultProcessors;\n  return config;\n}\n\nmodule.exports = {\n  augmentConfigExtended,\n  augmentConfigFull\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/augmentConfig.js"],"names":["_","require","configurationError","getModulePath","globjoin","normalizeAllRuleSettings","path","augmentConfigBasic","stylelint","config","configDir","allowOverrides","Promise","resolve","then","merge","_options","configOverrides","augmentedConfig","extendConfig","absolutizePaths","augmentConfigExtended","cosmiconfigResult","dirname","filepath","ignoreFiles","cleanedConfig","augmentConfigFull","configBasedir","addPluginFunctions","addProcessorFunctions","rules","concat","map","glob","isAbsolute","replace","plugins","lookup","processors","absolutizeProcessors","normalizedProcessors","Array","isArray","item","extends","undefined","normalizedExtends","configExtends","originalWithoutExtends","loadExtends","reduce","resultPromise","extendLookup","resultConfig","loadExtendedConfig","extendResult","mergeConfigs","extendPath","_extendExplorer","load","a","b","pluginMerger","Set","processorMerger","rulesMerger","result","normalizedPlugins","pluginFunctions","pluginLookup","pluginImport","default","normalizedPluginImport","forEach","pluginRuleDefinition","ruleName","includes","rule","processorCache","Map","codeProcessors","resultProcessors","processorConfig","processorKey","JSON","stringify","initializedProcessor","has","get","processorLookup","processorOptions","processor","set","code","push","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst path = require('path');\n\n/** @typedef {import('stylelint').StylelintConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').StylelintConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').StylelintConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').StylelintConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').StylelintInternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').StylelintConfig} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} CosmiconfigResult */\n\n/**\n * - Merges config and configOverrides\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} [allowOverrides]\n * @returns {Promise<StylelintConfig>}\n */\nfunction augmentConfigBasic(stylelint, config, configDir, allowOverrides) {\n\treturn Promise.resolve()\n\t\t.then(() => {\n\t\t\tif (!allowOverrides) return config;\n\n\t\t\treturn _.merge(config, stylelint._options.configOverrides);\n\t\t})\n\t\t.then((augmentedConfig) => {\n\t\t\treturn extendConfig(stylelint, augmentedConfig, configDir);\n\t\t})\n\t\t.then((augmentedConfig) => {\n\t\t\treturn absolutizePaths(augmentedConfig, configDir);\n\t\t});\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {StylelintInternalApi} stylelint\n * @param {CosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<CosmiconfigResult | null>}\n */\nfunction augmentConfigExtended(stylelint, cosmiconfigResult) {\n\tif (!cosmiconfigResult) return Promise.resolve(null);\n\n\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\tconst { ignoreFiles, ...cleanedConfig } = cosmiconfigResult.config;\n\n\treturn augmentConfigBasic(stylelint, cleanedConfig, configDir).then((augmentedConfig) => {\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {CosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<CosmiconfigResult | null>}\n */\nfunction augmentConfigFull(stylelint, cosmiconfigResult) {\n\tif (!cosmiconfigResult) return Promise.resolve(null);\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\treturn augmentConfigBasic(stylelint, config, configDir, true)\n\t\t.then((augmentedConfig) => {\n\t\t\treturn addPluginFunctions(augmentedConfig);\n\t\t})\n\t\t.then((augmentedConfig) => {\n\t\t\treturn addProcessorFunctions(augmentedConfig);\n\t\t})\n\t\t.then((augmentedConfig) => {\n\t\t\tif (!augmentedConfig.rules) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn normalizeAllRuleSettings(augmentedConfig);\n\t\t})\n\t\t.then((augmentedConfig) => {\n\t\t\treturn {\n\t\t\t\tconfig: augmentedConfig,\n\t\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t\t};\n\t\t});\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = /** @type {string[]} */ ([]).concat(config.ignoreFiles).map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = /** @type {string[]} */ ([]).concat(config.plugins).map((lookup) => {\n\t\t\treturn getModulePath(configDir, lookup);\n\t\t});\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @return {Promise<StylelintConfig>}\n */\nfunction extendConfig(stylelint, config, configDir) {\n\tif (config.extends === undefined) return Promise.resolve(config);\n\n\tconst normalizedExtends = Array.isArray(config.extends) ? config.extends : [config.extends];\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\n\tconst loadExtends = normalizedExtends.reduce((resultPromise, extendLookup) => {\n\t\treturn resultPromise.then((resultConfig) => {\n\t\t\treturn loadExtendedConfig(stylelint, resultConfig, configDir, extendLookup).then(\n\t\t\t\t(extendResult) => {\n\t\t\t\t\tif (!extendResult) return resultConfig;\n\n\t\t\t\t\treturn mergeConfigs(resultConfig, extendResult.config);\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}, Promise.resolve(originalWithoutExtends));\n\n\treturn loadExtends.then((resultConfig) => {\n\t\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<CosmiconfigResult | null>}\n */\nfunction loadExtendedConfig(stylelint, config, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = { ...a, ...b, ...processorMerger, ...pluginMerger, ...rulesMerger };\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) return config;\n\n\tconst normalizedPlugins = Array.isArray(config.plugins) ? config.plugins : [config.plugins];\n\n\tconst pluginFunctions = normalizedPlugins.reduce((result, pluginLookup) => {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = Array.isArray(pluginImport) ? pluginImport : [pluginImport];\n\n\t\tnormalizedPluginImport.forEach((pluginRuleDefinition) => {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t'stylelint v3+ requires plugins to expose a ruleName. ' +\n\t\t\t\t\t\t`The plugin \"${pluginLookup}\" is not doing this, so will not work ` +\n\t\t\t\t\t\t'with stylelint v3+. Please file an issue with the plugin.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t'stylelint v7+ requires plugin rules to be namespaced, ' +\n\t\t\t\t\t\t'i.e. only `plugin-namespace/plugin-rule-name` plugin rule names are supported. ' +\n\t\t\t\t\t\t`The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. ` +\n\t\t\t\t\t\t'Please file an issue with the plugin.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tresult[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t});\n\n\t\treturn result;\n\t}, /** @type {{[k: string]: Function}} */ ({}));\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {Array<Function>} */\n\tconst codeProcessors = [];\n\t/** @type {Array<Function>} */\n\tconst resultProcessors = [];\n\n\t/** @type {Array<StylelintConfigProcessor>} */ ([])\n\t\t.concat(config.processors)\n\t\t.forEach((processorConfig) => {\n\t\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\t\tlet initializedProcessor;\n\n\t\t\tif (processorCache.has(processorKey)) {\n\t\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t\t} else {\n\t\t\t\tconst processorLookup =\n\t\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\t\tconst processorOptions =\n\t\t\t\t\ttypeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\t\tlet processor = require(processorLookup);\n\n\t\t\t\tprocessor = processor.default || processor;\n\t\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t\t}\n\n\t\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t\t}\n\n\t\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t\t}\n\t\t});\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull };\n"]},"metadata":{},"sourceType":"script"}