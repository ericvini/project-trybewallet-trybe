{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\n\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected single space before \",\"',\n  rejectedBefore: () => 'Unexpected whitespace before \",\"',\n  expectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n  rejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never', 'always-single-line', 'never-single-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    functionCommaSpaceChecker({\n      root,\n      result,\n      locationChecker: checker.before,\n      checkedRuleName: ruleName,\n      fix: context.fix ? (div, index, nodes) => {\n        return fixer({\n          div,\n          index,\n          nodes,\n          expectation,\n          position: 'before',\n          symb: ' '\n        });\n      } : null\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/function-comma-space-before/index.js"],"names":["fixer","require","functionCommaSpaceChecker","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","rejectedBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","locationChecker","before","checkedRuleName","fix","div","index","nodes","position","symb","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMC,yBAAyB,GAAGD,OAAO,CAAC,8BAAD,CAAzC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMK,QAAQ,GAAG,6BAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,cAAc,EAAE,MAAM,kCADiB;AAEvCC,EAAAA,cAAc,EAAE,MAAM,kCAFiB;AAGvCC,EAAAA,wBAAwB,EAAE,MAAM,4DAHO;AAIvCC,EAAAA,wBAAwB,EAAE,MAAM;AAJO,CAAX,CAA7B;;AAOA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC5C,QAAMC,OAAO,GAAGX,iBAAiB,CAAC,OAAD,EAAUQ,WAAV,EAAuBN,QAAvB,CAAjC;AAEA,SAAO,CAACU,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGf,eAAe,CAACc,MAAD,EAASZ,QAAT,EAAmB;AACtDc,MAAAA,MAAM,EAAEP,WAD8C;AAEtDQ,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,oBAApB,EAA0C,mBAA1C;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDjB,IAAAA,yBAAyB,CAAC;AACzBe,MAAAA,IADyB;AAEzBC,MAAAA,MAFyB;AAGzBI,MAAAA,eAAe,EAAEN,OAAO,CAACO,MAHA;AAIzBC,MAAAA,eAAe,EAAElB,QAJQ;AAKzBmB,MAAAA,GAAG,EAAEV,OAAO,CAACU,GAAR,GACF,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAuB;AACvB,eAAO5B,KAAK,CAAC;AACZ0B,UAAAA,GADY;AAEZC,UAAAA,KAFY;AAGZC,UAAAA,KAHY;AAIZf,UAAAA,WAJY;AAKZgB,UAAAA,QAAQ,EAAE,QALE;AAMZC,UAAAA,IAAI,EAAE;AANM,SAAD,CAAZ;AAQC,OAVC,GAWF;AAhBsB,KAAD,CAAzB;AAkBA,GA5BD;AA6BA;;AAEDlB,IAAI,CAACN,QAAL,GAAgBA,QAAhB;AACAM,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAwB,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst fixer = require('../functionCommaSpaceFix');\nconst functionCommaSpaceChecker = require('../functionCommaSpaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'function-comma-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \",\"',\n\trejectedBefore: () => 'Unexpected whitespace before \",\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \",\" in a single-line function',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \",\" in a single-line function',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunctionCommaSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (div, index, nodes) => {\n\t\t\t\t\t\treturn fixer({\n\t\t\t\t\t\t\tdiv,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\texpectation,\n\t\t\t\t\t\t\tposition: 'before',\n\t\t\t\t\t\t\tsymb: ' ',\n\t\t\t\t\t\t});\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}