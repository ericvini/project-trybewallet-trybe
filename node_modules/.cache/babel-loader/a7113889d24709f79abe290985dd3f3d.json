{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-blacklist';\nconst messages = ruleMessages(ruleName, {\n  rejected: name => `Unexpected function \"${name}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString, _.isRegExp]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'function-disallowed-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n    root.walkDecls(decl => {\n      const value = decl.value;\n      valueParser(value).walk(node => {\n        if (node.type !== 'function') {\n          return;\n        }\n\n        if (!isStandardSyntaxFunction(node)) {\n          return;\n        }\n\n        if (!matchesStringOrRegExp(vendor.unprefixed(node.value), list)) {\n          return;\n        }\n\n        report({\n          message: messages.rejected(node.value),\n          node: decl,\n          index: declarationValueIndex(decl) + node.sourceIndex,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/function-blacklist/index.js"],"names":["_","require","declarationValueIndex","isStandardSyntaxFunction","matchesStringOrRegExp","report","ruleMessages","validateOptions","valueParser","vendor","ruleName","messages","rejected","name","rule","list","root","result","validOptions","actual","possible","isString","isRegExp","warn","stylelintType","stylelintReference","walkDecls","decl","value","walk","node","type","unprefixed","message","index","sourceIndex","primaryOptionArray","meta","deprecated","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAME,wBAAwB,GAAGF,OAAO,CAAC,sCAAD,CAAxC;;AACA,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMO,WAAW,GAAGP,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMS,QAAQ,GAAG,oBAAjB;AAEA,MAAMC,QAAQ,GAAGL,YAAY,CAACI,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,IAAD,IAAW,wBAAuBA,IAAK;AADV,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAACpB,CAAC,CAACqB,QAAH,EAAarB,CAAC,CAACsB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAEDD,IAAAA,MAAM,CAACM,IAAP,CAAa,IAAGb,QAAS,gEAAzB,EAA0F;AACzFc,MAAAA,aAAa,EAAE,aAD0E;AAEzFC,MAAAA,kBAAkB,EAAG,gEAA+Df,QAAS;AAFJ,KAA1F;AAKAM,IAAAA,IAAI,CAACU,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;AAEApB,MAAAA,WAAW,CAACoB,KAAD,CAAX,CAAmBC,IAAnB,CAAyBC,IAAD,IAAU;AACjC,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC7B;AACA;;AAED,YAAI,CAAC5B,wBAAwB,CAAC2B,IAAD,CAA7B,EAAqC;AACpC;AACA;;AAED,YAAI,CAAC1B,qBAAqB,CAACK,MAAM,CAACuB,UAAP,CAAkBF,IAAI,CAACF,KAAvB,CAAD,EAAgCb,IAAhC,CAA1B,EAAiE;AAChE;AACA;;AAEDV,QAAAA,MAAM,CAAC;AACN4B,UAAAA,OAAO,EAAEtB,QAAQ,CAACC,QAAT,CAAkBkB,IAAI,CAACF,KAAvB,CADH;AAENE,UAAAA,IAAI,EAAEH,IAFA;AAGNO,UAAAA,KAAK,EAAEhC,qBAAqB,CAACyB,IAAD,CAArB,GAA8BG,IAAI,CAACK,WAHpC;AAINlB,UAAAA,MAJM;AAKNP,UAAAA;AALM,SAAD,CAAN;AAOA,OApBD;AAqBA,KAxBD;AAyBA,GAxCD;AAyCA;;AAEDI,IAAI,CAACsB,kBAAL,GAA0B,IAA1B;AAEAtB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAG,IAAI,CAACuB,IAAL,GAAY;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isStandardSyntaxFunction = require('../../utils/isStandardSyntaxFunction');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-blacklist';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected function \"${name}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString, _.isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(`'${ruleName}' has been deprecated. Instead use 'function-disallowed-list'.`, {\n\t\t\tstylelintType: 'deprecation',\n\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t});\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst value = decl.value;\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\tif (node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxFunction(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!matchesStringOrRegExp(vendor.unprefixed(node.value), list)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(node.value),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}