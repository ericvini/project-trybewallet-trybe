{"ast":null,"code":"'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('postcss').NodeSource} NodeSource */\n\n/** @typedef {import('stylelint').StylelintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').StylelintInternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').StylelintCssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\n\n\nmodule.exports = function (stylelint, postcssResult, filePath, cssSyntaxError) {\n  let stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n  return stylelint.getConfigForFile(filePath).then(configForFile => {\n    // TODO TYPES handle possible null here\n    const config =\n    /** @type {{ config: import('stylelint').StylelintConfig, filepath: string }} */\n    configForFile.config;\n    const file = stylelintResult.source || cssSyntaxError && cssSyntaxError.file;\n\n    if (config.resultProcessors) {\n      config.resultProcessors.forEach(resultProcessor => {\n        // Result processors might just mutate the result object,\n        // or might return a new one\n        const returned = resultProcessor(stylelintResult, file);\n\n        if (returned) {\n          stylelintResult = returned;\n        }\n      });\n    }\n\n    return stylelintResult;\n  });\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/createStylelintResult.js"],"names":["createPartialStylelintResult","require","module","exports","stylelint","postcssResult","filePath","cssSyntaxError","stylelintResult","getConfigForFile","then","configForFile","config","file","source","resultProcessors","forEach","resultProcessor","returned"],"mappings":"AAAA;;AAEA,MAAMA,4BAA4B,GAAGC,OAAO,CAAC,gCAAD,CAA5C;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqBC,aAArB,EAAoCC,QAApC,EAA8CC,cAA9C,EAA8D;AAC9E,MAAIC,eAAe,GAAGR,4BAA4B,CAACK,aAAD,EAAgBE,cAAhB,CAAlD;AAEA,SAAOH,SAAS,CAACK,gBAAV,CAA2BH,QAA3B,EAAqCI,IAArC,CAA2CC,aAAD,IAAmB;AACnE;AACA,UAAMC,MAAM;AAAG;AAAkFD,IAAAA,aAAD,CAC9FC,MADF;AAEA,UAAMC,IAAI,GAAGL,eAAe,CAACM,MAAhB,IAA2BP,cAAc,IAAIA,cAAc,CAACM,IAAzE;;AAEA,QAAID,MAAM,CAACG,gBAAX,EAA6B;AAC5BH,MAAAA,MAAM,CAACG,gBAAP,CAAwBC,OAAxB,CAAiCC,eAAD,IAAqB;AACpD;AACA;AACA,cAAMC,QAAQ,GAAGD,eAAe,CAACT,eAAD,EAAkBK,IAAlB,CAAhC;;AAEA,YAAIK,QAAJ,EAAc;AACbV,UAAAA,eAAe,GAAGU,QAAlB;AACA;AACD,OARD;AASA;;AAED,WAAOV,eAAP;AACA,GAnBM,CAAP;AAoBA,CAvBD","sourcesContent":["'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('postcss').NodeSource} NodeSource */\n/** @typedef {import('stylelint').StylelintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').StylelintInternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').StylelintCssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = function (stylelint, postcssResult, filePath, cssSyntaxError) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\treturn stylelint.getConfigForFile(filePath).then((configForFile) => {\n\t\t// TODO TYPES handle possible null here\n\t\tconst config = /** @type {{ config: import('stylelint').StylelintConfig, filepath: string }} */ (configForFile)\n\t\t\t.config;\n\t\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\t\tif (config.resultProcessors) {\n\t\t\tconfig.resultProcessors.forEach((resultProcessor) => {\n\t\t\t\t// Result processors might just mutate the result object,\n\t\t\t\t// or might return a new one\n\t\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\t\tif (returned) {\n\t\t\t\t\tstylelintResult = returned;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn stylelintResult;\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}