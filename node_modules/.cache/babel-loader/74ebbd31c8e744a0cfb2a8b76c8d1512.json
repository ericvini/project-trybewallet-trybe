{"ast":null,"code":"// @ts-nocheck\n'use strict'; // these algorithms are sourced from https://drafts.csswg.org/css-color/#color-conversion-code\n\nfunction lin_sRGB(RGB) {\n  // convert an array of sRGB values in the range 0.0 - 1.0\n  // to linear light (un-companded) form.\n  // https://en.wikipedia.org/wiki/SRGB\n  return RGB.map(val => {\n    if (val < 0.04045) {\n      return val / 12.92;\n    }\n\n    return Math.pow((val + 0.055) / 1.055, 2.4);\n  });\n}\n\nfunction matrixMultiple3d(matrix, vector) {\n  return [matrix[0][0] * vector[0] + matrix[0][1] * vector[1] + matrix[0][2] * vector[2], matrix[1][0] * vector[0] + matrix[1][1] * vector[1] + matrix[1][2] * vector[2], matrix[2][0] * vector[0] + matrix[2][1] * vector[1] + matrix[2][2] * vector[2]];\n}\n\nfunction srgb2xyz(srgb) {\n  return matrixMultiple3d([[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]], srgb);\n}\n\nfunction chromaticAdaptationD65_D50(xyz) {\n  return matrixMultiple3d([[1.0478112, 0.0228866, -0.050127], [0.0295424, 0.9904844, -0.0170491], [-0.0092345, 0.0150436, 0.7521316]], xyz);\n}\n\nfunction xyz2lab(xyzIn) {\n  // Assuming XYZ is relative to D50, convert to CIE Lab\n  // from CIE standard, which now defines these as a rational fraction\n  const ε = 216 / 24389; // 6^3/29^3\n\n  const κ = 24389 / 27; // 29^3/3^3\n\n  const white = [0.9642, 1.0, 0.8249]; // D50 reference white\n  // compute xyz, which is XYZ scaled relative to reference white\n\n  const xyz = xyzIn.map((value, i) => value / white[i]); // now compute f\n\n  const f = xyz.map(value => {\n    if (value > ε) {\n      return Math.cbrt(value);\n    }\n\n    return (κ * value + 16) / 116;\n  });\n  return [116 * f[1] - 16, // L\n  500 * (f[0] - f[1]), // a\n  200 * (f[1] - f[2]) // b\n  ];\n}\n\nfunction rgb2hsl(r, g, b) {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  let h;\n  let s;\n  let l;\n  const M = Math.max(r, g, b);\n  const m = Math.min(r, g, b);\n  const d = M - m;\n\n  if (d === 0) {\n    h = 0;\n  } else if (M === r) {\n    h = (g - b) / d % 6;\n  } else if (M === g) {\n    h = (b - r) / d + 2;\n  } else {\n    h = (r - g) / d + 4;\n  }\n\n  h *= 60;\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  l = (M + m) / 2;\n\n  if (d === 0) {\n    s = 0;\n  } else {\n    s = d / (1 - Math.abs(2 * l - 1));\n  }\n\n  s *= 100;\n  l *= 100;\n  return [Math.round(h), Math.round(s), Math.round(l)];\n}\n\nfunction rgb2hwb(rgb_r, rgb_g, rgb_b) {\n  rgb_r /= 255;\n  rgb_g /= 255;\n  rgb_b /= 255;\n  const w = Math.min(rgb_r, rgb_g, rgb_b);\n  const v = Math.max(rgb_r, rgb_g, rgb_b);\n  const b = 1 - v;\n\n  if (v === w) {\n    return [0, Math.round(w * 100), Math.round(b * 100)];\n  }\n\n  const f = rgb_r === w ? rgb_g - rgb_b : rgb_g === w ? rgb_b - rgb_r : rgb_r - rgb_g;\n  const i = rgb_r === w ? 3 : rgb_g === w ? 5 : 1;\n  return [Math.round((i - f / (v - w)) / 6 * 360) % 360, Math.round(w * 100), Math.round(b * 100)];\n}\n\nfunction perc255(value) {\n  return `${Math.round(value * 100 / 255)}%`;\n}\n\nfunction generateColorFuncs(hexString) {\n  if (hexString.length !== 7) {\n    throw new Error(`Invalid hex string color definition (${hexString}) - expected 6 character hex string`);\n  }\n\n  const rgb = [0, 0, 0];\n\n  for (let i = 0; i < 3; i += 1) {\n    rgb[i] = parseInt(hexString.substr(2 * i + 1, 2), 16);\n  }\n\n  const hsl = rgb2hsl(rgb[0], rgb[1], rgb[2]);\n  const hwb = rgb2hwb(rgb[0], rgb[1], rgb[2]);\n  const func = [];\n  const rgbStr = `${rgb[0]},${rgb[1]},${rgb[2]}`;\n  const rgbPercStr = `${perc255(rgb[0])},${perc255(rgb[1])},${perc255(rgb[2])}`;\n  const hslStr = `${hsl[0]},${hsl[1]}%,${hsl[2]}%`;\n  const hwbStr = `${hwb[0]},${hwb[1]}%,${hwb[2]}%`; // *very* convoluted process, just to be able to establish if the color\n  // is gray -- or not.\n\n  const linRgb = lin_sRGB([rgb[0] / 255, rgb[1] / 255, rgb[2] / 255]);\n  const xyz_d65 = srgb2xyz(linRgb);\n  const xyz_d50 = chromaticAdaptationD65_D50(xyz_d65);\n  const lab = xyz2lab(xyz_d50);\n  func.push(`rgb(${rgbStr})`);\n  func.push(`rgba(${rgbStr},1)`);\n  func.push(`rgba(${rgbStr},100%)`);\n  func.push(`rgb(${rgbPercStr})`);\n  func.push(`rgba(${rgbPercStr},1)`);\n  func.push(`rgba(${rgbPercStr},100%)`);\n  func.push(`hsl(${hslStr})`);\n  func.push(`hsla(${hslStr},1)`);\n  func.push(`hsla(${hslStr},100%)`);\n  func.push(`hwb(${hwbStr})`);\n  func.push(`hwb(${hwbStr},1)`);\n  func.push(`hwb(${hwbStr},100%)`); // technically, this should be 0 - but then #808080 wouldn't even be gray\n\n  if (lab[1] * lab[1] < 0.01 && lab[2] * lab[2] < 0.01) {\n    // yay! gray!\n    const grayStr = Math.round(lab[0]);\n    func.push(`gray(${grayStr})`);\n    func.push(`gray(${grayStr},1)`);\n    func.push(`gray(${grayStr},100%)`);\n    func.push(`gray(${grayStr}%)`);\n    func.push(`gray(${grayStr}%,1)`);\n    func.push(`gray(${grayStr}%,100%)`);\n  }\n\n  return func;\n}\n\nmodule.exports = generateColorFuncs;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/color-named/generateColorFuncs.js"],"names":["lin_sRGB","RGB","map","val","Math","pow","matrixMultiple3d","matrix","vector","srgb2xyz","srgb","chromaticAdaptationD65_D50","xyz","xyz2lab","xyzIn","ε","κ","white","value","i","f","cbrt","rgb2hsl","r","g","b","h","s","l","M","max","m","min","d","abs","round","rgb2hwb","rgb_r","rgb_g","rgb_b","w","v","perc255","generateColorFuncs","hexString","length","Error","rgb","parseInt","substr","hsl","hwb","func","rgbStr","rgbPercStr","hslStr","hwbStr","linRgb","xyz_d65","xyz_d50","lab","push","grayStr","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\n// these algorithms are sourced from https://drafts.csswg.org/css-color/#color-conversion-code\n\nfunction lin_sRGB(RGB) {\n\t// convert an array of sRGB values in the range 0.0 - 1.0\n\t// to linear light (un-companded) form.\n\t// https://en.wikipedia.org/wiki/SRGB\n\treturn RGB.map((val) => {\n\t\tif (val < 0.04045) {\n\t\t\treturn val / 12.92;\n\t\t}\n\n\t\treturn Math.pow((val + 0.055) / 1.055, 2.4);\n\t});\n}\n\nfunction matrixMultiple3d(matrix, vector) {\n\treturn [\n\t\tmatrix[0][0] * vector[0] + matrix[0][1] * vector[1] + matrix[0][2] * vector[2],\n\t\tmatrix[1][0] * vector[0] + matrix[1][1] * vector[1] + matrix[1][2] * vector[2],\n\t\tmatrix[2][0] * vector[0] + matrix[2][1] * vector[1] + matrix[2][2] * vector[2],\n\t];\n}\n\nfunction srgb2xyz(srgb) {\n\treturn matrixMultiple3d(\n\t\t[\n\t\t\t[0.4124564, 0.3575761, 0.1804375],\n\t\t\t[0.2126729, 0.7151522, 0.072175],\n\t\t\t[0.0193339, 0.119192, 0.9503041],\n\t\t],\n\t\tsrgb,\n\t);\n}\n\nfunction chromaticAdaptationD65_D50(xyz) {\n\treturn matrixMultiple3d(\n\t\t[\n\t\t\t[1.0478112, 0.0228866, -0.050127],\n\t\t\t[0.0295424, 0.9904844, -0.0170491],\n\t\t\t[-0.0092345, 0.0150436, 0.7521316],\n\t\t],\n\t\txyz,\n\t);\n}\n\nfunction xyz2lab(xyzIn) {\n\t// Assuming XYZ is relative to D50, convert to CIE Lab\n\t// from CIE standard, which now defines these as a rational fraction\n\tconst ε = 216 / 24389; // 6^3/29^3\n\tconst κ = 24389 / 27; // 29^3/3^3\n\tconst white = [0.9642, 1.0, 0.8249]; // D50 reference white\n\n\t// compute xyz, which is XYZ scaled relative to reference white\n\tconst xyz = xyzIn.map((value, i) => value / white[i]);\n\n\t// now compute f\n\tconst f = xyz.map((value) => {\n\t\tif (value > ε) {\n\t\t\treturn Math.cbrt(value);\n\t\t}\n\n\t\treturn (κ * value + 16) / 116;\n\t});\n\n\treturn [\n\t\t116 * f[1] - 16, // L\n\t\t500 * (f[0] - f[1]), // a\n\t\t200 * (f[1] - f[2]), // b\n\t];\n}\n\nfunction rgb2hsl(r, g, b) {\n\tr /= 255;\n\tg /= 255;\n\tb /= 255;\n\tlet h;\n\tlet s;\n\tlet l;\n\tconst M = Math.max(r, g, b);\n\tconst m = Math.min(r, g, b);\n\tconst d = M - m;\n\n\tif (d === 0) {\n\t\th = 0;\n\t} else if (M === r) {\n\t\th = ((g - b) / d) % 6;\n\t} else if (M === g) {\n\t\th = (b - r) / d + 2;\n\t} else {\n\t\th = (r - g) / d + 4;\n\t}\n\n\th *= 60;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (M + m) / 2;\n\n\tif (d === 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = d / (1 - Math.abs(2 * l - 1));\n\t}\n\n\ts *= 100;\n\tl *= 100;\n\n\treturn [Math.round(h), Math.round(s), Math.round(l)];\n}\n\nfunction rgb2hwb(rgb_r, rgb_g, rgb_b) {\n\trgb_r /= 255;\n\trgb_g /= 255;\n\trgb_b /= 255;\n\n\tconst w = Math.min(rgb_r, rgb_g, rgb_b);\n\tconst v = Math.max(rgb_r, rgb_g, rgb_b);\n\n\tconst b = 1 - v;\n\n\tif (v === w) {\n\t\treturn [0, Math.round(w * 100), Math.round(b * 100)];\n\t}\n\n\tconst f = rgb_r === w ? rgb_g - rgb_b : rgb_g === w ? rgb_b - rgb_r : rgb_r - rgb_g;\n\tconst i = rgb_r === w ? 3 : rgb_g === w ? 5 : 1;\n\n\treturn [\n\t\tMath.round(((i - f / (v - w)) / 6) * 360) % 360,\n\t\tMath.round(w * 100),\n\t\tMath.round(b * 100),\n\t];\n}\n\nfunction perc255(value) {\n\treturn `${Math.round((value * 100) / 255)}%`;\n}\n\nfunction generateColorFuncs(hexString) {\n\tif (hexString.length !== 7) {\n\t\tthrow new Error(\n\t\t\t`Invalid hex string color definition (${hexString}) - expected 6 character hex string`,\n\t\t);\n\t}\n\n\tconst rgb = [0, 0, 0];\n\n\tfor (let i = 0; i < 3; i += 1) {\n\t\trgb[i] = parseInt(hexString.substr(2 * i + 1, 2), 16);\n\t}\n\n\tconst hsl = rgb2hsl(rgb[0], rgb[1], rgb[2]);\n\tconst hwb = rgb2hwb(rgb[0], rgb[1], rgb[2]);\n\tconst func = [];\n\tconst rgbStr = `${rgb[0]},${rgb[1]},${rgb[2]}`;\n\tconst rgbPercStr = `${perc255(rgb[0])},${perc255(rgb[1])},${perc255(rgb[2])}`;\n\tconst hslStr = `${hsl[0]},${hsl[1]}%,${hsl[2]}%`;\n\tconst hwbStr = `${hwb[0]},${hwb[1]}%,${hwb[2]}%`;\n\n\t// *very* convoluted process, just to be able to establish if the color\n\t// is gray -- or not.\n\tconst linRgb = lin_sRGB([rgb[0] / 255, rgb[1] / 255, rgb[2] / 255]);\n\tconst xyz_d65 = srgb2xyz(linRgb);\n\tconst xyz_d50 = chromaticAdaptationD65_D50(xyz_d65);\n\tconst lab = xyz2lab(xyz_d50);\n\n\tfunc.push(`rgb(${rgbStr})`);\n\tfunc.push(`rgba(${rgbStr},1)`);\n\tfunc.push(`rgba(${rgbStr},100%)`);\n\tfunc.push(`rgb(${rgbPercStr})`);\n\tfunc.push(`rgba(${rgbPercStr},1)`);\n\tfunc.push(`rgba(${rgbPercStr},100%)`);\n\tfunc.push(`hsl(${hslStr})`);\n\tfunc.push(`hsla(${hslStr},1)`);\n\tfunc.push(`hsla(${hslStr},100%)`);\n\tfunc.push(`hwb(${hwbStr})`);\n\tfunc.push(`hwb(${hwbStr},1)`);\n\tfunc.push(`hwb(${hwbStr},100%)`);\n\n\t// technically, this should be 0 - but then #808080 wouldn't even be gray\n\tif (lab[1] * lab[1] < 0.01 && lab[2] * lab[2] < 0.01) {\n\t\t// yay! gray!\n\t\tconst grayStr = Math.round(lab[0]);\n\n\t\tfunc.push(`gray(${grayStr})`);\n\t\tfunc.push(`gray(${grayStr},1)`);\n\t\tfunc.push(`gray(${grayStr},100%)`);\n\t\tfunc.push(`gray(${grayStr}%)`);\n\t\tfunc.push(`gray(${grayStr}%,1)`);\n\t\tfunc.push(`gray(${grayStr}%,100%)`);\n\t}\n\n\treturn func;\n}\n\nmodule.exports = generateColorFuncs;\n"]},"metadata":{},"sourceType":"script"}