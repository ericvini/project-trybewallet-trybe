{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst hash = require('./hash');\n\nconst path = require('path');\n/**\n * Return the cacheFile to be used by stylelint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be `cacheFile/.cache_hashOfCWD`.\n *\n * If cacheFile points to a file or looks like a file, then it will just use that file.\n *\n * @param {string} cacheFile - The name of file to be used to store the cache\n * @param {string} cwd - Current working directory. Used for tests\n * @returns {string} Resolved path to the cache file\n */\n\n\nmodule.exports = function getCacheFile(cacheFile, cwd) {\n  /*\n   * Make sure path separators are normalized for environment/os.\n   * Also, keep trailing path separator if present.\n   */\n  cacheFile = path.normalize(cacheFile);\n  const resolvedCacheFile = path.resolve(cwd, cacheFile); // If the last character passed is a path separator, we assume is a directory.\n\n  const looksLikeADirectory = cacheFile[cacheFile.length - 1] === path.sep;\n  /**\n   * Return the default cache file name when provided parameter is a directory.\n   * @returns {string} - Resolved path to the cacheFile\n   */\n\n  function getCacheFileForDirectory() {\n    return path.join(resolvedCacheFile, `.stylelintcache_${hash(cwd)}`);\n  }\n\n  let fileStats;\n\n  try {\n    fileStats = fs.lstatSync(resolvedCacheFile);\n  } catch (ex) {\n    fileStats = null;\n  }\n\n  if (looksLikeADirectory || fileStats && fileStats.isDirectory()) {\n    // Return path to provided directory with generated file name.\n    return getCacheFileForDirectory();\n  } // Return normalized path to cache file.\n\n\n  return resolvedCacheFile;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/getCacheFile.js"],"names":["fs","require","hash","path","module","exports","getCacheFile","cacheFile","cwd","normalize","resolvedCacheFile","resolve","looksLikeADirectory","length","sep","getCacheFileForDirectory","join","fileStats","lstatSync","ex","isDirectory"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,GAAjC,EAAsC;AACtD;AACD;AACA;AACA;AACCD,EAAAA,SAAS,GAAGJ,IAAI,CAACM,SAAL,CAAeF,SAAf,CAAZ;AAEA,QAAMG,iBAAiB,GAAGP,IAAI,CAACQ,OAAL,CAAaH,GAAb,EAAkBD,SAAlB,CAA1B,CAPsD,CAQtD;;AACA,QAAMK,mBAAmB,GAAGL,SAAS,CAACA,SAAS,CAACM,MAAV,GAAmB,CAApB,CAAT,KAAoCV,IAAI,CAACW,GAArE;AAEA;AACD;AACA;AACA;;AACC,WAASC,wBAAT,GAAoC;AACnC,WAAOZ,IAAI,CAACa,IAAL,CAAUN,iBAAV,EAA8B,mBAAkBR,IAAI,CAACM,GAAD,CAAM,EAA1D,CAAP;AACA;;AAED,MAAIS,SAAJ;;AAEA,MAAI;AACHA,IAAAA,SAAS,GAAGjB,EAAE,CAACkB,SAAH,CAAaR,iBAAb,CAAZ;AACA,GAFD,CAEE,OAAOS,EAAP,EAAW;AACZF,IAAAA,SAAS,GAAG,IAAZ;AACA;;AAED,MAAIL,mBAAmB,IAAKK,SAAS,IAAIA,SAAS,CAACG,WAAV,EAAzC,EAAmE;AAClE;AACA,WAAOL,wBAAwB,EAA/B;AACA,GA9BqD,CAgCtD;;;AACA,SAAOL,iBAAP;AACA,CAlCD","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst hash = require('./hash');\nconst path = require('path');\n\n/**\n * Return the cacheFile to be used by stylelint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be `cacheFile/.cache_hashOfCWD`.\n *\n * If cacheFile points to a file or looks like a file, then it will just use that file.\n *\n * @param {string} cacheFile - The name of file to be used to store the cache\n * @param {string} cwd - Current working directory. Used for tests\n * @returns {string} Resolved path to the cache file\n */\nmodule.exports = function getCacheFile(cacheFile, cwd) {\n\t/*\n\t * Make sure path separators are normalized for environment/os.\n\t * Also, keep trailing path separator if present.\n\t */\n\tcacheFile = path.normalize(cacheFile);\n\n\tconst resolvedCacheFile = path.resolve(cwd, cacheFile);\n\t// If the last character passed is a path separator, we assume is a directory.\n\tconst looksLikeADirectory = cacheFile[cacheFile.length - 1] === path.sep;\n\n\t/**\n\t * Return the default cache file name when provided parameter is a directory.\n\t * @returns {string} - Resolved path to the cacheFile\n\t */\n\tfunction getCacheFileForDirectory() {\n\t\treturn path.join(resolvedCacheFile, `.stylelintcache_${hash(cwd)}`);\n\t}\n\n\tlet fileStats;\n\n\ttry {\n\t\tfileStats = fs.lstatSync(resolvedCacheFile);\n\t} catch (ex) {\n\t\tfileStats = null;\n\t}\n\n\tif (looksLikeADirectory || (fileStats && fileStats.isDirectory())) {\n\t\t// Return path to provided directory with generated file name.\n\t\treturn getCacheFileForDirectory();\n\t}\n\n\t// Return normalized path to cache file.\n\treturn resolvedCacheFile;\n};\n"]},"metadata":{},"sourceType":"script"}