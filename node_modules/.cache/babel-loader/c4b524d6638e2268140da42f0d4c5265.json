{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst findFontFamily = require('../../utils/findFontFamily');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-no-duplicate-names';\nconst messages = ruleMessages(ruleName, {\n  rejected: name => `Unexpected duplicate name ${name}`\n});\n\nconst isFamilyNameKeyword = node => !node.quote && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignoreFontFamilyNames: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(/^font(-family)?$/i, decl => {\n      const keywords = new Set();\n      const familyNames = new Set();\n      const fontFamilies = findFontFamily(decl.value);\n\n      if (fontFamilies.length === 0) {\n        return;\n      }\n\n      fontFamilies.forEach(fontFamilyNode => {\n        const family = fontFamilyNode.value.trim();\n\n        if (optionsMatches(options, 'ignoreFontFamilyNames', fontFamilyNode.value.trim())) {\n          return;\n        }\n\n        if (isFamilyNameKeyword(fontFamilyNode)) {\n          if (keywords.has(family.toLowerCase())) {\n            complain(messages.rejected(family), declarationValueIndex(decl) + fontFamilyNode.sourceIndex, decl);\n            return;\n          }\n\n          keywords.add(family);\n          return;\n        }\n\n        if (familyNames.has(family)) {\n          complain(messages.rejected(family), declarationValueIndex(decl) + fontFamilyNode.sourceIndex, decl);\n          return;\n        }\n\n        familyNames.add(family);\n      });\n    });\n\n    function complain(message, index, decl) {\n      report({\n        result,\n        ruleName,\n        message,\n        node: decl,\n        index\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.js"],"names":["_","require","declarationValueIndex","findFontFamily","keywordSets","optionsMatches","report","ruleMessages","validateOptions","ruleName","messages","rejected","name","isFamilyNameKeyword","node","quote","fontFamilyKeywords","has","value","toLowerCase","rule","actual","options","root","result","validOptions","possible","ignoreFontFamilyNames","isString","isRegExp","optional","walkDecls","decl","keywords","Set","familyNames","fontFamilies","length","forEach","fontFamilyNode","family","trim","complain","sourceIndex","add","message","index","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-no-duplicate-names';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected duplicate name ${name}`,\n});\n\nconst isFamilyNameKeyword = (node) =>\n\t!node.quote && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilyNames: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst keywords = new Set();\n\t\t\tconst familyNames = new Set();\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfontFamilies.forEach((fontFamilyNode) => {\n\t\t\t\tconst family = fontFamilyNode.value.trim();\n\n\t\t\t\tif (optionsMatches(options, 'ignoreFontFamilyNames', fontFamilyNode.value.trim())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isFamilyNameKeyword(fontFamilyNode)) {\n\t\t\t\t\tif (keywords.has(family.toLowerCase())) {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\t\tdecl,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tkeywords.add(family);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (familyNames.has(family)) {\n\t\t\t\t\tcomplain(\n\t\t\t\t\t\tmessages.rejected(family),\n\t\t\t\t\t\tdeclarationValueIndex(decl) + fontFamilyNode.sourceIndex,\n\t\t\t\t\t\tdecl,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfamilyNames.add(family);\n\t\t\t});\n\t\t});\n\n\t\tfunction complain(message, index, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}