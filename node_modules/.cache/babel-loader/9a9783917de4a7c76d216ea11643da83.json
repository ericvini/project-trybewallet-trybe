{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\nconst messages = ruleMessages(ruleName, {\n  rejected: selector => `Unexpected unknown pseudo-element selector \"${selector}\"`\n});\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignorePseudoElements: [_.isString]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      const selector = rule.selector; // Return early before parse if no pseudos for performance\n\n      if (!selector.includes(':')) {\n        return;\n      }\n\n      parseSelector(selector, result, rule, selectorTree => {\n        selectorTree.walkPseudos(pseudoNode => {\n          const value = pseudoNode.value;\n\n          if (!isStandardSyntaxSelector(value)) {\n            return;\n          } // Ignore pseudo-classes\n\n\n          if (value.slice(0, 2) !== '::') {\n            return;\n          }\n\n          if (optionsMatches(options, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n            return;\n          }\n\n          const name = value.slice(2);\n\n          if (vendor.prefix(name) || keywordSets.pseudoElements.has(name.toLowerCase())) {\n            return;\n          }\n\n          report({\n            message: messages.rejected(value),\n            node: rule,\n            index: pseudoNode.sourceIndex,\n            ruleName,\n            result\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js"],"names":["_","require","isStandardSyntaxRule","isStandardSyntaxSelector","keywordSets","optionsMatches","parseSelector","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","selector","rule","actual","options","root","result","validOptions","possible","ignorePseudoElements","isString","optional","walkRules","includes","selectorTree","walkPseudos","pseudoNode","value","slice","name","prefix","pseudoElements","has","toLowerCase","message","node","index","sourceIndex","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'selector-pseudo-element-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-element selector \"${selector}\"`,\n});\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoElements: [_.isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = rule.selector;\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(selector, result, rule, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-classes\n\t\t\t\t\tif (value.slice(0, 2) !== '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(options, 'ignorePseudoElements', pseudoNode.value.slice(2))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst name = value.slice(2);\n\n\t\t\t\t\tif (vendor.prefix(name) || keywordSets.pseudoElements.has(name.toLowerCase())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}