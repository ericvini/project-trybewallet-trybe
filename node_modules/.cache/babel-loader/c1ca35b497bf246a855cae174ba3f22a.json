{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-blacklist';\nconst messages = ruleMessages(ruleName, {\n  rejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isObject]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'declaration-property-value-disallowed-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n    root.walkDecls(decl => {\n      const prop = decl.prop;\n      const value = decl.value;\n      const unprefixedProp = vendor.unprefixed(prop);\n\n      const propList = _.find(list, (values, propIdentifier) => matchesStringOrRegExp(unprefixedProp, propIdentifier));\n\n      if (_.isEmpty(propList)) {\n        return;\n      }\n\n      if (!matchesStringOrRegExp(value, propList)) {\n        return;\n      }\n\n      report({\n        message: messages.rejected(prop, value),\n        node: decl,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-property-value-blacklist/index.js"],"names":["_","require","matchesStringOrRegExp","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","property","value","rule","list","root","result","validOptions","actual","possible","isObject","warn","stylelintType","stylelintReference","walkDecls","decl","prop","unprefixedProp","unprefixed","propList","find","values","propIdentifier","isEmpty","message","node","meta","deprecated","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMM,QAAQ,GAAG,sCAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAsB,qBAAoBA,KAAM,mBAAkBD,QAAS;AAD9C,CAAX,CAA7B;;AAIA,SAASE,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAASR,QAAT,EAAmB;AACtDU,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAAClB,CAAC,CAACmB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA;;AAEDD,IAAAA,MAAM,CAACK,IAAP,CACE,IAAGb,QAAS,kFADd,EAEC;AACCc,MAAAA,aAAa,EAAE,aADhB;AAECC,MAAAA,kBAAkB,EAAG,gEAA+Df,QAAS;AAF9F,KAFD;AAQAO,IAAAA,IAAI,CAACS,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,YAAMd,KAAK,GAAGa,IAAI,CAACb,KAAnB;AAEA,YAAMe,cAAc,GAAGpB,MAAM,CAACqB,UAAP,CAAkBF,IAAlB,CAAvB;;AACA,YAAMG,QAAQ,GAAG5B,CAAC,CAAC6B,IAAF,CAAOhB,IAAP,EAAa,CAACiB,MAAD,EAASC,cAAT,KAC7B7B,qBAAqB,CAACwB,cAAD,EAAiBK,cAAjB,CADL,CAAjB;;AAIA,UAAI/B,CAAC,CAACgC,OAAF,CAAUJ,QAAV,CAAJ,EAAyB;AACxB;AACA;;AAED,UAAI,CAAC1B,qBAAqB,CAACS,KAAD,EAAQiB,QAAR,CAA1B,EAA6C;AAC5C;AACA;;AAEDzB,MAAAA,MAAM,CAAC;AACN8B,QAAAA,OAAO,EAAEzB,QAAQ,CAACC,QAAT,CAAkBgB,IAAlB,EAAwBd,KAAxB,CADH;AAENuB,QAAAA,IAAI,EAAEV,IAFA;AAGNT,QAAAA,MAHM;AAINR,QAAAA;AAJM,OAAD,CAAN;AAMA,KAvBD;AAwBA,GA1CD;AA2CA;;AAEDK,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACuB,IAAL,GAAY;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-value-blacklist';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isObject],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(\n\t\t\t`'${ruleName}' has been deprecated. Instead use 'declaration-property-value-disallowed-list'.`,\n\t\t\t{\n\t\t\t\tstylelintType: 'deprecation',\n\t\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t\t},\n\t\t);\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\tconst propList = _.find(list, (values, propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (_.isEmpty(propList)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!matchesStringOrRegExp(value, propList)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(prop, value),\n\t\t\t\tnode: decl,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}