{"ast":null,"code":"'use strict';\n\nconst getUnitFromValueNode = require('./getUnitFromValueNode');\n\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\n\nconst isVariable = require('./isVariable');\n\nconst keywordSets = require('../reference/keywordSets');\n\nconst postcssValueParser = require('postcss-value-parser');\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\n\n\nmodule.exports = function findAnimationName(value) {\n  /** @type {Node[]} */\n  const animationNames = [];\n  const valueNodes = postcssValueParser(value); // Handle `inherit`, `initial` and etc\n\n  if (valueNodes.nodes.length === 1 && keywordSets.basicKeywords.has(valueNodes.nodes[0].value.toLowerCase())) {\n    return [valueNodes.nodes[0]];\n  }\n\n  valueNodes.walk(valueNode => {\n    if (valueNode.type === 'function') {\n      return false;\n    }\n\n    if (valueNode.type !== 'word') {\n      return;\n    }\n\n    const valueLowerCase = valueNode.value.toLowerCase(); // Ignore non-standard syntax\n\n    if (!isStandardSyntaxValue(valueLowerCase)) {\n      return;\n    } // Ignore variables\n\n\n    if (isVariable(valueLowerCase)) {\n      return;\n    } // Ignore keywords for other animation parts\n\n\n    if (keywordSets.animationShorthandKeywords.has(valueLowerCase)) {\n      return;\n    } // Ignore numbers with units\n\n\n    const unit = getUnitFromValueNode(valueNode);\n\n    if (unit || unit === '') {\n      return;\n    }\n\n    animationNames.push(valueNode);\n  });\n  return animationNames;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/findAnimationName.js"],"names":["getUnitFromValueNode","require","isStandardSyntaxValue","isVariable","keywordSets","postcssValueParser","module","exports","findAnimationName","value","animationNames","valueNodes","nodes","length","basicKeywords","has","toLowerCase","walk","valueNode","type","valueLowerCase","animationShorthandKeywords","unit","push"],"mappings":"AAAA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,sBAAD,CAAlC;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAClD;AACA,QAAMC,cAAc,GAAG,EAAvB;AAEA,QAAMC,UAAU,GAAGN,kBAAkB,CAACI,KAAD,CAArC,CAJkD,CAMlD;;AACA,MACCE,UAAU,CAACC,KAAX,CAAiBC,MAAjB,KAA4B,CAA5B,IACAT,WAAW,CAACU,aAAZ,CAA0BC,GAA1B,CAA8BJ,UAAU,CAACC,KAAX,CAAiB,CAAjB,EAAoBH,KAApB,CAA0BO,WAA1B,EAA9B,CAFD,EAGE;AACD,WAAO,CAACL,UAAU,CAACC,KAAX,CAAiB,CAAjB,CAAD,CAAP;AACA;;AAEDD,EAAAA,UAAU,CAACM,IAAX,CAAiBC,SAAD,IAAe;AAC9B,QAAIA,SAAS,CAACC,IAAV,KAAmB,UAAvB,EAAmC;AAClC,aAAO,KAAP;AACA;;AAED,QAAID,SAAS,CAACC,IAAV,KAAmB,MAAvB,EAA+B;AAC9B;AACA;;AAED,UAAMC,cAAc,GAAGF,SAAS,CAACT,KAAV,CAAgBO,WAAhB,EAAvB,CAT8B,CAW9B;;AACA,QAAI,CAACd,qBAAqB,CAACkB,cAAD,CAA1B,EAA4C;AAC3C;AACA,KAd6B,CAgB9B;;;AACA,QAAIjB,UAAU,CAACiB,cAAD,CAAd,EAAgC;AAC/B;AACA,KAnB6B,CAqB9B;;;AACA,QAAIhB,WAAW,CAACiB,0BAAZ,CAAuCN,GAAvC,CAA2CK,cAA3C,CAAJ,EAAgE;AAC/D;AACA,KAxB6B,CA0B9B;;;AACA,UAAME,IAAI,GAAGtB,oBAAoB,CAACkB,SAAD,CAAjC;;AAEA,QAAII,IAAI,IAAIA,IAAI,KAAK,EAArB,EAAyB;AACxB;AACA;;AAEDZ,IAAAA,cAAc,CAACa,IAAf,CAAoBL,SAApB;AACA,GAlCD;AAoCA,SAAOR,cAAP;AACA,CAnDD","sourcesContent":["'use strict';\n\nconst getUnitFromValueNode = require('./getUnitFromValueNode');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isVariable = require('./isVariable');\nconst keywordSets = require('../reference/keywordSets');\nconst postcssValueParser = require('postcss-value-parser');\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n * Get the animation name within an `animation` shorthand property value.\n *\n * @param {string} value\n *\n * @returns {Node[]}\n */\nmodule.exports = function findAnimationName(value) {\n\t/** @type {Node[]} */\n\tconst animationNames = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tvalueNodes.nodes.length === 1 &&\n\t\tkeywordSets.basicKeywords.has(valueNodes.nodes[0].value.toLowerCase())\n\t) {\n\t\treturn [valueNodes.nodes[0]];\n\t}\n\n\tvalueNodes.walk((valueNode) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (valueNode.type !== 'word') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non-standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other animation parts\n\t\tif (keywordSets.animationShorthandKeywords.has(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore numbers with units\n\t\tconst unit = getUnitFromValueNode(valueNode);\n\n\t\tif (unit || unit === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tanimationNames.push(valueNode);\n\t});\n\n\treturn animationNames;\n};\n"]},"metadata":{},"sourceType":"script"}