{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\nconst messages = ruleMessages(ruleName, {\n  rejected: name => `Unexpected name \"${name}\"`\n});\n\nfunction rule(listInput) {\n  const list = [].concat(listInput);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString, _.isRegExp]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkRules(ruleNode => {\n      if (!isStandardSyntaxRule(ruleNode)) {\n        return;\n      }\n\n      if (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n        return;\n      }\n\n      parseSelector(ruleNode.selector, result, ruleNode, selectorTree => {\n        selectorTree.walkAttributes(attributeNode => {\n          const attributeName = attributeNode.qualifiedAttribute;\n\n          if (!matchesStringOrRegExp(attributeName, list)) {\n            return;\n          }\n\n          report({\n            message: messages.rejected(attributeName),\n            node: ruleNode,\n            index: attributeNode.sourceIndex + attributeNode.offsetOf('attribute'),\n            result,\n            ruleName\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.js"],"names":["_","require","isStandardSyntaxRule","matchesStringOrRegExp","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","rejected","name","rule","listInput","list","concat","root","result","validOptions","actual","possible","isString","isRegExp","walkRules","ruleNode","selector","includes","selectorTree","walkAttributes","attributeNode","attributeName","qualifiedAttribute","message","node","index","sourceIndex","offsetOf","primaryOptionArray","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAME,qBAAqB,GAAGF,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMO,QAAQ,GAAG,yCAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,IAAD,IAAW,oBAAmBA,IAAK;AADN,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,SAAd,EAAyB;AACxB,QAAMC,IAAI,GAAG,GAAGC,MAAH,CAAUF,SAAV,CAAb;AAEA,SAAO,CAACG,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAAST,QAAT,EAAmB;AACtDW,MAAAA,MAAM,EAAEL,IAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAACpB,CAAC,CAACqB,QAAH,EAAarB,CAAC,CAACsB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACO,SAAL,CAAgBC,QAAD,IAAc;AAC5B,UAAI,CAACtB,oBAAoB,CAACsB,QAAD,CAAzB,EAAqC;AACpC;AACA;;AAED,UAAI,CAACA,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,CAA2B,GAA3B,CAAD,IAAoC,CAACF,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,CAA2B,GAA3B,CAAzC,EAA0E;AACzE;AACA;;AAEDtB,MAAAA,aAAa,CAACoB,QAAQ,CAACC,QAAV,EAAoBR,MAApB,EAA4BO,QAA5B,EAAuCG,YAAD,IAAkB;AACpEA,QAAAA,YAAY,CAACC,cAAb,CAA6BC,aAAD,IAAmB;AAC9C,gBAAMC,aAAa,GAAGD,aAAa,CAACE,kBAApC;;AAEA,cAAI,CAAC5B,qBAAqB,CAAC2B,aAAD,EAAgBhB,IAAhB,CAA1B,EAAiD;AAChD;AACA;;AAEDT,UAAAA,MAAM,CAAC;AACN2B,YAAAA,OAAO,EAAEvB,QAAQ,CAACC,QAAT,CAAkBoB,aAAlB,CADH;AAENG,YAAAA,IAAI,EAAET,QAFA;AAGNU,YAAAA,KAAK,EAAEL,aAAa,CAACM,WAAd,GAA4BN,aAAa,CAACO,QAAd,CAAuB,WAAvB,CAH7B;AAINnB,YAAAA,MAJM;AAKNT,YAAAA;AALM,WAAD,CAAN;AAOA,SAdD;AAeA,OAhBY,CAAb;AAiBA,KA1BD;AA2BA,GArCD;AAsCA;;AAEDI,IAAI,CAACyB,kBAAL,GAA0B,IAA1B;AAEAzB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACA6B,MAAM,CAACC,OAAP,GAAiB3B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-name-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected name \"${name}\"`,\n});\n\nfunction rule(listInput) {\n\tconst list = [].concat(listInput);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString, _.isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.selector.includes('[') || !ruleNode.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(ruleNode.selector, result, ruleNode, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst attributeName = attributeNode.qualifiedAttribute;\n\n\t\t\t\t\tif (!matchesStringOrRegExp(attributeName, list)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(attributeName),\n\t\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('attribute'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}