{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-quotes';\nconst messages = ruleMessages(ruleName, {\n  expected: value => `Expected quotes around \"${value}\"`,\n  rejected: value => `Unexpected quotes around \"${value}\"`\n});\n\nfunction rule(expectation) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      if (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n        return;\n      }\n\n      parseSelector(rule.selector, result, rule, selectorTree => {\n        selectorTree.walkAttributes(attributeNode => {\n          if (!attributeNode.operator) {\n            return;\n          }\n\n          if (!attributeNode.quoted && expectation === 'always') {\n            complain(messages.expected(attributeNode.value), attributeNode.sourceIndex + attributeNode.offsetOf('value'));\n          }\n\n          if (attributeNode.quoted && expectation === 'never') {\n            complain(messages.rejected(attributeNode.value), attributeNode.sourceIndex + attributeNode.offsetOf('value'));\n          }\n        });\n      });\n\n      function complain(message, index) {\n        report({\n          message,\n          index,\n          result,\n          ruleName,\n          node: rule\n        });\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-attribute-quotes/index.js"],"names":["isStandardSyntaxRule","require","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","expected","value","rejected","rule","expectation","root","result","validOptions","actual","possible","walkRules","selector","includes","selectorTree","walkAttributes","attributeNode","operator","quoted","complain","sourceIndex","offsetOf","message","index","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,2BAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,KAAD,IAAY,2BAA0BA,KAAM,GADf;AAEvCC,EAAAA,QAAQ,EAAGD,KAAD,IAAY,6BAA4BA,KAAM;AAFjB,CAAX,CAA7B;;AAKA,SAASE,IAAT,CAAcC,WAAd,EAA2B;AAC1B,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGV,eAAe,CAACS,MAAD,EAASR,QAAT,EAAmB;AACtDU,MAAAA,MAAM,EAAEJ,WAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA,KARuB,CAUxB;AACA;;;AACAF,IAAAA,IAAI,CAACK,SAAL,CAAgBP,IAAD,IAAU;AACxB,UAAI,CAACX,oBAAoB,CAACW,IAAD,CAAzB,EAAiC;AAChC;AACA;;AAED,UAAI,CAACA,IAAI,CAACQ,QAAL,CAAcC,QAAd,CAAuB,GAAvB,CAAD,IAAgC,CAACT,IAAI,CAACQ,QAAL,CAAcC,QAAd,CAAuB,GAAvB,CAArC,EAAkE;AACjE;AACA;;AAEDlB,MAAAA,aAAa,CAACS,IAAI,CAACQ,QAAN,EAAgBL,MAAhB,EAAwBH,IAAxB,EAA+BU,YAAD,IAAkB;AAC5DA,QAAAA,YAAY,CAACC,cAAb,CAA6BC,aAAD,IAAmB;AAC9C,cAAI,CAACA,aAAa,CAACC,QAAnB,EAA6B;AAC5B;AACA;;AAED,cAAI,CAACD,aAAa,CAACE,MAAf,IAAyBb,WAAW,KAAK,QAA7C,EAAuD;AACtDc,YAAAA,QAAQ,CACPnB,QAAQ,CAACC,QAAT,CAAkBe,aAAa,CAACd,KAAhC,CADO,EAEPc,aAAa,CAACI,WAAd,GAA4BJ,aAAa,CAACK,QAAd,CAAuB,OAAvB,CAFrB,CAAR;AAIA;;AAED,cAAIL,aAAa,CAACE,MAAd,IAAwBb,WAAW,KAAK,OAA5C,EAAqD;AACpDc,YAAAA,QAAQ,CACPnB,QAAQ,CAACG,QAAT,CAAkBa,aAAa,CAACd,KAAhC,CADO,EAEPc,aAAa,CAACI,WAAd,GAA4BJ,aAAa,CAACK,QAAd,CAAuB,OAAvB,CAFrB,CAAR;AAIA;AACD,SAlBD;AAmBA,OApBY,CAAb;;AAsBA,eAASF,QAAT,CAAkBG,OAAlB,EAA2BC,KAA3B,EAAkC;AACjC3B,QAAAA,MAAM,CAAC;AACN0B,UAAAA,OADM;AAENC,UAAAA,KAFM;AAGNhB,UAAAA,MAHM;AAINR,UAAAA,QAJM;AAKNyB,UAAAA,IAAI,EAAEpB;AALA,SAAD,CAAN;AAOA;AACD,KAxCD;AAyCA,GArDD;AAsDA;;AAEDA,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAyB,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (value) => `Expected quotes around \"${value}\"`,\n\trejected: (value) => `Unexpected quotes around \"${value}\"`,\n});\n\nfunction rule(expectation) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(rule.selector, result, rule, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tif (!attributeNode.operator) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!attributeNode.quoted && expectation === 'always') {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.expected(attributeNode.value),\n\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attributeNode.quoted && expectation === 'never') {\n\t\t\t\t\t\tcomplain(\n\t\t\t\t\t\t\tmessages.rejected(attributeNode.value),\n\t\t\t\t\t\t\tattributeNode.sourceIndex + attributeNode.offsetOf('value'),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction complain(message, index) {\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: rule,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}