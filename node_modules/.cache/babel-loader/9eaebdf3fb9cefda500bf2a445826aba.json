{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\n\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\n\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\n\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'value-keyword-case';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n}); // Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\n\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\nconst mapLowercaseKeywordsToCamelCase = new Map();\nkeywordSets.camelCaseKeywords.forEach(func => {\n  mapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['lower', 'upper']\n    }, {\n      actual: options,\n      possible: {\n        ignoreProperties: [_.isString, _.isRegExp],\n        ignoreKeywords: [_.isString, _.isRegExp],\n        ignoreFunctions: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      const prop = decl.prop;\n      const propLowerCase = decl.prop.toLowerCase();\n      const value = decl.value;\n      const parsed = valueParser(decl.raws.value ? decl.raws.value.raw : decl.value);\n      let needFix = false;\n      parsed.walk(node => {\n        const valueLowerCase = node.value.toLowerCase(); // Ignore system colors\n\n        if (keywordSets.systemColors.has(valueLowerCase)) {\n          return;\n        } // Ignore keywords within `url` and `var` function\n\n\n        if (node.type === 'function' && (valueLowerCase === 'url' || valueLowerCase === 'var' || valueLowerCase === 'counter' || valueLowerCase === 'counters' || valueLowerCase === 'attr')) {\n          return false;\n        } // ignore keywords within ignoreFunctions functions\n\n\n        const ignoreFunctions = options && options.ignoreFunctions || [];\n\n        if (node.type === 'function' && ignoreFunctions.length > 0 && matchesStringOrRegExp(valueLowerCase, ignoreFunctions)) {\n          return false;\n        }\n\n        const keyword = node.value; // Ignore css variables, and hex values, and math operators, and sass interpolation\n\n        if (node.type !== 'word' || !isStandardSyntaxValue(node.value) || value.includes('#') || ignoredCharacters.has(keyword) || getUnitFromValueNode(node)) {\n          return;\n        }\n\n        if (propLowerCase === 'animation' && !keywordSets.animationShorthandKeywords.has(valueLowerCase) && !keywordSets.animationNameKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'animation-name' && !keywordSets.animationNameKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'font' && !keywordSets.fontShorthandKeywords.has(valueLowerCase) && !keywordSets.fontFamilyKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'font-family' && !keywordSets.fontFamilyKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'counter-increment' && isCounterIncrementCustomIdentValue(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n          return;\n        }\n\n        if (gridRowProps.has(propLowerCase) && !keywordSets.gridRowKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (gridColumnProps.has(propLowerCase) && !keywordSets.gridColumnKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'grid-area' && !keywordSets.gridAreaKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'list-style' && !keywordSets.listStyleShorthandKeywords.has(valueLowerCase) && !keywordSets.listStyleTypeKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        if (propLowerCase === 'list-style-type' && !keywordSets.listStyleTypeKeywords.has(valueLowerCase)) {\n          return;\n        }\n\n        const ignoreKeywords = options && options.ignoreKeywords || [];\n        const ignoreProperties = options && options.ignoreProperties || [];\n\n        if (ignoreKeywords.length > 0 && matchesStringOrRegExp(keyword, ignoreKeywords)) {\n          return;\n        }\n\n        if (ignoreProperties.length > 0 && matchesStringOrRegExp(prop, ignoreProperties)) {\n          return;\n        }\n\n        const keywordLowerCase = keyword.toLocaleLowerCase();\n        let expectedKeyword = null;\n\n        if (expectation === 'lower' && mapLowercaseKeywordsToCamelCase.has(keywordLowerCase)) {\n          expectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n        } else if (expectation === 'lower') {\n          expectedKeyword = keyword.toLowerCase();\n        } else {\n          expectedKeyword = keyword.toUpperCase();\n        }\n\n        if (keyword === expectedKeyword) {\n          return;\n        }\n\n        if (context.fix) {\n          needFix = true;\n          node.value = expectedKeyword;\n          return;\n        }\n\n        report({\n          message: messages.expected(keyword, expectedKeyword),\n          node: decl,\n          index: declarationValueIndex(decl) + node.sourceIndex,\n          result,\n          ruleName\n        });\n      });\n\n      if (context.fix && needFix) {\n        decl.value = parsed.toString();\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/value-keyword-case/index.js"],"names":["_","require","declarationValueIndex","getUnitFromValueNode","isCounterIncrementCustomIdentValue","isCounterResetCustomIdentValue","isStandardSyntaxValue","keywordSets","matchesStringOrRegExp","report","ruleMessages","validateOptions","valueParser","ruleName","messages","expected","actual","ignoredCharacters","Set","gridRowProps","gridColumnProps","mapLowercaseKeywordsToCamelCase","Map","camelCaseKeywords","forEach","func","set","toLowerCase","rule","expectation","options","context","root","result","validOptions","possible","ignoreProperties","isString","isRegExp","ignoreKeywords","ignoreFunctions","optional","walkDecls","decl","prop","propLowerCase","value","parsed","raws","raw","needFix","walk","node","valueLowerCase","systemColors","has","type","length","keyword","includes","animationShorthandKeywords","animationNameKeywords","fontShorthandKeywords","fontFamilyKeywords","gridRowKeywords","gridColumnKeywords","gridAreaKeywords","listStyleShorthandKeywords","listStyleTypeKeywords","keywordLowerCase","toLocaleLowerCase","expectedKeyword","get","toUpperCase","fix","message","index","sourceIndex","toString","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst isCounterIncrementCustomIdentValue = require('../../utils/isCounterIncrementCustomIdentValue');\nconst isCounterResetCustomIdentValue = require('../../utils/isCounterResetCustomIdentValue');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst keywordSets = require('../../reference/keywordSets');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'value-keyword-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\n// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.\nconst ignoredCharacters = new Set(['+', '-', '/', '*', '%']);\nconst gridRowProps = new Set(['grid-row', 'grid-row-start', 'grid-row-end']);\nconst gridColumnProps = new Set(['grid-column', 'grid-column-start', 'grid-column-end']);\n\nconst mapLowercaseKeywordsToCamelCase = new Map();\n\nkeywordSets.camelCaseKeywords.forEach((func) => {\n\tmapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func);\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: expectation,\n\t\t\t\tpossible: ['lower', 'upper'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreProperties: [_.isString, _.isRegExp],\n\t\t\t\t\tignoreKeywords: [_.isString, _.isRegExp],\n\t\t\t\t\tignoreFunctions: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst propLowerCase = decl.prop.toLowerCase();\n\t\t\tconst value = decl.value;\n\n\t\t\tconst parsed = valueParser(decl.raws.value ? decl.raws.value.raw : decl.value);\n\n\t\t\tlet needFix = false;\n\n\t\t\tparsed.walk((node) => {\n\t\t\t\tconst valueLowerCase = node.value.toLowerCase();\n\n\t\t\t\t// Ignore system colors\n\t\t\t\tif (keywordSets.systemColors.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore keywords within `url` and `var` function\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\t(valueLowerCase === 'url' ||\n\t\t\t\t\t\tvalueLowerCase === 'var' ||\n\t\t\t\t\t\tvalueLowerCase === 'counter' ||\n\t\t\t\t\t\tvalueLowerCase === 'counters' ||\n\t\t\t\t\t\tvalueLowerCase === 'attr')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// ignore keywords within ignoreFunctions functions\n\n\t\t\t\tconst ignoreFunctions = (options && options.ignoreFunctions) || [];\n\n\t\t\t\tif (\n\t\t\t\t\tnode.type === 'function' &&\n\t\t\t\t\tignoreFunctions.length > 0 &&\n\t\t\t\t\tmatchesStringOrRegExp(valueLowerCase, ignoreFunctions)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst keyword = node.value;\n\n\t\t\t\t// Ignore css variables, and hex values, and math operators, and sass interpolation\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'word' ||\n\t\t\t\t\t!isStandardSyntaxValue(node.value) ||\n\t\t\t\t\tvalue.includes('#') ||\n\t\t\t\t\tignoredCharacters.has(keyword) ||\n\t\t\t\t\tgetUnitFromValueNode(node)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation' &&\n\t\t\t\t\t!keywordSets.animationShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'animation-name' &&\n\t\t\t\t\t!keywordSets.animationNameKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font' &&\n\t\t\t\t\t!keywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'font-family' &&\n\t\t\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'counter-increment' &&\n\t\t\t\t\tisCounterIncrementCustomIdentValue(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'counter-reset' && isCounterResetCustomIdentValue(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (gridRowProps.has(propLowerCase) && !keywordSets.gridRowKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tgridColumnProps.has(propLowerCase) &&\n\t\t\t\t\t!keywordSets.gridColumnKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (propLowerCase === 'grid-area' && !keywordSets.gridAreaKeywords.has(valueLowerCase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style' &&\n\t\t\t\t\t!keywordSets.listStyleShorthandKeywords.has(valueLowerCase) &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpropLowerCase === 'list-style-type' &&\n\t\t\t\t\t!keywordSets.listStyleTypeKeywords.has(valueLowerCase)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst ignoreKeywords = (options && options.ignoreKeywords) || [];\n\t\t\t\tconst ignoreProperties = (options && options.ignoreProperties) || [];\n\n\t\t\t\tif (ignoreKeywords.length > 0 && matchesStringOrRegExp(keyword, ignoreKeywords)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreProperties.length > 0 && matchesStringOrRegExp(prop, ignoreProperties)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst keywordLowerCase = keyword.toLocaleLowerCase();\n\t\t\t\tlet expectedKeyword = null;\n\n\t\t\t\tif (expectation === 'lower' && mapLowercaseKeywordsToCamelCase.has(keywordLowerCase)) {\n\t\t\t\t\texpectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase);\n\t\t\t\t} else if (expectation === 'lower') {\n\t\t\t\t\texpectedKeyword = keyword.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\texpectedKeyword = keyword.toUpperCase();\n\t\t\t\t}\n\n\t\t\t\tif (keyword === expectedKeyword) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tneedFix = true;\n\t\t\t\t\tnode.value = expectedKeyword;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(keyword, expectedKeyword),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (context.fix && needFix) {\n\t\t\t\tdecl.value = parsed.toString();\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}