{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('stylelint:file-cache');\n\nconst fileEntryCache = require('file-entry-cache');\n\nconst getCacheFile = require('./getCacheFile');\n\nconst path = require('path');\n\nconst DEFAULT_CACHE_LOCATION = './.stylelintcache';\nconst DEFAULT_HASH = '';\n/** @typedef {import('file-entry-cache').FileDescriptor[\"meta\"] & { hashOfConfig?: string }} CacheMetadata */\n\n/**\n * @param {string} [cacheLocation]\n * @param {string} [hashOfConfig]\n * @constructor\n */\n\nclass FileCache {\n  constructor(cacheLocation = DEFAULT_CACHE_LOCATION, hashOfConfig = DEFAULT_HASH) {\n    const cacheFile = path.resolve(getCacheFile(cacheLocation, process.cwd()));\n    debug(`Cache file is created at ${cacheFile}`);\n    this._fileCache = fileEntryCache.create(cacheFile);\n    this._hashOfConfig = hashOfConfig;\n  }\n  /**\n   * @param {string} absoluteFilepath\n   * @return {boolean}\n   */\n\n\n  hasFileChanged(absoluteFilepath) {\n    // Get file descriptor compares current metadata against cached\n    // one and stores the result to \"changed\" prop.w\n    const descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);\n    /** @type {CacheMetadata} */\n\n\n    const meta = descriptor.meta || {};\n    const changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig;\n\n    if (!changed) {\n      debug(`Skip linting ${absoluteFilepath}. File hasn't changed.`);\n    } // Mutate file descriptor object and store config hash to each file.\n    // Running lint with different config should invalidate the cache.\n\n\n    if (meta.hashOfConfig !== this._hashOfConfig) {\n      meta.hashOfConfig = this._hashOfConfig;\n    }\n\n    return changed;\n  }\n\n  reconcile() {\n    this._fileCache.reconcile();\n  }\n\n  destroy() {\n    this._fileCache.destroy();\n  }\n  /**\n   * @param {string} absoluteFilepath\n   */\n\n\n  removeEntry(absoluteFilepath) {\n    this._fileCache.removeEntry(absoluteFilepath);\n  }\n\n}\n\nmodule.exports = FileCache;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/FileCache.js"],"names":["debug","require","fileEntryCache","getCacheFile","path","DEFAULT_CACHE_LOCATION","DEFAULT_HASH","FileCache","constructor","cacheLocation","hashOfConfig","cacheFile","resolve","process","cwd","_fileCache","create","_hashOfConfig","hasFileChanged","absoluteFilepath","descriptor","getFileDescriptor","meta","changed","reconcile","destroy","removeEntry","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,sBAAjB,CAAd;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMI,sBAAsB,GAAG,mBAA/B;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,CAAgB;AACfC,EAAAA,WAAW,CAACC,aAAa,GAAGJ,sBAAjB,EAAyCK,YAAY,GAAGJ,YAAxD,EAAsE;AAChF,UAAMK,SAAS,GAAGP,IAAI,CAACQ,OAAL,CAAaT,YAAY,CAACM,aAAD,EAAgBI,OAAO,CAACC,GAAR,EAAhB,CAAzB,CAAlB;AAEAd,IAAAA,KAAK,CAAE,4BAA2BW,SAAU,EAAvC,CAAL;AACA,SAAKI,UAAL,GAAkBb,cAAc,CAACc,MAAf,CAAsBL,SAAtB,CAAlB;AACA,SAAKM,aAAL,GAAqBP,YAArB;AACA;AAED;AACD;AACA;AACA;;;AACCQ,EAAAA,cAAc,CAACC,gBAAD,EAAmB;AAChC;AACA;AACA,UAAMC,UAAU,GAAG,KAAKL,UAAL,CAAgBM,iBAAhB,CAAkCF,gBAAlC,CAAnB;AACA;;;AACA,UAAMG,IAAI,GAAGF,UAAU,CAACE,IAAX,IAAmB,EAAhC;AACA,UAAMC,OAAO,GAAGH,UAAU,CAACG,OAAX,IAAsBD,IAAI,CAACZ,YAAL,KAAsB,KAAKO,aAAjE;;AAEA,QAAI,CAACM,OAAL,EAAc;AACbvB,MAAAA,KAAK,CAAE,gBAAemB,gBAAiB,wBAAlC,CAAL;AACA,KAV+B,CAYhC;AACA;;;AACA,QAAIG,IAAI,CAACZ,YAAL,KAAsB,KAAKO,aAA/B,EAA8C;AAC7CK,MAAAA,IAAI,CAACZ,YAAL,GAAoB,KAAKO,aAAzB;AACA;;AAED,WAAOM,OAAP;AACA;;AAEDC,EAAAA,SAAS,GAAG;AACX,SAAKT,UAAL,CAAgBS,SAAhB;AACA;;AAEDC,EAAAA,OAAO,GAAG;AACT,SAAKV,UAAL,CAAgBU,OAAhB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,WAAW,CAACP,gBAAD,EAAmB;AAC7B,SAAKJ,UAAL,CAAgBW,WAAhB,CAA4BP,gBAA5B;AACA;;AA/Cc;;AAkDhBQ,MAAM,CAACC,OAAP,GAAiBrB,SAAjB","sourcesContent":["'use strict';\n\nconst debug = require('debug')('stylelint:file-cache');\nconst fileEntryCache = require('file-entry-cache');\nconst getCacheFile = require('./getCacheFile');\nconst path = require('path');\n\nconst DEFAULT_CACHE_LOCATION = './.stylelintcache';\nconst DEFAULT_HASH = '';\n\n/** @typedef {import('file-entry-cache').FileDescriptor[\"meta\"] & { hashOfConfig?: string }} CacheMetadata */\n\n/**\n * @param {string} [cacheLocation]\n * @param {string} [hashOfConfig]\n * @constructor\n */\nclass FileCache {\n\tconstructor(cacheLocation = DEFAULT_CACHE_LOCATION, hashOfConfig = DEFAULT_HASH) {\n\t\tconst cacheFile = path.resolve(getCacheFile(cacheLocation, process.cwd()));\n\n\t\tdebug(`Cache file is created at ${cacheFile}`);\n\t\tthis._fileCache = fileEntryCache.create(cacheFile);\n\t\tthis._hashOfConfig = hashOfConfig;\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t * @return {boolean}\n\t */\n\thasFileChanged(absoluteFilepath) {\n\t\t// Get file descriptor compares current metadata against cached\n\t\t// one and stores the result to \"changed\" prop.w\n\t\tconst descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);\n\t\t/** @type {CacheMetadata} */\n\t\tconst meta = descriptor.meta || {};\n\t\tconst changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig;\n\n\t\tif (!changed) {\n\t\t\tdebug(`Skip linting ${absoluteFilepath}. File hasn't changed.`);\n\t\t}\n\n\t\t// Mutate file descriptor object and store config hash to each file.\n\t\t// Running lint with different config should invalidate the cache.\n\t\tif (meta.hashOfConfig !== this._hashOfConfig) {\n\t\t\tmeta.hashOfConfig = this._hashOfConfig;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\treconcile() {\n\t\tthis._fileCache.reconcile();\n\t}\n\n\tdestroy() {\n\t\tthis._fileCache.destroy();\n\t}\n\n\t/**\n\t * @param {string} absoluteFilepath\n\t */\n\tremoveEntry(absoluteFilepath) {\n\t\tthis._fileCache.removeEntry(absoluteFilepath);\n\t}\n}\n\nmodule.exports = FileCache;\n"]},"metadata":{},"sourceType":"script"}