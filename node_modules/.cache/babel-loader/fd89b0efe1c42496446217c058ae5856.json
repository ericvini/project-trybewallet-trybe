{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-combinator-allowed-list';\nconst messages = ruleMessages(ruleName, {\n  rejected: combinator => `Unexpected combinator \"${combinator}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      const selector = rule.selector;\n      parseSelector(selector, result, rule, fullSelector => {\n        fullSelector.walkCombinators(combinatorNode => {\n          if (!isStandardSyntaxCombinator(combinatorNode)) {\n            return;\n          }\n\n          const value = normalizeCombinator(combinatorNode.value);\n\n          if (list.includes(value)) {\n            return;\n          }\n\n          report({\n            result,\n            ruleName,\n            message: messages.rejected(value),\n            node: rule,\n            index: combinatorNode.sourceIndex\n          });\n        });\n      });\n    });\n  };\n}\n\nfunction normalizeCombinator(value) {\n  return value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.js"],"names":["_","require","isStandardSyntaxCombinator","isStandardSyntaxRule","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","rejected","combinator","rule","list","root","result","validOptions","actual","possible","isString","walkRules","selector","fullSelector","walkCombinators","combinatorNode","value","normalizeCombinator","includes","message","node","index","sourceIndex","replace","primaryOptionArray","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,0BAA0B,GAAGD,OAAO,CAAC,wCAAD,CAA1C;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMO,QAAQ,GAAG,kCAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,UAAD,IAAiB,0BAAyBA,UAAW;AADxB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGT,eAAe,CAACQ,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAAClB,CAAC,CAACmB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA,KARuB,CAUxB;AACA;;;AACAF,IAAAA,IAAI,CAACM,SAAL,CAAgBR,IAAD,IAAU;AACxB,UAAI,CAACT,oBAAoB,CAACS,IAAD,CAAzB,EAAiC;AAChC;AACA;;AAED,YAAMS,QAAQ,GAAGT,IAAI,CAACS,QAAtB;AAEAjB,MAAAA,aAAa,CAACiB,QAAD,EAAWN,MAAX,EAAmBH,IAAnB,EAA0BU,YAAD,IAAkB;AACvDA,QAAAA,YAAY,CAACC,eAAb,CAA8BC,cAAD,IAAoB;AAChD,cAAI,CAACtB,0BAA0B,CAACsB,cAAD,CAA/B,EAAiD;AAChD;AACA;;AAED,gBAAMC,KAAK,GAAGC,mBAAmB,CAACF,cAAc,CAACC,KAAhB,CAAjC;;AAEA,cAAIZ,IAAI,CAACc,QAAL,CAAcF,KAAd,CAAJ,EAA0B;AACzB;AACA;;AAEDpB,UAAAA,MAAM,CAAC;AACNU,YAAAA,MADM;AAENP,YAAAA,QAFM;AAGNoB,YAAAA,OAAO,EAAEnB,QAAQ,CAACC,QAAT,CAAkBe,KAAlB,CAHH;AAINI,YAAAA,IAAI,EAAEjB,IAJA;AAKNkB,YAAAA,KAAK,EAAEN,cAAc,CAACO;AALhB,WAAD,CAAN;AAOA,SAlBD;AAmBA,OApBY,CAAb;AAqBA,KA5BD;AA6BA,GAzCD;AA0CA;;AAED,SAASL,mBAAT,CAA6BD,KAA7B,EAAoC;AACnC,SAAOA,KAAK,CAACO,OAAN,CAAc,MAAd,EAAsB,GAAtB,CAAP;AACA;;AAEDpB,IAAI,CAACqB,kBAAL,GAA0B,IAA1B;AAEArB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAyB,MAAM,CAACC,OAAP,GAAiBvB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxCombinator = require('../../utils/isStandardSyntaxCombinator');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-combinator-allowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (combinator) => `Unexpected combinator \"${combinator}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = rule.selector;\n\n\t\t\tparseSelector(selector, result, rule, (fullSelector) => {\n\t\t\t\tfullSelector.walkCombinators((combinatorNode) => {\n\t\t\t\t\tif (!isStandardSyntaxCombinator(combinatorNode)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = normalizeCombinator(combinatorNode.value);\n\n\t\t\t\t\tif (list.includes(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tindex: combinatorNode.sourceIndex,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nfunction normalizeCombinator(value) {\n\treturn value.replace(/\\s+/g, ' ');\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}