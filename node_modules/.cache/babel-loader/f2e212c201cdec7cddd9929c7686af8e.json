{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst blockString = require('../../utils/blockString');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected single space before \";\"',\n  rejectedBefore: () => 'Unexpected whitespace before \";\"',\n  expectedBeforeSingleLine: () => 'Expected single space before \";\" in a single-line declaration block',\n  rejectedBeforeSingleLine: () => 'Unexpected whitespace before \";\" in a single-line declaration block'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never', 'always-single-line', 'never-single-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      // Ignore last declaration if there's no trailing semicolon\n      const parentRule = decl.parent;\n\n      if (!parentRule.raws.semicolon && parentRule.last === decl) {\n        return;\n      }\n\n      const declString = decl.toString();\n      checker.before({\n        source: declString,\n        index: declString.length,\n        lineCheckStr: blockString(parentRule),\n        err: m => {\n          if (context.fix) {\n            const value = decl.raws.value ? decl.raws.value.raw : decl.value;\n\n            if (expectation.startsWith('always')) {\n              if (decl.important) {\n                decl.raws.important = ' !important ';\n              } else if (decl.raws.value) {\n                decl.raws.value.raw = value.replace(/\\s*$/, ' ');\n              } else {\n                decl.value = value.replace(/\\s*$/, ' ');\n              }\n\n              return;\n            }\n\n            if (expectation.startsWith('never')) {\n              if (decl.important) {\n                decl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n              } else if (decl.raws.value) {\n                decl.raws.value.raw = value.replace(/\\s*$/, '');\n              } else {\n                decl.value = value.replace(/\\s*$/, '');\n              }\n\n              return;\n            }\n          }\n\n          report({\n            message: m,\n            node: decl,\n            index: decl.toString().length - 1,\n            result,\n            ruleName\n          });\n        }\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js"],"names":["blockString","require","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","rejectedBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","walkDecls","decl","parentRule","parent","raws","semicolon","last","declString","toString","before","source","index","length","lineCheckStr","err","m","fix","value","raw","startsWith","important","replace","message","node","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-block-semicolon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \";\"',\n\trejectedBefore: () => 'Unexpected whitespace before \";\"',\n\texpectedBeforeSingleLine: () =>\n\t\t'Expected single space before \";\" in a single-line declaration block',\n\trejectedBeforeSingleLine: () =>\n\t\t'Unexpected whitespace before \";\" in a single-line declaration block',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst declString = decl.toString();\n\n\t\t\tchecker.before({\n\t\t\t\tsource: declString,\n\t\t\t\tindex: declString.length,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tconst value = decl.raws.value ? decl.raws.value.raw : decl.value;\n\n\t\t\t\t\t\tif (expectation.startsWith('always')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = ' !important ';\n\t\t\t\t\t\t\t} else if (decl.raws.value) {\n\t\t\t\t\t\t\t\tdecl.raws.value.raw = value.replace(/\\s*$/, ' ');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdecl.value = value.replace(/\\s*$/, ' ');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation.startsWith('never')) {\n\t\t\t\t\t\t\tif (decl.important) {\n\t\t\t\t\t\t\t\tdecl.raws.important = decl.raws.important.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else if (decl.raws.value) {\n\t\t\t\t\t\t\t\tdecl.raws.value.raw = value.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdecl.value = value.replace(/\\s*$/, '');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length - 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}