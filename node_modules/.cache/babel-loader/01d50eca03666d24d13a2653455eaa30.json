{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst fsScandir = require(\"@nodelib/fs.scandir\");\n\nconst fastq = require(\"fastq\");\n\nconst common = require(\"./common\");\n\nconst reader_1 = require(\"./reader\");\n\nclass AsyncReader extends reader_1.default {\n  constructor(_root, _settings) {\n    super(_root, _settings);\n    this._settings = _settings;\n    this._scandir = fsScandir.scandir;\n    this._emitter = new events_1.EventEmitter();\n    this._queue = fastq(this._worker.bind(this), this._settings.concurrency);\n    this._isFatalError = false;\n    this._isDestroyed = false;\n\n    this._queue.drain = () => {\n      if (!this._isFatalError) {\n        this._emitter.emit('end');\n      }\n    };\n  }\n\n  read() {\n    this._isFatalError = false;\n    this._isDestroyed = false;\n    setImmediate(() => {\n      this._pushToQueue(this._root, this._settings.basePath);\n    });\n    return this._emitter;\n  }\n\n  destroy() {\n    if (this._isDestroyed) {\n      throw new Error('The reader is already destroyed');\n    }\n\n    this._isDestroyed = true;\n\n    this._queue.killAndDrain();\n  }\n\n  onEntry(callback) {\n    this._emitter.on('entry', callback);\n  }\n\n  onError(callback) {\n    this._emitter.once('error', callback);\n  }\n\n  onEnd(callback) {\n    this._emitter.once('end', callback);\n  }\n\n  _pushToQueue(directory, base) {\n    const queueItem = {\n      directory,\n      base\n    };\n\n    this._queue.push(queueItem, error => {\n      if (error !== null) {\n        this._handleError(error);\n      }\n    });\n  }\n\n  _worker(item, done) {\n    this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {\n      if (error !== null) {\n        return done(error, undefined);\n      }\n\n      for (const entry of entries) {\n        this._handleEntry(entry, item.base);\n      }\n\n      done(null, undefined);\n    });\n  }\n\n  _handleError(error) {\n    if (!common.isFatalError(this._settings, error)) {\n      return;\n    }\n\n    this._isFatalError = true;\n    this._isDestroyed = true;\n\n    this._emitter.emit('error', error);\n  }\n\n  _handleEntry(entry, base) {\n    if (this._isDestroyed || this._isFatalError) {\n      return;\n    }\n\n    const fullpath = entry.path;\n\n    if (base !== undefined) {\n      entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n    }\n\n    if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n      this._emitEntry(entry);\n    }\n\n    if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n      this._pushToQueue(fullpath, entry.path);\n    }\n  }\n\n  _emitEntry(entry) {\n    this._emitter.emit('entry', entry);\n  }\n\n}\n\nexports.default = AsyncReader;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/@nodelib/fs.walk/out/readers/async.js"],"names":["Object","defineProperty","exports","value","events_1","require","fsScandir","fastq","common","reader_1","AsyncReader","default","constructor","_root","_settings","_scandir","scandir","_emitter","EventEmitter","_queue","_worker","bind","concurrency","_isFatalError","_isDestroyed","drain","emit","read","setImmediate","_pushToQueue","basePath","destroy","Error","killAndDrain","onEntry","callback","on","onError","once","onEnd","directory","base","queueItem","push","error","_handleError","item","done","fsScandirSettings","entries","undefined","entry","_handleEntry","isFatalError","fullpath","path","joinPathSegments","name","pathSegmentSeparator","isAppliedFilter","entryFilter","_emitEntry","dirent","isDirectory","deepFilter"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst events_1 = require(\"events\");\r\nconst fsScandir = require(\"@nodelib/fs.scandir\");\r\nconst fastq = require(\"fastq\");\r\nconst common = require(\"./common\");\r\nconst reader_1 = require(\"./reader\");\r\nclass AsyncReader extends reader_1.default {\r\n    constructor(_root, _settings) {\r\n        super(_root, _settings);\r\n        this._settings = _settings;\r\n        this._scandir = fsScandir.scandir;\r\n        this._emitter = new events_1.EventEmitter();\r\n        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);\r\n        this._isFatalError = false;\r\n        this._isDestroyed = false;\r\n        this._queue.drain = () => {\r\n            if (!this._isFatalError) {\r\n                this._emitter.emit('end');\r\n            }\r\n        };\r\n    }\r\n    read() {\r\n        this._isFatalError = false;\r\n        this._isDestroyed = false;\r\n        setImmediate(() => {\r\n            this._pushToQueue(this._root, this._settings.basePath);\r\n        });\r\n        return this._emitter;\r\n    }\r\n    destroy() {\r\n        if (this._isDestroyed) {\r\n            throw new Error('The reader is already destroyed');\r\n        }\r\n        this._isDestroyed = true;\r\n        this._queue.killAndDrain();\r\n    }\r\n    onEntry(callback) {\r\n        this._emitter.on('entry', callback);\r\n    }\r\n    onError(callback) {\r\n        this._emitter.once('error', callback);\r\n    }\r\n    onEnd(callback) {\r\n        this._emitter.once('end', callback);\r\n    }\r\n    _pushToQueue(directory, base) {\r\n        const queueItem = { directory, base };\r\n        this._queue.push(queueItem, (error) => {\r\n            if (error !== null) {\r\n                this._handleError(error);\r\n            }\r\n        });\r\n    }\r\n    _worker(item, done) {\r\n        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {\r\n            if (error !== null) {\r\n                return done(error, undefined);\r\n            }\r\n            for (const entry of entries) {\r\n                this._handleEntry(entry, item.base);\r\n            }\r\n            done(null, undefined);\r\n        });\r\n    }\r\n    _handleError(error) {\r\n        if (!common.isFatalError(this._settings, error)) {\r\n            return;\r\n        }\r\n        this._isFatalError = true;\r\n        this._isDestroyed = true;\r\n        this._emitter.emit('error', error);\r\n    }\r\n    _handleEntry(entry, base) {\r\n        if (this._isDestroyed || this._isFatalError) {\r\n            return;\r\n        }\r\n        const fullpath = entry.path;\r\n        if (base !== undefined) {\r\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\r\n        }\r\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\r\n            this._emitEntry(entry);\r\n        }\r\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\r\n            this._pushToQueue(fullpath, entry.path);\r\n        }\r\n    }\r\n    _emitEntry(entry) {\r\n        this._emitter.emit('entry', entry);\r\n    }\r\n}\r\nexports.default = AsyncReader;\r\n"]},"metadata":{},"sourceType":"script"}