{"ast":null,"code":"var LF = '\\n';\nvar CR = '\\r';\n\nvar LinesAndColumns = function () {\n  function LinesAndColumns(string) {\n    this.string = string;\n    var offsets = [0];\n\n    for (var offset = 0; offset < string.length;) {\n      switch (string[offset]) {\n        case LF:\n          offset += LF.length;\n          offsets.push(offset);\n          break;\n\n        case CR:\n          offset += CR.length;\n\n          if (string[offset] === LF) {\n            offset += LF.length;\n          }\n\n          offsets.push(offset);\n          break;\n\n        default:\n          offset++;\n          break;\n      }\n    }\n\n    this.offsets = offsets;\n  }\n\n  LinesAndColumns.prototype.locationForIndex = function (index) {\n    if (index < 0 || index > this.string.length) {\n      return null;\n    }\n\n    var line = 0;\n    var offsets = this.offsets;\n\n    while (offsets[line + 1] <= index) {\n      line++;\n    }\n\n    var column = index - offsets[line];\n    return {\n      line: line,\n      column: column\n    };\n  };\n\n  LinesAndColumns.prototype.indexForLocation = function (location) {\n    var line = location.line,\n        column = location.column;\n\n    if (line < 0 || line >= this.offsets.length) {\n      return null;\n    }\n\n    if (column < 0 || column > this.lengthOfLine(line)) {\n      return null;\n    }\n\n    return this.offsets[line] + column;\n  };\n\n  LinesAndColumns.prototype.lengthOfLine = function (line) {\n    var offset = this.offsets[line];\n    var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];\n    return nextOffset - offset;\n  };\n\n  return LinesAndColumns;\n}();\n\nexport default LinesAndColumns;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/lines-and-columns/dist/index.mjs"],"names":["LF","CR","LinesAndColumns","string","offsets","offset","length","push","prototype","locationForIndex","index","line","column","indexForLocation","location","lengthOfLine","nextOffset"],"mappings":"AAAA,IAAIA,EAAE,GAAG,IAAT;AACA,IAAIC,EAAE,GAAG,IAAT;;AACA,IAAIC,eAAe,GAAI,YAAY;AAC/B,WAASA,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,SAAKA,MAAL,GAAcA,MAAd;AACA,QAAIC,OAAO,GAAG,CAAC,CAAD,CAAd;;AACA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGF,MAAM,CAACG,MAArC,GAA8C;AAC1C,cAAQH,MAAM,CAACE,MAAD,CAAd;AACI,aAAKL,EAAL;AACIK,UAAAA,MAAM,IAAIL,EAAE,CAACM,MAAb;AACAF,UAAAA,OAAO,CAACG,IAAR,CAAaF,MAAb;AACA;;AACJ,aAAKJ,EAAL;AACII,UAAAA,MAAM,IAAIJ,EAAE,CAACK,MAAb;;AACA,cAAIH,MAAM,CAACE,MAAD,CAAN,KAAmBL,EAAvB,EAA2B;AACvBK,YAAAA,MAAM,IAAIL,EAAE,CAACM,MAAb;AACH;;AACDF,UAAAA,OAAO,CAACG,IAAR,CAAaF,MAAb;AACA;;AACJ;AACIA,UAAAA,MAAM;AACN;AAdR;AAgBH;;AACD,SAAKD,OAAL,GAAeA,OAAf;AACH;;AACDF,EAAAA,eAAe,CAACM,SAAhB,CAA0BC,gBAA1B,GAA6C,UAAUC,KAAV,EAAiB;AAC1D,QAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,KAAKP,MAAL,CAAYG,MAArC,EAA6C;AACzC,aAAO,IAAP;AACH;;AACD,QAAIK,IAAI,GAAG,CAAX;AACA,QAAIP,OAAO,GAAG,KAAKA,OAAnB;;AACA,WAAOA,OAAO,CAACO,IAAI,GAAG,CAAR,CAAP,IAAqBD,KAA5B,EAAmC;AAC/BC,MAAAA,IAAI;AACP;;AACD,QAAIC,MAAM,GAAGF,KAAK,GAAGN,OAAO,CAACO,IAAD,CAA5B;AACA,WAAO;AAAEA,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,MAAM,EAAEA;AAAtB,KAAP;AACH,GAXD;;AAYAV,EAAAA,eAAe,CAACM,SAAhB,CAA0BK,gBAA1B,GAA6C,UAAUC,QAAV,EAAoB;AAC7D,QAAIH,IAAI,GAAGG,QAAQ,CAACH,IAApB;AAAA,QAA0BC,MAAM,GAAGE,QAAQ,CAACF,MAA5C;;AACA,QAAID,IAAI,GAAG,CAAP,IAAYA,IAAI,IAAI,KAAKP,OAAL,CAAaE,MAArC,EAA6C;AACzC,aAAO,IAAP;AACH;;AACD,QAAIM,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAG,KAAKG,YAAL,CAAkBJ,IAAlB,CAA3B,EAAoD;AAChD,aAAO,IAAP;AACH;;AACD,WAAO,KAAKP,OAAL,CAAaO,IAAb,IAAqBC,MAA5B;AACH,GATD;;AAUAV,EAAAA,eAAe,CAACM,SAAhB,CAA0BO,YAA1B,GAAyC,UAAUJ,IAAV,EAAgB;AACrD,QAAIN,MAAM,GAAG,KAAKD,OAAL,CAAaO,IAAb,CAAb;AACA,QAAIK,UAAU,GAAGL,IAAI,KAAK,KAAKP,OAAL,CAAaE,MAAb,GAAsB,CAA/B,GAAmC,KAAKH,MAAL,CAAYG,MAA/C,GAAwD,KAAKF,OAAL,CAAaO,IAAI,GAAG,CAApB,CAAzE;AACA,WAAOK,UAAU,GAAGX,MAApB;AACH,GAJD;;AAKA,SAAOH,eAAP;AACH,CApDsB,EAAvB;;AAqDA,eAAeA,eAAf","sourcesContent":["var LF = '\\n';\nvar CR = '\\r';\nvar LinesAndColumns = (function () {\n    function LinesAndColumns(string) {\n        this.string = string;\n        var offsets = [0];\n        for (var offset = 0; offset < string.length;) {\n            switch (string[offset]) {\n                case LF:\n                    offset += LF.length;\n                    offsets.push(offset);\n                    break;\n                case CR:\n                    offset += CR.length;\n                    if (string[offset] === LF) {\n                        offset += LF.length;\n                    }\n                    offsets.push(offset);\n                    break;\n                default:\n                    offset++;\n                    break;\n            }\n        }\n        this.offsets = offsets;\n    }\n    LinesAndColumns.prototype.locationForIndex = function (index) {\n        if (index < 0 || index > this.string.length) {\n            return null;\n        }\n        var line = 0;\n        var offsets = this.offsets;\n        while (offsets[line + 1] <= index) {\n            line++;\n        }\n        var column = index - offsets[line];\n        return { line: line, column: column };\n    };\n    LinesAndColumns.prototype.indexForLocation = function (location) {\n        var line = location.line, column = location.column;\n        if (line < 0 || line >= this.offsets.length) {\n            return null;\n        }\n        if (column < 0 || column > this.lengthOfLine(line)) {\n            return null;\n        }\n        return this.offsets[line] + column;\n    };\n    LinesAndColumns.prototype.lengthOfLine = function (line) {\n        var offset = this.offsets[line];\n        var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];\n        return nextOffset - offset;\n    };\n    return LinesAndColumns;\n}());\nexport default LinesAndColumns;\n"]},"metadata":{},"sourceType":"module"}