{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['lower', 'upper']\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      const selector = rule.selector;\n\n      if (!selector.includes(':')) {\n        return;\n      }\n\n      const fixedSelector = parseSelector(rule.raws.selector ? rule.raws.selector.raw : rule.selector, result, rule, selectorTree => {\n        selectorTree.walkPseudos(pseudoNode => {\n          const pseudo = pseudoNode.value;\n\n          if (!isStandardSyntaxSelector(pseudo)) {\n            return;\n          }\n\n          if (pseudo.includes('::') || keywordSets.levelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))) {\n            return;\n          }\n\n          const expectedPseudo = expectation === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n          if (pseudo === expectedPseudo) {\n            return;\n          }\n\n          if (context.fix) {\n            pseudoNode.value = expectedPseudo;\n            return;\n          }\n\n          report({\n            message: messages.expected(pseudo, expectedPseudo),\n            node: rule,\n            index: pseudoNode.sourceIndex,\n            ruleName,\n            result\n          });\n        });\n      });\n\n      if (context.fix) {\n        if (rule.raws.selector) {\n          rule.raws.selector.raw = fixedSelector;\n        } else {\n          rule.selector = fixedSelector;\n        }\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-pseudo-class-case/index.js"],"names":["isStandardSyntaxRule","require","isStandardSyntaxSelector","keywordSets","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","expected","actual","rule","expectation","options","context","root","result","validOptions","possible","walkRules","selector","includes","fixedSelector","raws","raw","selectorTree","walkPseudos","pseudoNode","pseudo","value","levelOneAndTwoPseudoElements","has","toLowerCase","slice","expectedPseudo","toUpperCase","fix","message","node","index","sourceIndex","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-pseudo-class-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = rule.selector;\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fixedSelector = parseSelector(\n\t\t\t\trule.raws.selector ? rule.raws.selector.raw : rule.selector,\n\t\t\t\tresult,\n\t\t\t\trule,\n\t\t\t\t(selectorTree) => {\n\t\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\t\tconst pseudo = pseudoNode.value;\n\n\t\t\t\t\t\tif (!isStandardSyntaxSelector(pseudo)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpseudo.includes('::') ||\n\t\t\t\t\t\t\tkeywordSets.levelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expectedPseudo =\n\t\t\t\t\t\t\texpectation === 'lower' ? pseudo.toLowerCase() : pseudo.toUpperCase();\n\n\t\t\t\t\t\tif (pseudo === expectedPseudo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\t\tpseudoNode.value = expectedPseudo;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treport({\n\t\t\t\t\t\t\tmessage: messages.expected(pseudo, expectedPseudo),\n\t\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\t\tindex: pseudoNode.sourceIndex,\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (context.fix) {\n\t\t\t\tif (rule.raws.selector) {\n\t\t\t\t\trule.raws.selector.raw = fixedSelector;\n\t\t\t\t} else {\n\t\t\t\t\trule.selector = fixedSelector;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}