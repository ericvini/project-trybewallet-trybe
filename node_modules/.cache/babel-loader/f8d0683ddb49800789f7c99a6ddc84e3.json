{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = unesc;\nvar whitespace = '[\\\\x20\\\\t\\\\r\\\\n\\\\f]';\nvar unescapeRegExp = new RegExp('\\\\\\\\([\\\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig');\n\nfunction unesc(str) {\n  return str.replace(unescapeRegExp, function (_, escaped, escapedWhitespace) {\n    var high = '0x' + escaped - 0x10000; // NaN means non-codepoint\n    // Workaround erroneous numeric interpretation of +\"0x\"\n    // eslint-disable-next-line no-self-compare\n\n    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n    String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n  });\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/postcss-selector-parser/dist/util/unesc.js"],"names":["exports","__esModule","default","unesc","whitespace","unescapeRegExp","RegExp","str","replace","_","escaped","escapedWhitespace","high","String","fromCharCode","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBC,KAAlB;AACA,IAAIC,UAAU,GAAG,qBAAjB;AACA,IAAIC,cAAc,GAAG,IAAIC,MAAJ,CAAW,uBAAuBF,UAAvB,GAAoC,KAApC,GAA4CA,UAA5C,GAAyD,MAApE,EAA4E,IAA5E,CAArB;;AAEA,SAASD,KAAT,CAAeI,GAAf,EAAoB;AAClB,SAAOA,GAAG,CAACC,OAAJ,CAAYH,cAAZ,EAA4B,UAAUI,CAAV,EAAaC,OAAb,EAAsBC,iBAAtB,EAAyC;AAC1E,QAAIC,IAAI,GAAG,OAAOF,OAAP,GAAiB,OAA5B,CAD0E,CACrC;AACrC;AACA;;AAEA,WAAOE,IAAI,KAAKA,IAAT,IAAiBD,iBAAjB,GAAqCD,OAArC,GAA+CE,IAAI,GAAG,CAAP,GAAW;AACjEC,IAAAA,MAAM,CAACC,YAAP,CAAoBF,IAAI,GAAG,OAA3B,CADsD,GAChB;AACtCC,IAAAA,MAAM,CAACC,YAAP,CAAoBF,IAAI,IAAI,EAAR,GAAa,MAAjC,EAAyCA,IAAI,GAAG,KAAP,GAAe,MAAxD,CAFA;AAGD,GARM,CAAP;AASD;;AAEDG,MAAM,CAACf,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = unesc;\nvar whitespace = '[\\\\x20\\\\t\\\\r\\\\n\\\\f]';\nvar unescapeRegExp = new RegExp('\\\\\\\\([\\\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig');\n\nfunction unesc(str) {\n  return str.replace(unescapeRegExp, function (_, escaped, escapedWhitespace) {\n    var high = '0x' + escaped - 0x10000; // NaN means non-codepoint\n    // Workaround erroneous numeric interpretation of +\"0x\"\n    // eslint-disable-next-line no-self-compare\n\n    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n    String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n  });\n}\n\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}