{"ast":null,"code":"'use strict';\n\nconst balancedMatch = require('balanced-match');\n\nconst styleSearch = require('style-search');\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string} functionName\n * @param {Function} callback\n */\n\n\nmodule.exports = function (source, functionName, callback) {\n  styleSearch({\n    source,\n    target: functionName,\n    functionNames: 'check'\n  }, match => {\n    if (source[match.endIndex] !== '(') {\n      return;\n    }\n\n    const parensMatch = balancedMatch('(', ')', source.substr(match.startIndex));\n\n    if (!parensMatch) {\n      throw new Error(`No parens match: \"${source}\"`);\n    }\n\n    callback(parensMatch.body, match.endIndex + 1);\n  });\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/functionArgumentsSearch.js"],"names":["balancedMatch","require","styleSearch","module","exports","source","functionName","callback","target","functionNames","match","endIndex","parensMatch","substr","startIndex","Error","body"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkBC,YAAlB,EAAgCC,QAAhC,EAA0C;AAC1DL,EAAAA,WAAW,CACV;AACCG,IAAAA,MADD;AAECG,IAAAA,MAAM,EAAEF,YAFT;AAGCG,IAAAA,aAAa,EAAE;AAHhB,GADU,EAMTC,KAAD,IAAW;AACV,QAAIL,MAAM,CAACK,KAAK,CAACC,QAAP,CAAN,KAA2B,GAA/B,EAAoC;AACnC;AACA;;AAED,UAAMC,WAAW,GAAGZ,aAAa,CAAC,GAAD,EAAM,GAAN,EAAWK,MAAM,CAACQ,MAAP,CAAcH,KAAK,CAACI,UAApB,CAAX,CAAjC;;AAEA,QAAI,CAACF,WAAL,EAAkB;AACjB,YAAM,IAAIG,KAAJ,CAAW,qBAAoBV,MAAO,GAAtC,CAAN;AACA;;AAEDE,IAAAA,QAAQ,CAACK,WAAW,CAACI,IAAb,EAAmBN,KAAK,CAACC,QAAN,GAAiB,CAApC,CAAR;AACA,GAlBS,CAAX;AAoBA,CArBD","sourcesContent":["'use strict';\n\nconst balancedMatch = require('balanced-match');\nconst styleSearch = require('style-search');\n\n/**\n * Search a CSS string for functions by name.\n * For every match, invoke the callback, passing the function's\n * \"argument(s) string\" (whatever is inside the parentheses)\n * as an argument.\n *\n * Callback will be called once for every matching function found,\n * with the function's \"argument(s) string\" and its starting index\n * as the arguments.\n *\n * @param {string} source\n * @param {string} functionName\n * @param {Function} callback\n */\nmodule.exports = function (source, functionName, callback) {\n\tstyleSearch(\n\t\t{\n\t\t\tsource,\n\t\t\ttarget: functionName,\n\t\t\tfunctionNames: 'check',\n\t\t},\n\t\t(match) => {\n\t\t\tif (source[match.endIndex] !== '(') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parensMatch = balancedMatch('(', ')', source.substr(match.startIndex));\n\n\t\t\tif (!parensMatch) {\n\t\t\t\tthrow new Error(`No parens match: \"${source}\"`);\n\t\t\t}\n\n\t\t\tcallback(parensMatch.body, match.endIndex + 1);\n\t\t},\n\t);\n};\n"]},"metadata":{},"sourceType":"script"}