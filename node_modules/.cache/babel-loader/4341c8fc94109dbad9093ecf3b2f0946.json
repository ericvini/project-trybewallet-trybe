{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-property-requirelist';\nconst messages = ruleMessages(ruleName, {\n  expected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isObject]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'at-rule-property-required-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n    root.walkAtRules(atRule => {\n      if (!isStandardSyntaxAtRule(atRule)) {\n        return;\n      }\n\n      const {\n        name,\n        nodes\n      } = atRule;\n      const atRuleName = name.toLowerCase();\n\n      if (!list[atRuleName]) {\n        return;\n      }\n\n      list[atRuleName].forEach(property => {\n        const propertyName = property.toLowerCase();\n        const hasProperty = nodes.find(({\n          type,\n          prop\n        }) => type === 'decl' && prop.toLowerCase() === propertyName);\n\n        if (hasProperty) {\n          return;\n        }\n\n        return report({\n          message: messages.expected(propertyName, atRuleName),\n          node: atRule,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-property-requirelist/index.js"],"names":["_","require","isStandardSyntaxAtRule","report","ruleMessages","validateOptions","ruleName","messages","expected","property","atRule","rule","list","root","result","validOptions","actual","possible","isObject","warn","stylelintType","stylelintReference","walkAtRules","name","nodes","atRuleName","toLowerCase","forEach","propertyName","hasProperty","find","type","prop","message","node","meta","deprecated","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,oCAAD,CAAtC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,8BAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAuB,sBAAqBD,QAAS,kBAAiBC,MAAO;AADhD,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGV,eAAe,CAACS,MAAD,EAASR,QAAT,EAAmB;AACtDU,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAACjB,CAAC,CAACkB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA;;AAEDD,IAAAA,MAAM,CAACK,IAAP,CACE,IAAGb,QAAS,sEADd,EAEC;AACCc,MAAAA,aAAa,EAAE,aADhB;AAECC,MAAAA,kBAAkB,EAAG,gEAA+Df,QAAS;AAF9F,KAFD;AAQAO,IAAAA,IAAI,CAACS,WAAL,CAAkBZ,MAAD,IAAY;AAC5B,UAAI,CAACR,sBAAsB,CAACQ,MAAD,CAA3B,EAAqC;AACpC;AACA;;AAED,YAAM;AAAEa,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBd,MAAxB;AACA,YAAMe,UAAU,GAAGF,IAAI,CAACG,WAAL,EAAnB;;AAEA,UAAI,CAACd,IAAI,CAACa,UAAD,CAAT,EAAuB;AACtB;AACA;;AAEDb,MAAAA,IAAI,CAACa,UAAD,CAAJ,CAAiBE,OAAjB,CAA0BlB,QAAD,IAAc;AACtC,cAAMmB,YAAY,GAAGnB,QAAQ,CAACiB,WAAT,EAArB;AAEA,cAAMG,WAAW,GAAGL,KAAK,CAACM,IAAN,CACnB,CAAC;AAAEC,UAAAA,IAAF;AAAQC,UAAAA;AAAR,SAAD,KAAoBD,IAAI,KAAK,MAAT,IAAmBC,IAAI,CAACN,WAAL,OAAuBE,YAD3C,CAApB;;AAIA,YAAIC,WAAJ,EAAiB;AAChB;AACA;;AAED,eAAO1B,MAAM,CAAC;AACb8B,UAAAA,OAAO,EAAE1B,QAAQ,CAACC,QAAT,CAAkBoB,YAAlB,EAAgCH,UAAhC,CADI;AAEbS,UAAAA,IAAI,EAAExB,MAFO;AAGbI,UAAAA,MAHa;AAIbR,UAAAA;AAJa,SAAD,CAAb;AAMA,OAjBD;AAkBA,KA9BD;AA+BA,GAjDD;AAkDA;;AAEDK,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACwB,IAAL,GAAY;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiB3B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'at-rule-property-requirelist';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (property, atRule) => `Expected property \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isObject],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(\n\t\t\t`'${ruleName}' has been deprecated. Instead use 'at-rule-property-required-list'.`,\n\t\t\t{\n\t\t\t\tstylelintType: 'deprecation',\n\t\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t\t},\n\t\t);\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\t\t\tconst atRuleName = name.toLowerCase();\n\n\t\t\tif (!list[atRuleName]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlist[atRuleName].forEach((property) => {\n\t\t\t\tconst propertyName = property.toLowerCase();\n\n\t\t\t\tconst hasProperty = nodes.find(\n\t\t\t\t\t({ type, prop }) => type === 'decl' && prop.toLowerCase() === propertyName,\n\t\t\t\t);\n\n\t\t\t\tif (hasProperty) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn report({\n\t\t\t\t\tmessage: messages.expected(propertyName, atRuleName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}