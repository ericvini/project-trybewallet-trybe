{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nclass EntryFilter {\n  constructor(_settings, _micromatchOptions) {\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n    this.index = new Map();\n  }\n\n  getFilter(positive, negative) {\n    const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\n    const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\n    return entry => this._filter(entry, positiveRe, negativeRe);\n  }\n\n  _filter(entry, positiveRe, negativeRe) {\n    if (this._settings.unique && this._isDuplicateEntry(entry)) {\n      return false;\n    }\n\n    if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\n      return false;\n    }\n\n    if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\n      return false;\n    }\n\n    const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\n    const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);\n\n    if (this._settings.unique && isMatched) {\n      this._createIndexRecord(entry);\n    }\n\n    return isMatched;\n  }\n\n  _isDuplicateEntry(entry) {\n    return this.index.has(entry.path);\n  }\n\n  _createIndexRecord(entry) {\n    this.index.set(entry.path, undefined);\n  }\n\n  _onlyFileFilter(entry) {\n    return this._settings.onlyFiles && !entry.dirent.isFile();\n  }\n\n  _onlyDirectoryFilter(entry) {\n    return this._settings.onlyDirectories && !entry.dirent.isDirectory();\n  }\n\n  _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\n    if (!this._settings.absolute) {\n      return false;\n    }\n\n    const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\n    return utils.pattern.matchAny(fullpath, patternsRe);\n  }\n\n  _isMatchToPatterns(entryPath, patternsRe) {\n    const filepath = utils.path.removeLeadingDotSegment(entryPath);\n    return utils.pattern.matchAny(filepath, patternsRe);\n  }\n\n}\n\nexports.default = EntryFilter;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/node_modules/fast-glob/out/providers/filters/entry.js"],"names":["Object","defineProperty","exports","value","utils","require","EntryFilter","constructor","_settings","_micromatchOptions","index","Map","getFilter","positive","negative","positiveRe","pattern","convertPatternsToRe","negativeRe","entry","_filter","unique","_isDuplicateEntry","_onlyFileFilter","_onlyDirectoryFilter","_isSkippedByAbsoluteNegativePatterns","path","filepath","baseNameMatch","name","isMatched","_isMatchToPatterns","_createIndexRecord","has","set","undefined","onlyFiles","dirent","isFile","onlyDirectories","isDirectory","entryPath","patternsRe","absolute","fullpath","makeAbsolute","cwd","matchAny","removeLeadingDotSegment","default"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nclass EntryFilter {\r\n    constructor(_settings, _micromatchOptions) {\r\n        this._settings = _settings;\r\n        this._micromatchOptions = _micromatchOptions;\r\n        this.index = new Map();\r\n    }\r\n    getFilter(positive, negative) {\r\n        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\r\n        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\r\n        return (entry) => this._filter(entry, positiveRe, negativeRe);\r\n    }\r\n    _filter(entry, positiveRe, negativeRe) {\r\n        if (this._settings.unique && this._isDuplicateEntry(entry)) {\r\n            return false;\r\n        }\r\n        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\r\n            return false;\r\n        }\r\n        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\r\n            return false;\r\n        }\r\n        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\r\n        const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);\r\n        if (this._settings.unique && isMatched) {\r\n            this._createIndexRecord(entry);\r\n        }\r\n        return isMatched;\r\n    }\r\n    _isDuplicateEntry(entry) {\r\n        return this.index.has(entry.path);\r\n    }\r\n    _createIndexRecord(entry) {\r\n        this.index.set(entry.path, undefined);\r\n    }\r\n    _onlyFileFilter(entry) {\r\n        return this._settings.onlyFiles && !entry.dirent.isFile();\r\n    }\r\n    _onlyDirectoryFilter(entry) {\r\n        return this._settings.onlyDirectories && !entry.dirent.isDirectory();\r\n    }\r\n    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\r\n        if (!this._settings.absolute) {\r\n            return false;\r\n        }\r\n        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\r\n        return utils.pattern.matchAny(fullpath, patternsRe);\r\n    }\r\n    _isMatchToPatterns(entryPath, patternsRe) {\r\n        const filepath = utils.path.removeLeadingDotSegment(entryPath);\r\n        return utils.pattern.matchAny(filepath, patternsRe);\r\n    }\r\n}\r\nexports.default = EntryFilter;\r\n"]},"metadata":{},"sourceType":"script"}