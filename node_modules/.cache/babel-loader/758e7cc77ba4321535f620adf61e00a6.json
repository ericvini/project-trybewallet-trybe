{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\nconst messages = ruleMessages(ruleName, {\n  rejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isObject]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      const prop = decl.prop;\n      const value = decl.value;\n      const unprefixedProp = vendor.unprefixed(prop);\n\n      const propList = _.find(list, (units, propIdentifier) => matchesStringOrRegExp(unprefixedProp, propIdentifier));\n\n      if (!propList) {\n        return;\n      }\n\n      valueParser(value).walk(node => {\n        // Ignore wrong units within `url` function\n        if (node.type === 'function' && node.value.toLowerCase() === 'url') {\n          return false;\n        }\n\n        if (node.type === 'string') {\n          return;\n        }\n\n        const unit = getUnitFromValueNode(node);\n\n        if (!unit || unit && !propList.includes(unit.toLowerCase())) {\n          return;\n        }\n\n        report({\n          message: messages.rejected(prop, unit),\n          node: decl,\n          index: declarationValueIndex(decl) + node.sourceIndex,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.js"],"names":["_","require","declarationValueIndex","getUnitFromValueNode","matchesStringOrRegExp","report","ruleMessages","validateOptions","valueParser","vendor","ruleName","messages","rejected","property","unit","rule","list","root","result","validOptions","actual","possible","isObject","walkDecls","decl","prop","value","unprefixedProp","unprefixed","propList","find","units","propIdentifier","walk","node","type","toLowerCase","includes","message","index","sourceIndex","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMO,WAAW,GAAGP,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMS,QAAQ,GAAG,2CAAjB;AAEA,MAAMC,QAAQ,GAAGL,YAAY,CAACI,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,QAAD,EAAWC,IAAX,KAAqB,oBAAmBA,IAAK,mBAAkBD,QAAS;AAD3C,CAAX,CAA7B;;AAIA,SAASE,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGZ,eAAe,CAACW,MAAD,EAASR,QAAT,EAAmB;AACtDU,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAACrB,CAAC,CAACsB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACM,SAAL,CAAgBC,IAAD,IAAU;AACxB,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,YAAMC,KAAK,GAAGF,IAAI,CAACE,KAAnB;AAEA,YAAMC,cAAc,GAAGlB,MAAM,CAACmB,UAAP,CAAkBH,IAAlB,CAAvB;;AAEA,YAAMI,QAAQ,GAAG7B,CAAC,CAAC8B,IAAF,CAAOd,IAAP,EAAa,CAACe,KAAD,EAAQC,cAAR,KAC7B5B,qBAAqB,CAACuB,cAAD,EAAiBK,cAAjB,CADL,CAAjB;;AAIA,UAAI,CAACH,QAAL,EAAe;AACd;AACA;;AAEDrB,MAAAA,WAAW,CAACkB,KAAD,CAAX,CAAmBO,IAAnB,CAAyBC,IAAD,IAAU;AACjC;AACA,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAd,IAA4BD,IAAI,CAACR,KAAL,CAAWU,WAAX,OAA6B,KAA7D,EAAoE;AACnE,iBAAO,KAAP;AACA;;AAED,YAAIF,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AAC3B;AACA;;AAED,cAAMrB,IAAI,GAAGX,oBAAoB,CAAC+B,IAAD,CAAjC;;AAEA,YAAI,CAACpB,IAAD,IAAUA,IAAI,IAAI,CAACe,QAAQ,CAACQ,QAAT,CAAkBvB,IAAI,CAACsB,WAAL,EAAlB,CAAvB,EAA+D;AAC9D;AACA;;AAED/B,QAAAA,MAAM,CAAC;AACNiC,UAAAA,OAAO,EAAE3B,QAAQ,CAACC,QAAT,CAAkBa,IAAlB,EAAwBX,IAAxB,CADH;AAENoB,UAAAA,IAAI,EAAEV,IAFA;AAGNe,UAAAA,KAAK,EAAErC,qBAAqB,CAACsB,IAAD,CAArB,GAA8BU,IAAI,CAACM,WAHpC;AAINtB,UAAAA,MAJM;AAKNR,UAAAA;AALM,SAAD,CAAN;AAOA,OAvBD;AAwBA,KAtCD;AAuCA,GAjDD;AAkDA;;AAEDK,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACA8B,MAAM,CAACC,OAAP,GAAiB3B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst getUnitFromValueNode = require('../../utils/getUnitFromValueNode');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-property-unit-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isObject],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\n\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\n\t\t\tconst propList = _.find(list, (units, propIdentifier) =>\n\t\t\t\tmatchesStringOrRegExp(unprefixedProp, propIdentifier),\n\t\t\t);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((node) => {\n\t\t\t\t// Ignore wrong units within `url` function\n\t\t\t\tif (node.type === 'function' && node.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst unit = getUnitFromValueNode(node);\n\n\t\t\t\tif (!unit || (unit && !propList.includes(unit.toLowerCase()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(prop, unit),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}