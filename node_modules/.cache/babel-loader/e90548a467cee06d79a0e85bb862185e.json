{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _mapValues2 = _interopRequireDefault(require(\"lodash/mapValues\"));\n\nvar _alignTableData = _interopRequireDefault(require(\"./alignTableData\"));\n\nvar _calculateRowHeightIndex = _interopRequireDefault(require(\"./calculateRowHeightIndex\"));\n\nvar _drawBorder = require(\"./drawBorder\");\n\nvar _drawRow = _interopRequireDefault(require(\"./drawRow\"));\n\nvar _makeStreamConfig = _interopRequireDefault(require(\"./makeStreamConfig\"));\n\nvar _mapDataUsingRowHeightIndex = _interopRequireDefault(require(\"./mapDataUsingRowHeightIndex\"));\n\nvar _padTableData = _interopRequireDefault(require(\"./padTableData\"));\n\nvar _stringifyTableData = _interopRequireDefault(require(\"./stringifyTableData\"));\n\nvar _truncateTableData = _interopRequireDefault(require(\"./truncateTableData\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @param {Array} data\n * @param {object} config\n * @returns {Array}\n */\n\n\nconst prepareData = (data, config) => {\n  let rows;\n  rows = (0, _stringifyTableData.default)(data);\n  rows = (0, _truncateTableData.default)(data, config);\n  const rowHeightIndex = (0, _calculateRowHeightIndex.default)(rows, config);\n  rows = (0, _mapDataUsingRowHeightIndex.default)(rows, rowHeightIndex, config);\n  rows = (0, _alignTableData.default)(rows, config);\n  rows = (0, _padTableData.default)(rows, config);\n  return rows;\n};\n/**\n * @param {string[]} row\n * @param {number[]} columnWidthIndex\n * @param {object} config\n * @returns {undefined}\n */\n\n\nconst create = (row, columnWidthIndex, config) => {\n  const rows = prepareData([row], config);\n  const body = rows.map(literalRow => {\n    return (0, _drawRow.default)(literalRow, config.border);\n  }).join('');\n  let output;\n  output = '';\n  output += (0, _drawBorder.drawBorderTop)(columnWidthIndex, config.border);\n  output += body;\n  output += (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);\n  output = output.trimEnd();\n  process.stdout.write(output);\n};\n/**\n * @param {string[]} row\n * @param {number[]} columnWidthIndex\n * @param {object} config\n * @returns {undefined}\n */\n\n\nconst append = (row, columnWidthIndex, config) => {\n  const rows = prepareData([row], config);\n  const body = rows.map(literalRow => {\n    return (0, _drawRow.default)(literalRow, config.border);\n  }).join('');\n  let output = '';\n  const bottom = (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);\n\n  if (bottom !== '\\n') {\n    output = '\\r\\u001B[K';\n  }\n\n  output += (0, _drawBorder.drawBorderJoin)(columnWidthIndex, config.border);\n  output += body;\n  output += bottom;\n  output = output.trimEnd();\n  process.stdout.write(output);\n};\n/**\n * @param {object} userConfig\n * @returns {object}\n */\n\n\nconst createStream = (userConfig = {}) => {\n  const config = (0, _makeStreamConfig.default)(userConfig);\n  const columnWidthIndex = Object.values((0, _mapValues2.default)(config.columns, column => {\n    return column.width + column.paddingLeft + column.paddingRight;\n  }));\n  let empty;\n  empty = true;\n  return {\n    /**\n     * @param {string[]} row\n     * @returns {undefined}\n     */\n    write: row => {\n      if (row.length !== config.columnCount) {\n        throw new Error('Row cell count does not match the config.columnCount.');\n      }\n\n      if (empty) {\n        empty = false;\n        return create(row, columnWidthIndex, config);\n      } else {\n        return append(row, columnWidthIndex, config);\n      }\n    }\n  };\n};\n\nvar _default = createStream;\nexports.default = _default;","map":{"version":3,"sources":["../src/createStream.js"],"names":["prepareData","rows","rowHeightIndex","create","body","literalRow","config","output","process","append","bottom","userConfig","columnWidthIndex","column","empty","write","row"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport alignTableData from './alignTableData';\nimport calculateRowHeightIndex from './calculateRowHeightIndex';\nimport {\n  drawBorderBottom,\n  drawBorderJoin,\n  drawBorderTop,\n} from './drawBorder';\nimport drawRow from './drawRow';\nimport makeStreamConfig from './makeStreamConfig';\nimport mapDataUsingRowHeightIndex from './mapDataUsingRowHeightIndex';\nimport padTableData from './padTableData';\nimport stringifyTableData from './stringifyTableData';\nimport truncateTableData from './truncateTableData';\n\n/**\n * @param {Array} data\n * @param {object} config\n * @returns {Array}\n */\nconst prepareData = (data, config) => {\n  let rows;\n\n  rows = stringifyTableData(data);\n\n  rows = truncateTableData(data, config);\n\n  const rowHeightIndex = calculateRowHeightIndex(rows, config);\n\n  rows = mapDataUsingRowHeightIndex(rows, rowHeightIndex, config);\n  rows = alignTableData(rows, config);\n  rows = padTableData(rows, config);\n\n  return rows;\n};\n\n/**\n * @param {string[]} row\n * @param {number[]} columnWidthIndex\n * @param {object} config\n * @returns {undefined}\n */\nconst create = (row, columnWidthIndex, config) => {\n  const rows = prepareData([row], config);\n\n  const body = rows.map((literalRow) => {\n    return drawRow(literalRow, config.border);\n  }).join('');\n\n  let output;\n\n  output = '';\n\n  output += drawBorderTop(columnWidthIndex, config.border);\n  output += body;\n  output += drawBorderBottom(columnWidthIndex, config.border);\n\n  output = output.trimEnd();\n\n  process.stdout.write(output);\n};\n\n/**\n * @param {string[]} row\n * @param {number[]} columnWidthIndex\n * @param {object} config\n * @returns {undefined}\n */\nconst append = (row, columnWidthIndex, config) => {\n  const rows = prepareData([row], config);\n\n  const body = rows.map((literalRow) => {\n    return drawRow(literalRow, config.border);\n  }).join('');\n\n  let output = '';\n  const bottom = drawBorderBottom(columnWidthIndex, config.border);\n\n  if (bottom !== '\\n') {\n    output = '\\r\\u001B[K';\n  }\n\n  output += drawBorderJoin(columnWidthIndex, config.border);\n  output += body;\n  output += bottom;\n\n  output = output.trimEnd();\n\n  process.stdout.write(output);\n};\n\n/**\n * @param {object} userConfig\n * @returns {object}\n */\nexport default (userConfig = {}) => {\n  const config = makeStreamConfig(userConfig);\n\n  const columnWidthIndex = Object.values(_.mapValues(config.columns, (column) => {\n    return column.width + column.paddingLeft + column.paddingRight;\n  }));\n\n  let empty;\n\n  empty = true;\n\n  return {\n    /**\n     * @param {string[]} row\n     * @returns {undefined}\n     */\n    write: (row) => {\n      if (row.length !== config.columnCount) {\n        throw new Error('Row cell count does not match the config.columnCount.');\n      }\n\n      if (empty) {\n        empty = false;\n\n        return create(row, columnWidthIndex, config);\n      } else {\n        return append(row, columnWidthIndex, config);\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}