{"ast":null,"code":"'use strict';\n\nconst {\n  URL\n} = require('url');\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\n\n\nmodule.exports = function (urlString) {\n  let protocol = null;\n\n  try {\n    protocol = new URL(urlString).protocol;\n  } catch (err) {\n    return null;\n  }\n\n  if (protocol === null || typeof protocol === 'undefined') {\n    return null;\n  }\n\n  const scheme = protocol.slice(0, -1); // strip trailing `:`\n  // The URL spec does not require a scheme to be followed by `//`, but checking\n  // for it allows this rule to differentiate <scheme>:<hostname> urls from\n  // <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\n  const slashIndex = protocol.length;\n  const expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n  const isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n  if (isSchemeLessUrl) {\n    return null;\n  }\n\n  return scheme;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/getSchemeFromUrl.js"],"names":["URL","require","module","exports","urlString","protocol","err","scheme","slice","slashIndex","length","expectedSlashes","isSchemeLessUrl"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,KAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;AACrC,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAI;AACHA,IAAAA,QAAQ,GAAG,IAAIL,GAAJ,CAAQI,SAAR,EAAmBC,QAA9B;AACA,GAFD,CAEE,OAAOC,GAAP,EAAY;AACb,WAAO,IAAP;AACA;;AAED,MAAID,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,WAA7C,EAA0D;AACzD,WAAO,IAAP;AACA;;AAED,QAAME,MAAM,GAAGF,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAf,CAbqC,CAaC;AAEtC;AACA;AACA;;AACA,QAAMC,UAAU,GAAGJ,QAAQ,CAACK,MAA5B;AACA,QAAMC,eAAe,GAAGP,SAAS,CAACI,KAAV,CAAgBC,UAAhB,EAA4BA,UAAU,GAAG,CAAzC,CAAxB;AACA,QAAMG,eAAe,GAAGD,eAAe,KAAK,IAApB,IAA4BJ,MAAM,KAAK,MAA/D;;AAEA,MAAIK,eAAJ,EAAqB;AACpB,WAAO,IAAP;AACA;;AAED,SAAOL,MAAP;AACA,CA3BD","sourcesContent":["'use strict';\n\nconst { URL } = require('url');\n\n/**\n * Get unit from value node\n *\n * Returns `null` if the unit is not found.\n *\n * @param {string} urlString\n */\nmodule.exports = function (urlString) {\n\tlet protocol = null;\n\n\ttry {\n\t\tprotocol = new URL(urlString).protocol;\n\t} catch (err) {\n\t\treturn null;\n\t}\n\n\tif (protocol === null || typeof protocol === 'undefined') {\n\t\treturn null;\n\t}\n\n\tconst scheme = protocol.slice(0, -1); // strip trailing `:`\n\n\t// The URL spec does not require a scheme to be followed by `//`, but checking\n\t// for it allows this rule to differentiate <scheme>:<hostname> urls from\n\t// <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.\n\tconst slashIndex = protocol.length;\n\tconst expectedSlashes = urlString.slice(slashIndex, slashIndex + 2);\n\tconst isSchemeLessUrl = expectedSlashes !== '//' && scheme !== 'data';\n\n\tif (isSchemeLessUrl) {\n\t\treturn null;\n\t}\n\n\treturn scheme;\n};\n"]},"metadata":{},"sourceType":"script"}