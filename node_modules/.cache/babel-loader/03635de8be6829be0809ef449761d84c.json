{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-nested-pattern';\nconst messages = ruleMessages(ruleName, {\n  expected: (selector, pattern) => `Expected nested selector \"${selector}\" to match pattern \"${pattern}\"`\n});\n\nfunction rule(pattern) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: pattern,\n      possible: [_.isRegExp, _.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern; // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n    root.walkRules(rule => {\n      if (rule.parent.type !== 'rule') {\n        return;\n      }\n\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      const selector = rule.selector;\n\n      if (normalizedPattern.test(selector)) {\n        return;\n      }\n\n      report({\n        result,\n        ruleName,\n        message: messages.expected(selector, pattern),\n        node: rule\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-nested-pattern/index.js"],"names":["_","require","isStandardSyntaxRule","report","ruleMessages","validateOptions","ruleName","messages","expected","selector","pattern","rule","root","result","validOptions","actual","possible","isRegExp","isString","normalizedPattern","RegExp","walkRules","parent","type","test","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMK,QAAQ,GAAG,yBAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,QAAD,EAAWC,OAAX,KACR,6BAA4BD,QAAS,uBAAsBC,OAAQ;AAF9B,CAAX,CAA7B;;AAKA,SAASC,IAAT,CAAcD,OAAd,EAAuB;AACtB,SAAO,CAACE,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGT,eAAe,CAACQ,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEL,OAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAAChB,CAAC,CAACiB,QAAH,EAAajB,CAAC,CAACkB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAED,UAAMK,iBAAiB,GAAGnB,CAAC,CAACkB,QAAF,CAAWR,OAAX,IAAsB,IAAIU,MAAJ,CAAWV,OAAX,CAAtB,GAA4CA,OAAtE,CAVwB,CAYxB;AACA;;AACAE,IAAAA,IAAI,CAACS,SAAL,CAAgBV,IAAD,IAAU;AACxB,UAAIA,IAAI,CAACW,MAAL,CAAYC,IAAZ,KAAqB,MAAzB,EAAiC;AAChC;AACA;;AAED,UAAI,CAACrB,oBAAoB,CAACS,IAAD,CAAzB,EAAiC;AAChC;AACA;;AAED,YAAMF,QAAQ,GAAGE,IAAI,CAACF,QAAtB;;AAEA,UAAIU,iBAAiB,CAACK,IAAlB,CAAuBf,QAAvB,CAAJ,EAAsC;AACrC;AACA;;AAEDN,MAAAA,MAAM,CAAC;AACNU,QAAAA,MADM;AAENP,QAAAA,QAFM;AAGNmB,QAAAA,OAAO,EAAElB,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,EAA4BC,OAA5B,CAHH;AAINgB,QAAAA,IAAI,EAAEf;AAJA,OAAD,CAAN;AAMA,KArBD;AAsBA,GApCD;AAqCA;;AAEDA,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAoB,MAAM,CAACC,OAAP,GAAiBjB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-nested-pattern';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, pattern) =>\n\t\t`Expected nested selector \"${selector}\" to match pattern \"${pattern}\"`,\n});\n\nfunction rule(pattern) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: pattern,\n\t\t\tpossible: [_.isRegExp, _.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern;\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (rule.parent.type !== 'rule') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selector = rule.selector;\n\n\t\t\tif (normalizedPattern.test(selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.expected(selector, pattern),\n\t\t\t\tnode: rule,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}