{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\nconst messages = ruleMessages(ruleName, {\n  expected: (selector, max) => `Expected \"${selector}\" to have no more than ${max} compound ${max === 1 ? 'selector' : 'selectors'}`\n});\n\nfunction rule(max) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: max,\n      possible: [// TODO: Issue #4985\n      // eslint-disable-next-line no-shadow\n      function (max) {\n        return typeof max === 'number' && max > 0;\n      }]\n    });\n\n    if (!validOptions) {\n      return;\n    } // Finds actual selectors in selectorNode object and checks them\n    // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    function checkSelector(selectorNode, rule) {\n      let compoundCount = 1;\n      selectorNode.each(childNode => {\n        // Only traverse inside actual selectors and context functional pseudo-classes\n        if (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n          checkSelector(childNode, rule);\n        } // Compound selectors are separated by combinators, so increase count when meeting one\n\n\n        if (childNode.type === 'combinator') {\n          compoundCount++;\n        }\n      });\n\n      if (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && compoundCount > max) {\n        report({\n          ruleName,\n          result,\n          node: rule,\n          message: messages.expected(selectorNode, max),\n          word: selectorNode\n        });\n      }\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      } // Using `rule.selectors` gets us each selector if there is a comma separated set\n\n\n      rule.selectors.forEach(selector => {\n        resolvedNestedSelector(selector, rule).forEach(resolvedSelector => {\n          // Process each resolved selector with `checkSelector` via postcss-selector-parser\n          parseSelector(resolvedSelector, result, rule, s => checkSelector(s, rule));\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.js"],"names":["isContextFunctionalPseudoClass","require","isStandardSyntaxRule","parseSelector","report","resolvedNestedSelector","ruleMessages","validateOptions","ruleName","messages","expected","selector","max","rule","root","result","validOptions","actual","possible","checkSelector","selectorNode","compoundCount","each","childNode","type","node","message","word","walkRules","selectors","forEach","resolvedSelector","s","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-compound-selectors';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} compound ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nfunction rule(max) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: max,\n\t\t\tpossible: [\n\t\t\t\t// TODO: Issue #4985\n\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\tfunction (max) {\n\t\t\t\t\treturn typeof max === 'number' && max > 0;\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Finds actual selectors in selectorNode object and checks them\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\tfunction checkSelector(selectorNode, rule) {\n\t\t\tlet compoundCount = 1;\n\n\t\t\tselectorNode.each((childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, rule);\n\t\t\t\t}\n\n\t\t\t\t// Compound selectors are separated by combinators, so increase count when meeting one\n\t\t\t\tif (childNode.type === 'combinator') {\n\t\t\t\t\tcompoundCount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && compoundCount > max) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: rule,\n\t\t\t\t\tmessage: messages.expected(selectorNode, max),\n\t\t\t\t\tword: selectorNode,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using `rule.selectors` gets us each selector if there is a comma separated set\n\t\t\trule.selectors.forEach((selector) => {\n\t\t\t\tresolvedNestedSelector(selector, rule).forEach((resolvedSelector) => {\n\t\t\t\t\t// Process each resolved selector with `checkSelector` via postcss-selector-parser\n\t\t\t\t\tparseSelector(resolvedSelector, result, rule, (s) => checkSelector(s, rule));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}