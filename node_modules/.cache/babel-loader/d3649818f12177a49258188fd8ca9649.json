{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _alignTableData = _interopRequireDefault(require(\"./alignTableData\"));\n\nvar _calculateCellWidthIndex = _interopRequireDefault(require(\"./calculateCellWidthIndex\"));\n\nvar _calculateRowHeightIndex = _interopRequireDefault(require(\"./calculateRowHeightIndex\"));\n\nvar _drawTable = _interopRequireDefault(require(\"./drawTable\"));\n\nvar _makeConfig = _interopRequireDefault(require(\"./makeConfig\"));\n\nvar _mapDataUsingRowHeightIndex = _interopRequireDefault(require(\"./mapDataUsingRowHeightIndex\"));\n\nvar _padTableData = _interopRequireDefault(require(\"./padTableData\"));\n\nvar _stringifyTableData = _interopRequireDefault(require(\"./stringifyTableData\"));\n\nvar _truncateTableData = _interopRequireDefault(require(\"./truncateTableData\"));\n\nvar _validateTableData = _interopRequireDefault(require(\"./validateTableData\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @typedef {string} table~cell\n */\n\n/**\n * @typedef {table~cell[]} table~row\n */\n\n/**\n * @typedef {object} table~columns\n * @property {string} alignment Cell content alignment (enum: left, center, right) (default: left).\n * @property {number} width Column width (default: auto).\n * @property {number} truncate Number of characters are which the content will be truncated (default: Infinity).\n * @property {boolean} wrapWord When true the text is broken at the nearest space or one of the special characters\n * @property {number} paddingLeft Cell content padding width left (default: 1).\n * @property {number} paddingRight Cell content padding width right (default: 1).\n */\n\n/**\n * @typedef {object} table~border\n * @property {string} topBody\n * @property {string} topJoin\n * @property {string} topLeft\n * @property {string} topRight\n * @property {string} bottomBody\n * @property {string} bottomJoin\n * @property {string} bottomLeft\n * @property {string} bottomRight\n * @property {string} bodyLeft\n * @property {string} bodyRight\n * @property {string} bodyJoin\n * @property {string} joinBody\n * @property {string} joinLeft\n * @property {string} joinRight\n * @property {string} joinJoin\n */\n\n/**\n * Used to tell whether to draw a horizontal line.\n * This callback is called for each non-content line of the table.\n * The default behavior is to always return true.\n *\n * @typedef {Function} drawHorizontalLine\n * @param {number} index\n * @param {number} size\n * @returns {boolean}\n */\n\n/**\n * @typedef {object} table~config\n * @property {table~border} border\n * @property {table~columns[]} columns Column specific configuration.\n * @property {table~columns} columnDefault Default values for all columns. Column specific settings overwrite the default values.\n * @property {table~drawHorizontalLine} drawHorizontalLine\n * @property {table~singleLine} singleLine Horizontal lines inside the table are not drawn.\n */\n\n/**\n * Generates a text table.\n *\n * @param {table~row[]} data\n * @param {table~config} userConfig\n * @returns {string}\n */\n\n\nconst table = (data, userConfig = {}) => {\n  let rows;\n  (0, _validateTableData.default)(data);\n  rows = (0, _stringifyTableData.default)(data);\n  const config = (0, _makeConfig.default)(rows, userConfig);\n  rows = (0, _truncateTableData.default)(data, config);\n  const rowHeightIndex = (0, _calculateRowHeightIndex.default)(rows, config);\n  rows = (0, _mapDataUsingRowHeightIndex.default)(rows, rowHeightIndex, config);\n  rows = (0, _alignTableData.default)(rows, config);\n  rows = (0, _padTableData.default)(rows, config);\n  const cellWidthIndex = (0, _calculateCellWidthIndex.default)(rows[0]);\n  return (0, _drawTable.default)(rows, config.border, cellWidthIndex, rowHeightIndex, config.drawHorizontalLine, config.singleLine);\n};\n\nvar _default = table;\nexports.default = _default;","map":{"version":3,"sources":["../src/table.js"],"names":["data","userConfig","rows","config","rowHeightIndex","cellWidthIndex"],"mappings":";;;;;;;AAAA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,wBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;AACA,IAAA,wBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,2BAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;;;;;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;eACgBA,I,EAAMC,UAAU,GAAG,E,KAAO;AACxC,MAAA,IAAA;AAEA,GAAA,GAAA,kBAAA,CAAA,OAAA,EAAA,IAAA;AAEAC,EAAAA,IAAI,GAAG,CAAA,GAAA,mBAAA,CAAA,OAAA,EAAPA,IAAO,CAAPA;AAEA,QAAMC,MAAM,GAAG,CAAA,GAAA,WAAA,CAAA,OAAA,EAAA,IAAA,EAAf,UAAe,CAAf;AAEAD,EAAAA,IAAI,GAAG,CAAA,GAAA,kBAAA,CAAA,OAAA,EAAA,IAAA,EAAPA,MAAO,CAAPA;AAEA,QAAME,cAAc,GAAG,CAAA,GAAA,wBAAA,CAAA,OAAA,EAAA,IAAA,EAAvB,MAAuB,CAAvB;AAEAF,EAAAA,IAAI,GAAG,CAAA,GAAA,2BAAA,CAAA,OAAA,EAAA,IAAA,EAAA,cAAA,EAAPA,MAAO,CAAPA;AACAA,EAAAA,IAAI,GAAG,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,IAAA,EAAPA,MAAO,CAAPA;AACAA,EAAAA,IAAI,GAAG,CAAA,GAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EAAPA,MAAO,CAAPA;AAEA,QAAMG,cAAc,GAAG,CAAA,GAAA,wBAAA,CAAA,OAAA,EAAwBH,IAAI,CAAnD,CAAmD,CAA5B,CAAvB;AAEA,SAAO,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,IAAA,EAAgBC,MAAM,CAAtB,MAAA,EAAA,cAAA,EAAA,cAAA,EAA+DA,MAAM,CAArE,kBAAA,EAA0FA,MAAM,CAAvG,UAAO,CAAP","sourcesContent":["import alignTableData from './alignTableData';\nimport calculateCellWidthIndex from './calculateCellWidthIndex';\nimport calculateRowHeightIndex from './calculateRowHeightIndex';\nimport drawTable from './drawTable';\nimport makeConfig from './makeConfig';\nimport mapDataUsingRowHeightIndex from './mapDataUsingRowHeightIndex';\nimport padTableData from './padTableData';\nimport stringifyTableData from './stringifyTableData';\nimport truncateTableData from './truncateTableData';\nimport validateTableData from './validateTableData';\n\n/**\n * @typedef {string} table~cell\n */\n\n/**\n * @typedef {table~cell[]} table~row\n */\n\n/**\n * @typedef {object} table~columns\n * @property {string} alignment Cell content alignment (enum: left, center, right) (default: left).\n * @property {number} width Column width (default: auto).\n * @property {number} truncate Number of characters are which the content will be truncated (default: Infinity).\n * @property {boolean} wrapWord When true the text is broken at the nearest space or one of the special characters\n * @property {number} paddingLeft Cell content padding width left (default: 1).\n * @property {number} paddingRight Cell content padding width right (default: 1).\n */\n\n/**\n * @typedef {object} table~border\n * @property {string} topBody\n * @property {string} topJoin\n * @property {string} topLeft\n * @property {string} topRight\n * @property {string} bottomBody\n * @property {string} bottomJoin\n * @property {string} bottomLeft\n * @property {string} bottomRight\n * @property {string} bodyLeft\n * @property {string} bodyRight\n * @property {string} bodyJoin\n * @property {string} joinBody\n * @property {string} joinLeft\n * @property {string} joinRight\n * @property {string} joinJoin\n */\n\n/**\n * Used to tell whether to draw a horizontal line.\n * This callback is called for each non-content line of the table.\n * The default behavior is to always return true.\n *\n * @typedef {Function} drawHorizontalLine\n * @param {number} index\n * @param {number} size\n * @returns {boolean}\n */\n\n/**\n * @typedef {object} table~config\n * @property {table~border} border\n * @property {table~columns[]} columns Column specific configuration.\n * @property {table~columns} columnDefault Default values for all columns. Column specific settings overwrite the default values.\n * @property {table~drawHorizontalLine} drawHorizontalLine\n * @property {table~singleLine} singleLine Horizontal lines inside the table are not drawn.\n */\n\n/**\n * Generates a text table.\n *\n * @param {table~row[]} data\n * @param {table~config} userConfig\n * @returns {string}\n */\nexport default (data, userConfig = {}) => {\n  let rows;\n\n  validateTableData(data);\n\n  rows = stringifyTableData(data);\n\n  const config = makeConfig(rows, userConfig);\n\n  rows = truncateTableData(data, config);\n\n  const rowHeightIndex = calculateRowHeightIndex(rows, config);\n\n  rows = mapDataUsingRowHeightIndex(rows, rowHeightIndex, config);\n  rows = alignTableData(rows, config);\n  rows = padTableData(rows, config);\n\n  const cellWidthIndex = calculateCellWidthIndex(rows[0]);\n\n  return drawTable(rows, config.border, cellWidthIndex, rowHeightIndex, config.drawHorizontalLine, config.singleLine);\n};\n"]},"metadata":{},"sourceType":"script"}