{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst isCustomPropertySet = require('../utils/isCustomPropertySet');\n\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\n\n\nmodule.exports = function (rule) {\n  if (rule.type !== 'rule') {\n    return false;\n  } // Get full selector\n\n\n  const selector = _.get(rule, 'raws.selector.raw', rule.selector);\n\n  if (!isStandardSyntaxSelector(rule.selector)) {\n    return false;\n  } // Custom property set (e.g. --custom-property-set: {})\n\n\n  if (isCustomPropertySet(rule)) {\n    return false;\n  } // Called Less mixin (e.g. a { .mixin() })\n  // @ts-ignore TODO TYPES support LESS and SASS types somehow\n\n\n  if (rule.mixin) {\n    return false;\n  } // Less detached rulesets\n\n\n  if (selector.startsWith('@') && selector.endsWith(':')) {\n    return false;\n  } // Ignore Less &:extend rule\n\n\n  if ('extend' in rule && rule.extend) {\n    return false;\n  } // Ignore mixin or &:extend rule\n  // https://github.com/shellscape/postcss-less/blob/master/lib/less-parser.js#L52\n  // @ts-ignore TODO TYPES support LESS and SASS types somehow\n\n\n  if (rule.params && rule.params[0]) {\n    return false;\n  } // Non-outputting Less mixin definition (e.g. .mixin() {})\n\n\n  if (selector.endsWith(')') && !selector.includes(':')) {\n    return false;\n  } // Less guards\n\n\n  if (/when\\s+(not\\s+)*\\(/.test(selector)) {\n    return false;\n  } // Ignore Scss nested properties\n\n\n  if (selector.endsWith(':')) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/isStandardSyntaxRule.js"],"names":["_","require","isCustomPropertySet","isStandardSyntaxSelector","module","exports","rule","type","selector","get","mixin","startsWith","endsWith","extend","params","includes","test"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,8BAAD,CAAnC;;AACA,MAAME,wBAAwB,GAAGF,OAAO,CAAC,mCAAD,CAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAChC,MAAIA,IAAI,CAACC,IAAL,KAAc,MAAlB,EAA0B;AACzB,WAAO,KAAP;AACA,GAH+B,CAKhC;;;AACA,QAAMC,QAAQ,GAAGR,CAAC,CAACS,GAAF,CAAMH,IAAN,EAAY,mBAAZ,EAAiCA,IAAI,CAACE,QAAtC,CAAjB;;AAEA,MAAI,CAACL,wBAAwB,CAACG,IAAI,CAACE,QAAN,CAA7B,EAA8C;AAC7C,WAAO,KAAP;AACA,GAV+B,CAYhC;;;AACA,MAAIN,mBAAmB,CAACI,IAAD,CAAvB,EAA+B;AAC9B,WAAO,KAAP;AACA,GAf+B,CAiBhC;AACA;;;AACA,MAAIA,IAAI,CAACI,KAAT,EAAgB;AACf,WAAO,KAAP;AACA,GArB+B,CAuBhC;;;AACA,MAAIF,QAAQ,CAACG,UAAT,CAAoB,GAApB,KAA4BH,QAAQ,CAACI,QAAT,CAAkB,GAAlB,CAAhC,EAAwD;AACvD,WAAO,KAAP;AACA,GA1B+B,CA4BhC;;;AACA,MAAI,YAAYN,IAAZ,IAAoBA,IAAI,CAACO,MAA7B,EAAqC;AACpC,WAAO,KAAP;AACA,GA/B+B,CAiChC;AACA;AACA;;;AACA,MAAIP,IAAI,CAACQ,MAAL,IAAeR,IAAI,CAACQ,MAAL,CAAY,CAAZ,CAAnB,EAAmC;AAClC,WAAO,KAAP;AACA,GAtC+B,CAwChC;;;AACA,MAAIN,QAAQ,CAACI,QAAT,CAAkB,GAAlB,KAA0B,CAACJ,QAAQ,CAACO,QAAT,CAAkB,GAAlB,CAA/B,EAAuD;AACtD,WAAO,KAAP;AACA,GA3C+B,CA6ChC;;;AACA,MAAI,qBAAqBC,IAArB,CAA0BR,QAA1B,CAAJ,EAAyC;AACxC,WAAO,KAAP;AACA,GAhD+B,CAkDhC;;;AACA,MAAIA,QAAQ,CAACI,QAAT,CAAkB,GAAlB,CAAJ,EAA4B;AAC3B,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA,CAxDD","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst isCustomPropertySet = require('../utils/isCustomPropertySet');\nconst isStandardSyntaxSelector = require('../utils/isStandardSyntaxSelector');\n\n/**\n * Check whether a Node is a standard rule\n *\n * @param {import('postcss').Rule | import('postcss-less').Rule} rule\n * @returns {boolean}\n */\nmodule.exports = function (rule) {\n\tif (rule.type !== 'rule') {\n\t\treturn false;\n\t}\n\n\t// Get full selector\n\tconst selector = _.get(rule, 'raws.selector.raw', rule.selector);\n\n\tif (!isStandardSyntaxSelector(rule.selector)) {\n\t\treturn false;\n\t}\n\n\t// Custom property set (e.g. --custom-property-set: {})\n\tif (isCustomPropertySet(rule)) {\n\t\treturn false;\n\t}\n\n\t// Called Less mixin (e.g. a { .mixin() })\n\t// @ts-ignore TODO TYPES support LESS and SASS types somehow\n\tif (rule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Less detached rulesets\n\tif (selector.startsWith('@') && selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less &:extend rule\n\tif ('extend' in rule && rule.extend) {\n\t\treturn false;\n\t}\n\n\t// Ignore mixin or &:extend rule\n\t// https://github.com/shellscape/postcss-less/blob/master/lib/less-parser.js#L52\n\t// @ts-ignore TODO TYPES support LESS and SASS types somehow\n\tif (rule.params && rule.params[0]) {\n\t\treturn false;\n\t}\n\n\t// Non-outputting Less mixin definition (e.g. .mixin() {})\n\tif (selector.endsWith(')') && !selector.includes(':')) {\n\t\treturn false;\n\t}\n\n\t// Less guards\n\tif (/when\\s+(not\\s+)*\\(/.test(selector)) {\n\t\treturn false;\n\t}\n\n\t// Ignore Scss nested properties\n\tif (selector.endsWith(':')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"]},"metadata":{},"sourceType":"script"}