{"ast":null,"code":"'use strict';\n/** @typedef {import('postcss/lib/comment')} PostcssComment */\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/** @typedef {import('stylelint').StylelintDisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').StylelintResult[]} results\n */\n\nmodule.exports = function (results) {\n  results.forEach(result => {\n    // File with `CssSyntaxError` have not `_postcssResult`\n    if (!result._postcssResult) {\n      return;\n    }\n\n    const rangeData = result._postcssResult.stylelint.disabledRanges;\n    /** @type {Set<PostcssComment>} */\n\n    const alreadyReported = new Set();\n    Object.keys(rangeData).forEach(rule => {\n      rangeData[rule].forEach(range => {\n        if (range.description) return;\n        if (alreadyReported.has(range.comment)) return;\n        alreadyReported.add(range.comment); // If the comment doesn't have a location, we can't report a useful error.\n        // In practice we expect all comments to have locations, though.\n\n        if (!range.comment.source || !range.comment.source.start) return;\n        result.warnings.push({\n          text: `Disable for \"${rule}\" is missing a description`,\n          rule: '--report-descriptionless-disables',\n          line: range.comment.source.start.line,\n          column: range.comment.source.start.column,\n          severity: 'error'\n        });\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/descriptionlessDisables.js"],"names":["module","exports","results","forEach","result","_postcssResult","rangeData","stylelint","disabledRanges","alreadyReported","Set","Object","keys","rule","range","description","has","comment","add","source","start","warnings","push","text","line","column","severity"],"mappings":"AAAA;AAEA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AACnCA,EAAAA,OAAO,CAACC,OAAR,CAAiBC,MAAD,IAAY;AAC3B;AACA,QAAI,CAACA,MAAM,CAACC,cAAZ,EAA4B;AAC3B;AACA;;AAED,UAAMC,SAAS,GAAGF,MAAM,CAACC,cAAP,CAAsBE,SAAtB,CAAgCC,cAAlD;AAEA;;AACA,UAAMC,eAAe,GAAG,IAAIC,GAAJ,EAAxB;AAEAC,IAAAA,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBH,OAAvB,CAAgCU,IAAD,IAAU;AACxCP,MAAAA,SAAS,CAACO,IAAD,CAAT,CAAgBV,OAAhB,CAAyBW,KAAD,IAAW;AAClC,YAAIA,KAAK,CAACC,WAAV,EAAuB;AAEvB,YAAIN,eAAe,CAACO,GAAhB,CAAoBF,KAAK,CAACG,OAA1B,CAAJ,EAAwC;AAExCR,QAAAA,eAAe,CAACS,GAAhB,CAAoBJ,KAAK,CAACG,OAA1B,EALkC,CAOlC;AACA;;AACA,YAAI,CAACH,KAAK,CAACG,OAAN,CAAcE,MAAf,IAAyB,CAACL,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBC,KAAnD,EAA0D;AAE1DhB,QAAAA,MAAM,CAACiB,QAAP,CAAgBC,IAAhB,CAAqB;AACpBC,UAAAA,IAAI,EAAG,gBAAeV,IAAK,4BADP;AAEpBA,UAAAA,IAAI,EAAE,mCAFc;AAGpBW,UAAAA,IAAI,EAAEV,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBC,KAArB,CAA2BI,IAHb;AAIpBC,UAAAA,MAAM,EAAEX,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBC,KAArB,CAA2BK,MAJf;AAKpBC,UAAAA,QAAQ,EAAE;AALU,SAArB;AAOA,OAlBD;AAmBA,KApBD;AAqBA,GAhCD;AAiCA,CAlCD","sourcesContent":["'use strict';\n\n/** @typedef {import('postcss/lib/comment')} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').StylelintDisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').StylelintResult[]} results\n */\nmodule.exports = function (results) {\n\tresults.forEach((result) => {\n\t\t// File with `CssSyntaxError` have not `_postcssResult`\n\t\tif (!result._postcssResult) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tObject.keys(rangeData).forEach((rule) => {\n\t\t\trangeData[rule].forEach((range) => {\n\t\t\t\tif (range.description) return;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) return;\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) return;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}