{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'at-rule-whitelist';\nconst messages = ruleMessages(ruleName, {\n  rejected: name => `Unexpected at-rule \"${name}\"`\n});\n\nfunction rule(listInput) {\n  // To allow for just a string as a parameter (not only arrays of strings)\n  const list = [].concat(listInput);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'at-rule-allowed-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n    root.walkAtRules(atRule => {\n      const name = atRule.name;\n\n      if (!isStandardSyntaxAtRule(atRule)) {\n        return;\n      }\n\n      if (list.includes(vendor.unprefixed(name).toLowerCase())) {\n        return;\n      }\n\n      report({\n        message: messages.rejected(name),\n        node: atRule,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/at-rule-whitelist/index.js"],"names":["_","require","isStandardSyntaxAtRule","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","name","rule","listInput","list","concat","root","result","validOptions","actual","possible","isString","warn","stylelintType","stylelintReference","walkAtRules","atRule","includes","unprefixed","toLowerCase","message","node","primaryOptionArray","meta","deprecated","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,oCAAD,CAAtC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMM,QAAQ,GAAG,mBAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,IAAD,IAAW,uBAAsBA,IAAK;AADT,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,SAAd,EAAyB;AACxB;AACA,QAAMC,IAAI,GAAG,GAAGC,MAAH,CAAUF,SAAV,CAAb;AAEA,SAAO,CAACG,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGZ,eAAe,CAACW,MAAD,EAAST,QAAT,EAAmB;AACtDW,MAAAA,MAAM,EAAEL,IAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAACnB,CAAC,CAACoB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA;;AAEDD,IAAAA,MAAM,CAACK,IAAP,CAAa,IAAGd,QAAS,4DAAzB,EAAsF;AACrFe,MAAAA,aAAa,EAAE,aADsE;AAErFC,MAAAA,kBAAkB,EAAG,gEAA+DhB,QAAS;AAFR,KAAtF;AAKAQ,IAAAA,IAAI,CAACS,WAAL,CAAkBC,MAAD,IAAY;AAC5B,YAAMf,IAAI,GAAGe,MAAM,CAACf,IAApB;;AAEA,UAAI,CAACR,sBAAsB,CAACuB,MAAD,CAA3B,EAAqC;AACpC;AACA;;AAED,UAAIZ,IAAI,CAACa,QAAL,CAAcpB,MAAM,CAACqB,UAAP,CAAkBjB,IAAlB,EAAwBkB,WAAxB,EAAd,CAAJ,EAA0D;AACzD;AACA;;AAEDzB,MAAAA,MAAM,CAAC;AACN0B,QAAAA,OAAO,EAAErB,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CADH;AAENoB,QAAAA,IAAI,EAAEL,MAFA;AAGNT,QAAAA,MAHM;AAINT,QAAAA;AAJM,OAAD,CAAN;AAMA,KAjBD;AAkBA,GAjCD;AAkCA;;AAEDI,IAAI,CAACoB,kBAAL,GAA0B,IAA1B;AAEApB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAG,IAAI,CAACqB,IAAL,GAAY;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiBxB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'at-rule-whitelist';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (name) => `Unexpected at-rule \"${name}\"`,\n});\n\nfunction rule(listInput) {\n\t// To allow for just a string as a parameter (not only arrays of strings)\n\tconst list = [].concat(listInput);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(`'${ruleName}' has been deprecated. Instead use 'at-rule-allowed-list'.`, {\n\t\t\tstylelintType: 'deprecation',\n\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t});\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst name = atRule.name;\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (list.includes(vendor.unprefixed(name).toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(name),\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}