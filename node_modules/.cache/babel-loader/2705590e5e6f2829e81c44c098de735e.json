{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\nconst messages = ruleMessages(ruleName, {\n  rejected: 'Unexpected vendor-prefix'\n});\n\nfunction rule(actual, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(/^media$/i, atRule => {\n      const params = atRule.params;\n\n      if (!isAutoprefixable.mediaFeatureName(params)) {\n        return;\n      }\n\n      const matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n      if (!matches) {\n        return;\n      }\n\n      if (context.fix) {\n        atRule.params = isAutoprefixable.unprefix(atRule.params);\n        return;\n      }\n\n      matches.forEach(match => {\n        report({\n          message: messages.rejected,\n          node: atRule,\n          word: match,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js"],"names":["isAutoprefixable","require","report","ruleMessages","validateOptions","ruleName","messages","rejected","rule","actual","options","context","root","result","validOptions","walkAtRules","atRule","params","mediaFeatureName","matches","toString","match","fix","unprefix","forEach","message","node","word","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMI,QAAQ,GAAG,qCAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE;AAD6B,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACvC,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGV,eAAe,CAACS,MAAD,EAASR,QAAT,EAAmB;AAAEI,MAAAA;AAAF,KAAnB,CAApC;;AAEA,QAAI,CAACK,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACG,WAAL,CAAiB,UAAjB,EAA8BC,MAAD,IAAY;AACxC,YAAMC,MAAM,GAAGD,MAAM,CAACC,MAAtB;;AAEA,UAAI,CAACjB,gBAAgB,CAACkB,gBAAjB,CAAkCD,MAAlC,CAAL,EAAgD;AAC/C;AACA;;AAED,YAAME,OAAO,GAAGH,MAAM,CAACI,QAAP,GAAkBC,KAAlB,CAAwB,8BAAxB,CAAhB;;AAEA,UAAI,CAACF,OAAL,EAAc;AACb;AACA;;AAED,UAAIR,OAAO,CAACW,GAAZ,EAAiB;AAChBN,QAAAA,MAAM,CAACC,MAAP,GAAgBjB,gBAAgB,CAACuB,QAAjB,CAA0BP,MAAM,CAACC,MAAjC,CAAhB;AAEA;AACA;;AAEDE,MAAAA,OAAO,CAACK,OAAR,CAAiBH,KAAD,IAAW;AAC1BnB,QAAAA,MAAM,CAAC;AACNuB,UAAAA,OAAO,EAAEnB,QAAQ,CAACC,QADZ;AAENmB,UAAAA,IAAI,EAAEV,MAFA;AAGNW,UAAAA,IAAI,EAAEN,KAHA;AAINR,UAAAA,MAJM;AAKNR,UAAAA;AALM,SAAD,CAAN;AAOA,OARD;AASA,KA5BD;AA6BA,GApCD;AAqCA;;AAEDG,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAG,IAAI,CAACF,QAAL,GAAgBA,QAAhB;AACAsB,MAAM,CAACC,OAAP,GAAiBrB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected vendor-prefix',\n});\n\nfunction rule(actual, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tconst params = atRule.params;\n\n\t\t\tif (!isAutoprefixable.mediaFeatureName(params)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matches = atRule.toString().match(/-[a-z-]+device-pixel-ratio/gi);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (context.fix) {\n\t\t\t\tatRule.params = isAutoprefixable.unprefix(atRule.params);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmatches.forEach((match) => {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: match,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}