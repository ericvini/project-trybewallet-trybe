{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _drawBorder = require(\"./drawBorder\");\n\nvar _drawRow = _interopRequireDefault(require(\"./drawRow\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @param {Array} rows\n * @param {object} border\n * @param {Array} columnSizeIndex\n * @param {Array} rowSpanIndex\n * @param {Function} drawHorizontalLine\n * @param {boolean} singleLine\n * @returns {string}\n */\n\n\nconst drawTable = (rows, border, columnSizeIndex, rowSpanIndex, drawHorizontalLine, singleLine) => {\n  let output;\n  let realRowIndex;\n  let rowHeight;\n  const rowCount = rows.length;\n  realRowIndex = 0;\n  output = '';\n\n  if (drawHorizontalLine(realRowIndex, rowCount)) {\n    output += (0, _drawBorder.drawBorderTop)(columnSizeIndex, border);\n  }\n\n  rows.forEach((row, index0) => {\n    output += (0, _drawRow.default)(row, border);\n\n    if (!rowHeight) {\n      rowHeight = rowSpanIndex[realRowIndex];\n      realRowIndex++;\n    }\n\n    rowHeight--;\n\n    if (!singleLine && rowHeight === 0 && index0 !== rowCount - 1 && drawHorizontalLine(realRowIndex, rowCount)) {\n      output += (0, _drawBorder.drawBorderJoin)(columnSizeIndex, border);\n    }\n  });\n\n  if (drawHorizontalLine(realRowIndex, rowCount)) {\n    output += (0, _drawBorder.drawBorderBottom)(columnSizeIndex, border);\n  }\n\n  return output;\n};\n\nvar _default = drawTable;\nexports.default = _default;","map":{"version":3,"sources":["../src/drawTable.js"],"names":["rows","border","columnSizeIndex","rowSpanIndex","drawHorizontalLine","singleLine","rowCount","realRowIndex","output","rowHeight","index0"],"mappings":";;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAKA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;mBACgBA,I,EAAMC,M,EAAQC,e,EAAiBC,Y,EAAcC,kB,EAAoBC,U,KAAe;AAC9F,MAAA,MAAA;AACA,MAAA,YAAA;AACA,MAAA,SAAA;AAEA,QAAMC,QAAQ,GAAGN,IAAI,CAArB,MAAA;AAEAO,EAAAA,YAAY,GAAZA,CAAAA;AAEAC,EAAAA,MAAM,GAANA,EAAAA;;AAEA,MAAIJ,kBAAkB,CAAA,YAAA,EAAtB,QAAsB,CAAtB,EAAgD;AAC9CI,IAAAA,MAAM,IAAI,CAAA,GAAA,WAAA,CAAA,aAAA,EAAA,eAAA,EAAVA,MAAU,CAAVA;AACD;;AAEDR,EAAAA,IAAI,CAAJA,OAAAA,CAAa,CAAA,GAAA,EAAA,MAAA,KAAiB;AAC5BQ,IAAAA,MAAM,IAAI,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,GAAA,EAAVA,MAAU,CAAVA;;AAEA,QAAI,CAAJ,SAAA,EAAgB;AACdC,MAAAA,SAAS,GAAGN,YAAY,CAAxBM,YAAwB,CAAxBA;AAEAF,MAAAA,YAAY;AACb;;AAEDE,IAAAA,SAAS;;AAET,QAAI,CAAA,UAAA,IAAeA,SAAS,KAAxB,CAAA,IAAkCC,MAAM,KAAKJ,QAAQ,GAArD,CAAA,IAA6DF,kBAAkB,CAAA,YAAA,EAAnF,QAAmF,CAAnF,EAA6G;AAC3GI,MAAAA,MAAM,IAAI,CAAA,GAAA,WAAA,CAAA,cAAA,EAAA,eAAA,EAAVA,MAAU,CAAVA;AACD;AAbHR,GAAAA;;AAgBA,MAAII,kBAAkB,CAAA,YAAA,EAAtB,QAAsB,CAAtB,EAAgD;AAC9CI,IAAAA,MAAM,IAAI,CAAA,GAAA,WAAA,CAAA,gBAAA,EAAA,eAAA,EAAVA,MAAU,CAAVA;AACD;;AAED,SAAA,MAAA","sourcesContent":["import {\n  drawBorderTop,\n  drawBorderJoin,\n  drawBorderBottom,\n} from './drawBorder';\nimport drawRow from './drawRow';\n\n/**\n * @param {Array} rows\n * @param {object} border\n * @param {Array} columnSizeIndex\n * @param {Array} rowSpanIndex\n * @param {Function} drawHorizontalLine\n * @param {boolean} singleLine\n * @returns {string}\n */\nexport default (rows, border, columnSizeIndex, rowSpanIndex, drawHorizontalLine, singleLine) => {\n  let output;\n  let realRowIndex;\n  let rowHeight;\n\n  const rowCount = rows.length;\n\n  realRowIndex = 0;\n\n  output = '';\n\n  if (drawHorizontalLine(realRowIndex, rowCount)) {\n    output += drawBorderTop(columnSizeIndex, border);\n  }\n\n  rows.forEach((row, index0) => {\n    output += drawRow(row, border);\n\n    if (!rowHeight) {\n      rowHeight = rowSpanIndex[realRowIndex];\n\n      realRowIndex++;\n    }\n\n    rowHeight--;\n\n    if (!singleLine && rowHeight === 0 && index0 !== rowCount - 1 && drawHorizontalLine(realRowIndex, rowCount)) {\n      output += drawBorderJoin(columnSizeIndex, border);\n    }\n  });\n\n  if (drawHorizontalLine(realRowIndex, rowCount)) {\n    output += drawBorderBottom(columnSizeIndex, border);\n  }\n\n  return output;\n};\n"]},"metadata":{},"sourceType":"script"}