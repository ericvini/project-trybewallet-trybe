{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-id';\nconst messages = ruleMessages(ruleName, {\n  expected: (selector, max) => `Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`\n});\n\nfunction rule(max, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: max,\n      possible: [// TODO: Issue #4985\n      // eslint-disable-next-line no-shadow\n      function (max) {\n        return typeof max === 'number' && max >= 0;\n      }]\n    }, {\n      actual: options,\n      possible: {\n        ignoreContextFunctionalPseudoClasses: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    function checkSelector(selectorNode, ruleNode) {\n      const count = selectorNode.reduce((total, childNode) => {\n        // Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n        if (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode) && !isIgnoredContextFunctionalPseudoClass(childNode, options)) {\n          checkSelector(childNode, ruleNode);\n        }\n\n        return total += childNode.type === 'id' ? 1 : 0;\n      }, 0);\n\n      if (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > max) {\n        report({\n          ruleName,\n          result,\n          node: ruleNode,\n          message: messages.expected(selectorNode, max),\n          word: selectorNode\n        });\n      }\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    function isIgnoredContextFunctionalPseudoClass(node, options) {\n      return node.type === 'pseudo' && optionsMatches(options, 'ignoreContextFunctionalPseudoClasses', node.value);\n    }\n\n    root.walkRules(ruleNode => {\n      if (!isStandardSyntaxRule(ruleNode)) {\n        return;\n      }\n\n      ruleNode.selectors.forEach(selector => {\n        resolvedNestedSelector(selector, ruleNode).forEach(resolvedSelector => {\n          parseSelector(resolvedSelector, result, ruleNode, container => checkSelector(container, ruleNode));\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-max-id/index.js"],"names":["_","require","isContextFunctionalPseudoClass","isStandardSyntaxRule","optionsMatches","parseSelector","report","resolvedNestedSelector","ruleMessages","validateOptions","ruleName","messages","expected","selector","max","rule","options","root","result","validOptions","actual","possible","ignoreContextFunctionalPseudoClasses","isString","isRegExp","optional","checkSelector","selectorNode","ruleNode","count","reduce","total","childNode","type","isIgnoredContextFunctionalPseudoClass","node","message","word","value","walkRules","selectors","forEach","resolvedSelector","container","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-id';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ID ${max === 1 ? 'selector' : 'selectors'}`,\n});\n\nfunction rule(max, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: max,\n\t\t\t\tpossible: [\n\t\t\t\t\t// TODO: Issue #4985\n\t\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\t\tfunction (max) {\n\t\t\t\t\t\treturn typeof max === 'number' && max >= 0;\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreContextFunctionalPseudoClasses: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes that are not part of ignored functional pseudo-classes\n\t\t\t\tif (\n\t\t\t\t\tchildNode.type === 'selector' ||\n\t\t\t\t\t(isContextFunctionalPseudoClass(childNode) &&\n\t\t\t\t\t\t!isIgnoredContextFunctionalPseudoClass(childNode, options))\n\t\t\t\t) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\treturn (total += childNode.type === 'id' ? 1 : 0);\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > max) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selectorNode, max),\n\t\t\t\t\tword: selectorNode,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\tfunction isIgnoredContextFunctionalPseudoClass(node, options) {\n\t\t\treturn (\n\t\t\t\tnode.type === 'pseudo' &&\n\t\t\t\toptionsMatches(options, 'ignoreContextFunctionalPseudoClasses', node.value)\n\t\t\t);\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\truleNode.selectors.forEach((selector) => {\n\t\t\t\tresolvedNestedSelector(selector, ruleNode).forEach((resolvedSelector) => {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}