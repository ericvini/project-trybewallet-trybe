{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nconst partial_1 = require(\"../matchers/partial\");\n\nclass DeepFilter {\n  constructor(_settings, _micromatchOptions) {\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n  }\n\n  getFilter(basePath, positive, negative) {\n    const matcher = this._getMatcher(positive);\n\n    const negativeRe = this._getNegativePatternsRe(negative);\n\n    return entry => this._filter(basePath, entry, matcher, negativeRe);\n  }\n\n  _getMatcher(patterns) {\n    return new partial_1.default(patterns, this._settings, this._micromatchOptions);\n  }\n\n  _getNegativePatternsRe(patterns) {\n    const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\n    return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\n  }\n\n  _filter(basePath, entry, matcher, negativeRe) {\n    if (this._isSkippedByDeep(basePath, entry.path)) {\n      return false;\n    }\n\n    if (this._isSkippedSymbolicLink(entry)) {\n      return false;\n    }\n\n    const filepath = utils.path.removeLeadingDotSegment(entry.path);\n\n    if (this._isSkippedByPositivePatterns(filepath, matcher)) {\n      return false;\n    }\n\n    return this._isSkippedByNegativePatterns(filepath, negativeRe);\n  }\n\n  _isSkippedByDeep(basePath, entryPath) {\n    /**\r\n     * Avoid unnecessary depth calculations when it doesn't matter.\r\n     */\n    if (this._settings.deep === Infinity) {\n      return false;\n    }\n\n    return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\n  }\n\n  _getEntryLevel(basePath, entryPath) {\n    const entryPathDepth = entryPath.split('/').length;\n\n    if (basePath === '') {\n      return entryPathDepth;\n    }\n\n    const basePathDepth = basePath.split('/').length;\n    return entryPathDepth - basePathDepth;\n  }\n\n  _isSkippedSymbolicLink(entry) {\n    return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\n  }\n\n  _isSkippedByPositivePatterns(entryPath, matcher) {\n    return !this._settings.baseNameMatch && !matcher.match(entryPath);\n  }\n\n  _isSkippedByNegativePatterns(entryPath, patternsRe) {\n    return !utils.pattern.matchAny(entryPath, patternsRe);\n  }\n\n}\n\nexports.default = DeepFilter;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/node_modules/fast-glob/out/providers/filters/deep.js"],"names":["Object","defineProperty","exports","value","utils","require","partial_1","DeepFilter","constructor","_settings","_micromatchOptions","getFilter","basePath","positive","negative","matcher","_getMatcher","negativeRe","_getNegativePatternsRe","entry","_filter","patterns","default","affectDepthOfReadingPatterns","filter","pattern","isAffectDepthOfReadingPattern","convertPatternsToRe","_isSkippedByDeep","path","_isSkippedSymbolicLink","filepath","removeLeadingDotSegment","_isSkippedByPositivePatterns","_isSkippedByNegativePatterns","entryPath","deep","Infinity","_getEntryLevel","entryPathDepth","split","length","basePathDepth","followSymbolicLinks","dirent","isSymbolicLink","baseNameMatch","match","patternsRe","matchAny"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nconst partial_1 = require(\"../matchers/partial\");\r\nclass DeepFilter {\r\n    constructor(_settings, _micromatchOptions) {\r\n        this._settings = _settings;\r\n        this._micromatchOptions = _micromatchOptions;\r\n    }\r\n    getFilter(basePath, positive, negative) {\r\n        const matcher = this._getMatcher(positive);\r\n        const negativeRe = this._getNegativePatternsRe(negative);\r\n        return (entry) => this._filter(basePath, entry, matcher, negativeRe);\r\n    }\r\n    _getMatcher(patterns) {\r\n        return new partial_1.default(patterns, this._settings, this._micromatchOptions);\r\n    }\r\n    _getNegativePatternsRe(patterns) {\r\n        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\r\n        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\r\n    }\r\n    _filter(basePath, entry, matcher, negativeRe) {\r\n        if (this._isSkippedByDeep(basePath, entry.path)) {\r\n            return false;\r\n        }\r\n        if (this._isSkippedSymbolicLink(entry)) {\r\n            return false;\r\n        }\r\n        const filepath = utils.path.removeLeadingDotSegment(entry.path);\r\n        if (this._isSkippedByPositivePatterns(filepath, matcher)) {\r\n            return false;\r\n        }\r\n        return this._isSkippedByNegativePatterns(filepath, negativeRe);\r\n    }\r\n    _isSkippedByDeep(basePath, entryPath) {\r\n        /**\r\n         * Avoid unnecessary depth calculations when it doesn't matter.\r\n         */\r\n        if (this._settings.deep === Infinity) {\r\n            return false;\r\n        }\r\n        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\r\n    }\r\n    _getEntryLevel(basePath, entryPath) {\r\n        const entryPathDepth = entryPath.split('/').length;\r\n        if (basePath === '') {\r\n            return entryPathDepth;\r\n        }\r\n        const basePathDepth = basePath.split('/').length;\r\n        return entryPathDepth - basePathDepth;\r\n    }\r\n    _isSkippedSymbolicLink(entry) {\r\n        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\r\n    }\r\n    _isSkippedByPositivePatterns(entryPath, matcher) {\r\n        return !this._settings.baseNameMatch && !matcher.match(entryPath);\r\n    }\r\n    _isSkippedByNegativePatterns(entryPath, patternsRe) {\r\n        return !utils.pattern.matchAny(entryPath, patternsRe);\r\n    }\r\n}\r\nexports.default = DeepFilter;\r\n"]},"metadata":{},"sourceType":"script"}