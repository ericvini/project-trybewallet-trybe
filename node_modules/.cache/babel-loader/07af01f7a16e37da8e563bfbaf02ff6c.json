{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst isCustomSelector = require('../../utils/isCustomSelector');\n\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\nconst messages = ruleMessages(ruleName, {\n  rejected: selector => `Unexpected unknown pseudo-class selector \"${selector}\"`\n});\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignorePseudoClasses: [_.isString]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    function check(selector, result, node) {\n      parseSelector(selector, result, node, selectorTree => {\n        selectorTree.walkPseudos(pseudoNode => {\n          const value = pseudoNode.value;\n\n          if (!isStandardSyntaxSelector(value)) {\n            return;\n          }\n\n          if (isCustomSelector(value)) {\n            return;\n          } // Ignore pseudo-elements\n\n\n          if (value.slice(0, 2) === '::') {\n            return;\n          }\n\n          if (optionsMatches(options, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n            return;\n          }\n\n          let index = null;\n          const name = value.slice(1).toLowerCase();\n\n          if (node.type === 'atrule' && node.name === 'page') {\n            if (keywordSets.atRulePagePseudoClasses.has(name)) {\n              return;\n            }\n\n            index = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n          } else {\n            if (vendor.prefix(name) || keywordSets.pseudoClasses.has(name) || keywordSets.pseudoElements.has(name)) {\n              return;\n            }\n\n            let prevPseudoElement = pseudoNode;\n\n            do {\n              prevPseudoElement = prevPseudoElement.prev();\n\n              if (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n                break;\n              }\n            } while (prevPseudoElement);\n\n            if (prevPseudoElement) {\n              const prevPseudoElementValue = vendor.unprefixed(prevPseudoElement.value.toLowerCase().slice(2));\n\n              if (keywordSets.webkitProprietaryPseudoElements.has(prevPseudoElementValue) && keywordSets.webkitProprietaryPseudoClasses.has(name)) {\n                return;\n              }\n            }\n\n            index = pseudoNode.sourceIndex;\n          }\n\n          report({\n            message: messages.rejected(value),\n            node,\n            index,\n            ruleName,\n            result\n          });\n        });\n      });\n    }\n\n    root.walk(node => {\n      let selector = null;\n\n      if (node.type === 'rule') {\n        if (!isStandardSyntaxRule(node)) {\n          return;\n        }\n\n        selector = node.selector;\n      } else if (node.type === 'atrule' && node.name === 'page' && node.params) {\n        if (!isStandardSyntaxAtRule(node)) {\n          return;\n        }\n\n        selector = node.params;\n      } // Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\n      if (!selector) {\n        return;\n      } // Return early before parse if no pseudos for performance\n\n\n      if (!selector.includes(':')) {\n        return;\n      }\n\n      check(selector, result, node);\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js"],"names":["_","require","atRuleParamIndex","isCustomSelector","isStandardSyntaxAtRule","isStandardSyntaxRule","isStandardSyntaxSelector","keywordSets","optionsMatches","parseSelector","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","selector","rule","actual","options","root","result","validOptions","possible","ignorePseudoClasses","isString","optional","check","node","selectorTree","walkPseudos","pseudoNode","value","slice","index","name","toLowerCase","type","atRulePagePseudoClasses","has","sourceIndex","prefix","pseudoClasses","pseudoElements","prevPseudoElement","prev","prevPseudoElementValue","unprefixed","webkitProprietaryPseudoElements","webkitProprietaryPseudoClasses","message","walk","params","includes","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomSelector = require('../../utils/isCustomSelector');\nconst isStandardSyntaxAtRule = require('../../utils/isStandardSyntaxAtRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'selector-pseudo-class-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (selector) => `Unexpected unknown pseudo-class selector \"${selector}\"`,\n});\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignorePseudoClasses: [_.isString],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\tfunction check(selector, result, node) {\n\t\t\tparseSelector(selector, result, node, (selectorTree) => {\n\t\t\t\tselectorTree.walkPseudos((pseudoNode) => {\n\t\t\t\t\tconst value = pseudoNode.value;\n\n\t\t\t\t\tif (!isStandardSyntaxSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isCustomSelector(value)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore pseudo-elements\n\t\t\t\t\tif (value.slice(0, 2) === '::') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (optionsMatches(options, 'ignorePseudoClasses', pseudoNode.value.slice(1))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet index = null;\n\t\t\t\t\tconst name = value.slice(1).toLowerCase();\n\n\t\t\t\t\tif (node.type === 'atrule' && node.name === 'page') {\n\t\t\t\t\t\tif (keywordSets.atRulePagePseudoClasses.has(name)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = atRuleParamIndex(node) + pseudoNode.sourceIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvendor.prefix(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoClasses.has(name) ||\n\t\t\t\t\t\t\tkeywordSets.pseudoElements.has(name)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet prevPseudoElement = pseudoNode;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevPseudoElement = prevPseudoElement.prev();\n\n\t\t\t\t\t\t\tif (prevPseudoElement && prevPseudoElement.value.slice(0, 2) === '::') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (prevPseudoElement);\n\n\t\t\t\t\t\tif (prevPseudoElement) {\n\t\t\t\t\t\t\tconst prevPseudoElementValue = vendor.unprefixed(\n\t\t\t\t\t\t\t\tprevPseudoElement.value.toLowerCase().slice(2),\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tkeywordSets.webkitProprietaryPseudoElements.has(prevPseudoElementValue) &&\n\t\t\t\t\t\t\t\tkeywordSets.webkitProprietaryPseudoClasses.has(name)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex = pseudoNode.sourceIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\troot.walk((node) => {\n\t\t\tlet selector = null;\n\n\t\t\tif (node.type === 'rule') {\n\t\t\t\tif (!isStandardSyntaxRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.selector;\n\t\t\t} else if (node.type === 'atrule' && node.name === 'page' && node.params) {\n\t\t\t\tif (!isStandardSyntaxAtRule(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselector = node.params;\n\t\t\t}\n\n\t\t\t// Return if selector empty, it is meaning node type is not a rule or a at-rule\n\n\t\t\tif (!selector) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early before parse if no pseudos for performance\n\n\t\t\tif (!selector.includes(':')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(selector, result, node);\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}