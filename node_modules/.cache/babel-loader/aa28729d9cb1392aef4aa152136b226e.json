{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst augmentConfig = require('./augmentConfig');\n\nconst createStylelintResult = require('./createStylelintResult');\n\nconst getConfigForFile = require('./getConfigForFile');\n\nconst getPostcssResult = require('./getPostcssResult');\n\nconst isPathIgnored = require('./isPathIgnored');\n\nconst lintSource = require('./lintSource');\n\nconst path = require('path');\n\nconst {\n  cosmiconfig\n} = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? path.resolve(__dirname, '..') : undefined;\n/** @typedef {import('stylelint').StylelintInternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches\n * @param {import('stylelint').StylelintStandaloneOptions} options\n * @returns {StylelintInternalApi}\n */\n\nmodule.exports = function (options = {}) {\n  /** @type {Partial<StylelintInternalApi>} */\n  const stylelint = {\n    _options: options\n  }; // Two separate explorers so they can each have their own transform\n  // function whose results are cached by cosmiconfig\n\n  stylelint._fullExplorer = cosmiconfig('stylelint', {\n    // @ts-ignore TODO TYPES found out which cosmiconfig types are valid\n    transform: _.partial(augmentConfig.augmentConfigFull,\n    /** @type{StylelintInternalApi} */\n    stylelint),\n    stopDir: STOP_DIR\n  }); // @ts-ignore TODO TYPES found out which cosmiconfig types are valid\n\n  stylelint._extendExplorer = cosmiconfig(null, {\n    transform: _.partial(augmentConfig.augmentConfigExtended,\n    /** @type{StylelintInternalApi} */\n    stylelint),\n    stopDir: STOP_DIR\n  });\n  stylelint._specifiedConfigCache = new Map();\n  stylelint._postcssResultCache = new Map();\n  stylelint._createStylelintResult = _.partial(createStylelintResult,\n  /** @type{StylelintInternalApi} */\n  stylelint);\n  stylelint._getPostcssResult = _.partial(getPostcssResult,\n  /** @type{StylelintInternalApi} */\n  stylelint);\n  stylelint._lintSource = _.partial(lintSource,\n  /** @type{StylelintInternalApi} */\n  stylelint);\n  stylelint.getConfigForFile = _.partial(getConfigForFile,\n  /** @type{StylelintInternalApi} */\n  stylelint);\n  stylelint.isPathIgnored = _.partial(isPathIgnored,\n  /** @type{StylelintInternalApi} */\n  stylelint);\n  return (\n    /** @type{StylelintInternalApi} */\n    stylelint\n  );\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/createStylelint.js"],"names":["_","require","augmentConfig","createStylelintResult","getConfigForFile","getPostcssResult","isPathIgnored","lintSource","path","cosmiconfig","IS_TEST","process","env","NODE_ENV","STOP_DIR","resolve","__dirname","undefined","module","exports","options","stylelint","_options","_fullExplorer","transform","partial","augmentConfigFull","stopDir","_extendExplorer","augmentConfigExtended","_specifiedConfigCache","Map","_postcssResultCache","_createStylelintResult","_getPostcssResult","_lintSource"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAME,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMO,IAAI,GAAGP,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAkBR,OAAO,CAAC,aAAD,CAA/B;;AAEA,MAAMS,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzC;AACA,MAAMC,QAAQ,GAAGJ,OAAO,GAAGF,IAAI,CAACO,OAAL,CAAaC,SAAb,EAAwB,IAAxB,CAAH,GAAmCC,SAA3D;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAO,GAAG,EAApB,EAAwB;AACxC;AACA,QAAMC,SAAS,GAAG;AAAEC,IAAAA,QAAQ,EAAEF;AAAZ,GAAlB,CAFwC,CAIxC;AACA;;AACAC,EAAAA,SAAS,CAACE,aAAV,GAA0Bd,WAAW,CAAC,WAAD,EAAc;AAClD;AACAe,IAAAA,SAAS,EAAExB,CAAC,CAACyB,OAAF,CACVvB,aAAa,CAACwB,iBADJ;AAEV;AAAoCL,IAAAA,SAF1B,CAFuC;AAMlDM,IAAAA,OAAO,EAAEb;AANyC,GAAd,CAArC,CANwC,CAcxC;;AACAO,EAAAA,SAAS,CAACO,eAAV,GAA4BnB,WAAW,CAAC,IAAD,EAAO;AAC7Ce,IAAAA,SAAS,EAAExB,CAAC,CAACyB,OAAF,CACVvB,aAAa,CAAC2B,qBADJ;AAEV;AAAoCR,IAAAA,SAF1B,CADkC;AAK7CM,IAAAA,OAAO,EAAEb;AALoC,GAAP,CAAvC;AAQAO,EAAAA,SAAS,CAACS,qBAAV,GAAkC,IAAIC,GAAJ,EAAlC;AACAV,EAAAA,SAAS,CAACW,mBAAV,GAAgC,IAAID,GAAJ,EAAhC;AACAV,EAAAA,SAAS,CAACY,sBAAV,GAAmCjC,CAAC,CAACyB,OAAF,CAClCtB,qBADkC;AAElC;AAAoCkB,EAAAA,SAFF,CAAnC;AAIAA,EAAAA,SAAS,CAACa,iBAAV,GAA8BlC,CAAC,CAACyB,OAAF,CAC7BpB,gBAD6B;AAE7B;AAAoCgB,EAAAA,SAFP,CAA9B;AAIAA,EAAAA,SAAS,CAACc,WAAV,GAAwBnC,CAAC,CAACyB,OAAF,CAAUlB,UAAV;AAAsB;AAAoCc,EAAAA,SAA1D,CAAxB;AAEAA,EAAAA,SAAS,CAACjB,gBAAV,GAA6BJ,CAAC,CAACyB,OAAF,CAC5BrB,gBAD4B;AAE5B;AAAoCiB,EAAAA,SAFR,CAA7B;AAIAA,EAAAA,SAAS,CAACf,aAAV,GAA0BN,CAAC,CAACyB,OAAF,CACzBnB,aADyB;AAEzB;AAAoCe,EAAAA,SAFX,CAA1B;AAKA;AAAO;AAAoCA,IAAAA;AAA3C;AACA,CA7CD","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst augmentConfig = require('./augmentConfig');\nconst createStylelintResult = require('./createStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst lintSource = require('./lintSource');\nconst path = require('path');\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? path.resolve(__dirname, '..') : undefined;\n\n/** @typedef {import('stylelint').StylelintInternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches\n * @param {import('stylelint').StylelintStandaloneOptions} options\n * @returns {StylelintInternalApi}\n */\nmodule.exports = function (options = {}) {\n\t/** @type {Partial<StylelintInternalApi>} */\n\tconst stylelint = { _options: options };\n\n\t// Two separate explorers so they can each have their own transform\n\t// function whose results are cached by cosmiconfig\n\tstylelint._fullExplorer = cosmiconfig('stylelint', {\n\t\t// @ts-ignore TODO TYPES found out which cosmiconfig types are valid\n\t\ttransform: _.partial(\n\t\t\taugmentConfig.augmentConfigFull,\n\t\t\t/** @type{StylelintInternalApi} */ (stylelint),\n\t\t),\n\t\tstopDir: STOP_DIR,\n\t});\n\t// @ts-ignore TODO TYPES found out which cosmiconfig types are valid\n\tstylelint._extendExplorer = cosmiconfig(null, {\n\t\ttransform: _.partial(\n\t\t\taugmentConfig.augmentConfigExtended,\n\t\t\t/** @type{StylelintInternalApi} */ (stylelint),\n\t\t),\n\t\tstopDir: STOP_DIR,\n\t});\n\n\tstylelint._specifiedConfigCache = new Map();\n\tstylelint._postcssResultCache = new Map();\n\tstylelint._createStylelintResult = _.partial(\n\t\tcreateStylelintResult,\n\t\t/** @type{StylelintInternalApi} */ (stylelint),\n\t);\n\tstylelint._getPostcssResult = _.partial(\n\t\tgetPostcssResult,\n\t\t/** @type{StylelintInternalApi} */ (stylelint),\n\t);\n\tstylelint._lintSource = _.partial(lintSource, /** @type{StylelintInternalApi} */ (stylelint));\n\n\tstylelint.getConfigForFile = _.partial(\n\t\tgetConfigForFile,\n\t\t/** @type{StylelintInternalApi} */ (stylelint),\n\t);\n\tstylelint.isPathIgnored = _.partial(\n\t\tisPathIgnored,\n\t\t/** @type{StylelintInternalApi} */ (stylelint),\n\t);\n\n\treturn /** @type{StylelintInternalApi} */ (stylelint);\n};\n"]},"metadata":{},"sourceType":"script"}