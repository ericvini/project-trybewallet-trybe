{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: operator => `Expected single space after \"${operator}\"`,\n  rejectedAfter: operator => `Unexpected whitespace after \"${operator}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const checker = whitespaceChecker('space', expectation, messages);\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    selectorAttributeOperatorSpaceChecker({\n      root,\n      result,\n      locationChecker: checker.after,\n      checkedRuleName: ruleName,\n      checkBeforeOperator: false,\n      fix: context.fix ? attributeNode => {\n        const {\n          operatorAfter,\n          setOperatorAfter\n        } = (() => {\n          const rawOperator = _.get(attributeNode, 'raws.operator');\n\n          if (rawOperator) {\n            // TODO: Issue #4985\n            // eslint-disable-next-line no-shadow\n            const operatorAfter = rawOperator.slice(attributeNode.operator.length);\n            return {\n              operatorAfter,\n\n              setOperatorAfter(fixed) {\n                delete attributeNode.raws.operator;\n\n                _.set(attributeNode, 'raws.spaces.operator.after', fixed);\n              }\n\n            };\n          }\n\n          const rawOperatorAfter = _.get(attributeNode, 'raws.spaces.operator.after');\n\n          if (rawOperatorAfter) {\n            return {\n              operatorAfter: rawOperatorAfter,\n\n              setOperatorAfter(fixed) {\n                attributeNode.raws.spaces.operator.after = fixed;\n              }\n\n            };\n          }\n\n          return {\n            operatorAfter: _.get(attributeNode, 'spaces.operator.after', ''),\n\n            setOperatorAfter(fixed) {\n              _.set(attributeNode, 'spaces.operator.after', fixed);\n            }\n\n          };\n        })();\n\n        if (expectation === 'always') {\n          setOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n          return true;\n        }\n\n        if (expectation === 'never') {\n          setOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n          return true;\n        }\n      } : null\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-attribute-operator-space-after/index.js"],"names":["_","require","ruleMessages","selectorAttributeOperatorSpaceChecker","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","operator","rejectedAfter","rule","expectation","options","context","root","result","checker","validOptions","actual","possible","locationChecker","after","checkedRuleName","checkBeforeOperator","fix","attributeNode","operatorAfter","setOperatorAfter","rawOperator","get","slice","length","fixed","raws","set","rawOperatorAfter","spaces","replace","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst selectorAttributeOperatorSpaceChecker = require('../selectorAttributeOperatorSpaceChecker');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'selector-attribute-operator-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: (operator) => `Expected single space after \"${operator}\"`,\n\trejectedAfter: (operator) => `Unexpected whitespace after \"${operator}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst checker = whitespaceChecker('space', expectation, messages);\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tselectorAttributeOperatorSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.after,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tcheckBeforeOperator: false,\n\t\t\tfix: context.fix\n\t\t\t\t? (attributeNode) => {\n\t\t\t\t\t\tconst { operatorAfter, setOperatorAfter } = (() => {\n\t\t\t\t\t\t\tconst rawOperator = _.get(attributeNode, 'raws.operator');\n\n\t\t\t\t\t\t\tif (rawOperator) {\n\t\t\t\t\t\t\t\t// TODO: Issue #4985\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\t\t\t\t\tconst operatorAfter = rawOperator.slice(attributeNode.operator.length);\n\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tdelete attributeNode.raws.operator;\n\t\t\t\t\t\t\t\t\t\t_.set(attributeNode, 'raws.spaces.operator.after', fixed);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rawOperatorAfter = _.get(attributeNode, 'raws.spaces.operator.after');\n\n\t\t\t\t\t\t\tif (rawOperatorAfter) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\toperatorAfter: rawOperatorAfter,\n\t\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t\tattributeNode.raws.spaces.operator.after = fixed;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperatorAfter: _.get(attributeNode, 'spaces.operator.after', ''),\n\t\t\t\t\t\t\t\tsetOperatorAfter(fixed) {\n\t\t\t\t\t\t\t\t\t_.set(attributeNode, 'spaces.operator.after', fixed);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\tif (expectation === 'always') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ' '));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation === 'never') {\n\t\t\t\t\t\t\tsetOperatorAfter(operatorAfter.replace(/^\\s*/, ''));\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}