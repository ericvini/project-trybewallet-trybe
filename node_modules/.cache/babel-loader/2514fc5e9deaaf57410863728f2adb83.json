{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'number-leading-zero';\nconst messages = ruleMessages(ruleName, {\n  expected: 'Expected a leading zero',\n  rejected: 'Unexpected leading zero'\n});\n\nfunction rule(expectation, secondary, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(atRule => {\n      if (atRule.name.toLowerCase() === 'import') {\n        return;\n      }\n\n      check(atRule, atRule.params, atRuleParamIndex);\n    });\n    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex));\n\n    function check(node, value, getIndex) {\n      const neverFixPositions = [];\n      const alwaysFixPositions = []; // Get out quickly if there are no periods\n\n      if (!value.includes('.')) {\n        return;\n      }\n\n      valueParser(value).walk(valueNode => {\n        // Ignore `url` function\n        if (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n          return false;\n        } // Ignore strings, comments, etc\n\n\n        if (valueNode.type !== 'word') {\n          return;\n        } // Check leading zero\n\n\n        if (expectation === 'always') {\n          const match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n          if (match === null) {\n            return;\n          } // The regexp above consists of 2 capturing groups (or capturing parentheses).\n          // We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n          // for regex. And we need the index of \".5\".\n\n\n          const capturingGroupIndex = match[0].length - match[1].length;\n          const index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n          if (context.fix) {\n            alwaysFixPositions.unshift({\n              index\n            });\n            return;\n          }\n\n          complain(messages.expected, node, getIndex(node) + index);\n        }\n\n        if (expectation === 'never') {\n          const match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n          if (match === null) {\n            return;\n          } // The regexp above consists of 3 capturing groups (or capturing parentheses).\n          // We need the index of the second group. This makes sanse when we have \"-00.5\"\n          // as an input for regex. And we need the index of \"00\".\n\n\n          const capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n          const index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n          if (context.fix) {\n            neverFixPositions.unshift({\n              startIndex: index,\n              // match[1].length is the length of our matched zero(s)\n              endIndex: index + match[1].length\n            });\n            return;\n          }\n\n          complain(messages.rejected, node, getIndex(node) + index);\n        }\n      });\n\n      if (alwaysFixPositions.length) {\n        alwaysFixPositions.forEach(fixPosition => {\n          const index = fixPosition.index;\n\n          if (node.type === 'atrule') {\n            node.params = addLeadingZero(node.params, index);\n          } else {\n            node.value = addLeadingZero(node.value, index);\n          }\n        });\n      }\n\n      if (neverFixPositions.length) {\n        neverFixPositions.forEach(fixPosition => {\n          const startIndex = fixPosition.startIndex;\n          const endIndex = fixPosition.endIndex;\n\n          if (node.type === 'atrule') {\n            node.params = removeLeadingZeros(node.params, startIndex, endIndex);\n          } else {\n            node.value = removeLeadingZeros(node.value, startIndex, endIndex);\n          }\n        });\n      }\n    }\n\n    function complain(message, node, index) {\n      report({\n        result,\n        ruleName,\n        message,\n        node,\n        index\n      });\n    }\n  };\n}\n\nfunction addLeadingZero(input, index) {\n  // eslint-disable-next-line prefer-template\n  return input.slice(0, index) + '0' + input.slice(index);\n}\n\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n  return input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/number-leading-zero/index.js"],"names":["atRuleParamIndex","require","declarationValueIndex","report","ruleMessages","validateOptions","valueParser","ruleName","messages","expected","rejected","rule","expectation","secondary","context","root","result","validOptions","actual","possible","walkAtRules","atRule","name","toLowerCase","check","params","walkDecls","decl","value","node","getIndex","neverFixPositions","alwaysFixPositions","includes","walk","valueNode","type","match","exec","capturingGroupIndex","length","index","sourceIndex","fix","unshift","complain","startIndex","endIndex","forEach","fixPosition","addLeadingZero","removeLeadingZeros","message","input","slice","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'number-leading-zero';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected a leading zero',\n\trejected: 'Unexpected leading zero',\n});\n\nfunction rule(expectation, secondary, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (atRule.name.toLowerCase() === 'import') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck(atRule, atRule.params, atRuleParamIndex);\n\t\t});\n\n\t\troot.walkDecls((decl) => check(decl, decl.value, declarationValueIndex));\n\n\t\tfunction check(node, value, getIndex) {\n\t\t\tconst neverFixPositions = [];\n\t\t\tconst alwaysFixPositions = [];\n\n\t\t\t// Get out quickly if there are no periods\n\t\t\tif (!value.includes('.')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueParser(value).walk((valueNode) => {\n\t\t\t\t// Ignore `url` function\n\t\t\t\tif (valueNode.type === 'function' && valueNode.value.toLowerCase() === 'url') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore strings, comments, etc\n\t\t\t\tif (valueNode.type !== 'word') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check leading zero\n\t\t\t\tif (expectation === 'always') {\n\t\t\t\t\tconst match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match === null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 2 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-.5\" as an input\n\t\t\t\t\t// for regex. And we need the index of \".5\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - match[1].length;\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\talwaysFixPositions.unshift({\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(messages.expected, node, getIndex(node) + index);\n\t\t\t\t}\n\n\t\t\t\tif (expectation === 'never') {\n\t\t\t\t\tconst match = /(?:\\D|^)(0+)(\\.\\d+)/.exec(valueNode.value);\n\n\t\t\t\t\tif (match === null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The regexp above consists of 3 capturing groups (or capturing parentheses).\n\t\t\t\t\t// We need the index of the second group. This makes sanse when we have \"-00.5\"\n\t\t\t\t\t// as an input for regex. And we need the index of \"00\".\n\t\t\t\t\tconst capturingGroupIndex = match[0].length - (match[1].length + match[2].length);\n\n\t\t\t\t\tconst index = valueNode.sourceIndex + match.index + capturingGroupIndex;\n\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tneverFixPositions.unshift({\n\t\t\t\t\t\t\tstartIndex: index,\n\t\t\t\t\t\t\t// match[1].length is the length of our matched zero(s)\n\t\t\t\t\t\t\tendIndex: index + match[1].length,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcomplain(messages.rejected, node, getIndex(node) + index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (alwaysFixPositions.length) {\n\t\t\t\talwaysFixPositions.forEach((fixPosition) => {\n\t\t\t\t\tconst index = fixPosition.index;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = addLeadingZero(node.params, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = addLeadingZero(node.value, index);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (neverFixPositions.length) {\n\t\t\t\tneverFixPositions.forEach((fixPosition) => {\n\t\t\t\t\tconst startIndex = fixPosition.startIndex;\n\t\t\t\t\tconst endIndex = fixPosition.endIndex;\n\n\t\t\t\t\tif (node.type === 'atrule') {\n\t\t\t\t\t\tnode.params = removeLeadingZeros(node.params, startIndex, endIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.value = removeLeadingZeros(node.value, startIndex, endIndex);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction complain(message, node, index) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode,\n\t\t\t\tindex,\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction addLeadingZero(input, index) {\n\t// eslint-disable-next-line prefer-template\n\treturn input.slice(0, index) + '0' + input.slice(index);\n}\n\nfunction removeLeadingZeros(input, startIndex, endIndex) {\n\treturn input.slice(0, startIndex) + input.slice(endIndex);\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}