{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\nconst messages = ruleMessages(ruleName, {\n  rejected: atImport => `Unexpected duplicate @import rule ${atImport}`\n});\n\nfunction rule(actual) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const imports = {};\n    root.walkAtRules(/^import$/i, atRule => {\n      const params = valueParser(atRule.params).nodes;\n\n      if (!params.length) {\n        return;\n      } // extract uri from url() if exists\n\n\n      const uri = params[0].type === 'function' && params[0].value === 'url' ? params[0].nodes[0].value : params[0].value; // extract media queries if any\n\n      const media = mediaParser(valueParser.stringify(params.slice(1))).nodes.map(n => n.value.replace(/\\s/g, '')).filter(n => n.length);\n      const isDuplicate = media.length ? imports[uri] && media.some(q => imports[uri].includes(q)) : imports[uri];\n\n      if (isDuplicate) {\n        report({\n          message: messages.rejected(uri),\n          node: atRule,\n          result,\n          ruleName\n        });\n        return;\n      }\n\n      if (!imports[uri]) imports[uri] = [];\n      imports[uri] = imports[uri].concat(media);\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.js"],"names":["mediaParser","require","default","report","ruleMessages","validateOptions","valueParser","ruleName","messages","rejected","atImport","rule","actual","root","result","validOptions","imports","walkAtRules","atRule","params","nodes","length","uri","type","value","media","stringify","slice","map","n","replace","filter","isDuplicate","some","q","includes","message","node","concat","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,4BAAD,CAAP,CAAsCC,OAA1D;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,sBAAD,CAA3B;;AAEA,MAAMM,QAAQ,GAAG,8BAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,QAAD,IAAe,qCAAoCA,QAAS;AAD/B,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsB;AACrB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGV,eAAe,CAACS,MAAD,EAASP,QAAT,EAAmB;AAAEK,MAAAA;AAAF,KAAnB,CAApC;;AAEA,QAAI,CAACG,YAAL,EAAmB;AAClB;AACA;;AAED,UAAMC,OAAO,GAAG,EAAhB;AAEAH,IAAAA,IAAI,CAACI,WAAL,CAAiB,WAAjB,EAA+BC,MAAD,IAAY;AACzC,YAAMC,MAAM,GAAGb,WAAW,CAACY,MAAM,CAACC,MAAR,CAAX,CAA2BC,KAA1C;;AAEA,UAAI,CAACD,MAAM,CAACE,MAAZ,EAAoB;AACnB;AACA,OALwC,CAOzC;;;AACA,YAAMC,GAAG,GACRH,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAV,KAAmB,UAAnB,IAAiCJ,MAAM,CAAC,CAAD,CAAN,CAAUK,KAAV,KAAoB,KAArD,GACGL,MAAM,CAAC,CAAD,CAAN,CAAUC,KAAV,CAAgB,CAAhB,EAAmBI,KADtB,GAEGL,MAAM,CAAC,CAAD,CAAN,CAAUK,KAHd,CARyC,CAYzC;;AACA,YAAMC,KAAK,GAAGzB,WAAW,CAACM,WAAW,CAACoB,SAAZ,CAAsBP,MAAM,CAACQ,KAAP,CAAa,CAAb,CAAtB,CAAD,CAAX,CACZP,KADY,CACNQ,GADM,CACDC,CAAD,IAAOA,CAAC,CAACL,KAAF,CAAQM,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CADL,EAEZC,MAFY,CAEJF,CAAD,IAAOA,CAAC,CAACR,MAFJ,CAAd;AAIA,YAAMW,WAAW,GAAGP,KAAK,CAACJ,MAAN,GACjBL,OAAO,CAACM,GAAD,CAAP,IAAgBG,KAAK,CAACQ,IAAN,CAAYC,CAAD,IAAOlB,OAAO,CAACM,GAAD,CAAP,CAAaa,QAAb,CAAsBD,CAAtB,CAAlB,CADC,GAEjBlB,OAAO,CAACM,GAAD,CAFV;;AAIA,UAAIU,WAAJ,EAAiB;AAChB7B,QAAAA,MAAM,CAAC;AACNiC,UAAAA,OAAO,EAAE5B,QAAQ,CAACC,QAAT,CAAkBa,GAAlB,CADH;AAENe,UAAAA,IAAI,EAAEnB,MAFA;AAGNJ,UAAAA,MAHM;AAINP,UAAAA;AAJM,SAAD,CAAN;AAOA;AACA;;AAED,UAAI,CAACS,OAAO,CAACM,GAAD,CAAZ,EAAmBN,OAAO,CAACM,GAAD,CAAP,GAAe,EAAf;AAEnBN,MAAAA,OAAO,CAACM,GAAD,CAAP,GAAeN,OAAO,CAACM,GAAD,CAAP,CAAagB,MAAb,CAAoBb,KAApB,CAAf;AACA,KAnCD;AAoCA,GA7CD;AA8CA;;AAEDd,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACA+B,MAAM,CAACC,OAAP,GAAiB7B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst mediaParser = require('postcss-media-query-parser').default;\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'no-duplicate-at-import-rules';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (atImport) => `Unexpected duplicate @import rule ${atImport}`,\n});\n\nfunction rule(actual) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst imports = {};\n\n\t\troot.walkAtRules(/^import$/i, (atRule) => {\n\t\t\tconst params = valueParser(atRule.params).nodes;\n\n\t\t\tif (!params.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// extract uri from url() if exists\n\t\t\tconst uri =\n\t\t\t\tparams[0].type === 'function' && params[0].value === 'url'\n\t\t\t\t\t? params[0].nodes[0].value\n\t\t\t\t\t: params[0].value;\n\t\t\t// extract media queries if any\n\t\t\tconst media = mediaParser(valueParser.stringify(params.slice(1)))\n\t\t\t\t.nodes.map((n) => n.value.replace(/\\s/g, ''))\n\t\t\t\t.filter((n) => n.length);\n\n\t\t\tconst isDuplicate = media.length\n\t\t\t\t? imports[uri] && media.some((q) => imports[uri].includes(q))\n\t\t\t\t: imports[uri];\n\n\t\t\tif (isDuplicate) {\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(uri),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!imports[uri]) imports[uri] = [];\n\n\t\t\timports[uri] = imports[uri].concat(media);\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}