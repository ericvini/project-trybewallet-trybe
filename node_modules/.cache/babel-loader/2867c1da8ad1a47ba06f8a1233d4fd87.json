{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\n\nconst blockString = require('../../utils/blockString');\n\nconst hasBlock = require('../../utils/hasBlock');\n\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: () => 'Expected single space after \"{\"',\n  rejectedAfter: () => 'Unexpected whitespace after \"{\"',\n  expectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n  rejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n  expectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n  rejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never', 'always-single-line', 'never-single-line', 'always-multi-line', 'never-multi-line']\n    });\n\n    if (!validOptions) {\n      return;\n    } // Check both kinds of statements: rules and at-rules\n\n\n    root.walkRules(check);\n    root.walkAtRules(check);\n\n    function check(statement) {\n      // Return early if blockless or has an empty block\n      if (!hasBlock(statement) || hasEmptyBlock(statement)) {\n        return;\n      }\n\n      checker.after({\n        source: blockString(statement),\n        index: 0,\n        err: m => {\n          if (context.fix) {\n            if (expectation.startsWith('always')) {\n              statement.first.raws.before = ' ';\n              return;\n            }\n\n            if (expectation.startsWith('never')) {\n              statement.first.raws.before = '';\n              return;\n            }\n          }\n\n          report({\n            message: m,\n            node: statement,\n            index: beforeBlockString(statement, {\n              noRawBefore: true\n            }).length + 1,\n            result,\n            ruleName\n          });\n        }\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/block-opening-brace-space-after/index.js"],"names":["beforeBlockString","require","blockString","hasBlock","hasEmptyBlock","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","rejectedAfter","expectedAfterSingleLine","rejectedAfterSingleLine","expectedAfterMultiLine","rejectedAfterMultiLine","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","walkRules","check","walkAtRules","statement","after","source","index","err","m","fix","startsWith","first","raws","before","message","node","noRawBefore","length","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst beforeBlockString = require('../../utils/beforeBlockString');\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-opening-brace-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \"{\"',\n\trejectedAfter: () => 'Unexpected whitespace after \"{\"',\n\texpectedAfterSingleLine: () => 'Expected single space after \"{\" of a single-line block',\n\trejectedAfterSingleLine: () => 'Unexpected whitespace after \"{\" of a single-line block',\n\texpectedAfterMultiLine: () => 'Expected single space after \"{\" of a multi-line block',\n\trejectedAfterMultiLine: () => 'Unexpected whitespace after \"{\" of a multi-line block',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statements: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has an empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: blockString(statement),\n\t\t\t\tindex: 0,\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (expectation.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.first.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.first.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex: beforeBlockString(statement, { noRawBefore: true }).length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}