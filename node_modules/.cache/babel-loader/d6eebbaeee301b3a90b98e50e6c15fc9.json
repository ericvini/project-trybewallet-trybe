{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\n\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\n\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n});\n\nfunction rule(expectation, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['lower', 'upper']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(/^media$/i, atRule => {\n      let hasComments = _.get(atRule, 'raws.params.raw');\n\n      const mediaRule = hasComments ? hasComments : atRule.params;\n      mediaParser(mediaRule).walk(/^media-feature$/i, mediaFeatureNode => {\n        const parent = mediaFeatureNode.parent;\n        const mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n        let value;\n        let sourceIndex;\n\n        if (mediaFeatureRangeContext) {\n          const parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n          value = parsedRangeContext.name.value;\n          sourceIndex = parsedRangeContext.name.sourceIndex;\n        } else {\n          value = mediaFeatureNode.value;\n          sourceIndex = mediaFeatureNode.sourceIndex;\n        }\n\n        if (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n          return;\n        }\n\n        const expectedFeatureName = expectation === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n        if (value === expectedFeatureName) {\n          return;\n        }\n\n        if (context.fix) {\n          if (hasComments) {\n            hasComments = hasComments.slice(0, sourceIndex) + expectedFeatureName + hasComments.slice(sourceIndex + expectedFeatureName.length);\n\n            _.set(atRule, 'raws.params.raw', hasComments);\n          } else {\n            atRule.params = atRule.params.slice(0, sourceIndex) + expectedFeatureName + atRule.params.slice(sourceIndex + expectedFeatureName.length);\n          }\n\n          return;\n        }\n\n        report({\n          index: atRuleParamIndex(atRule) + sourceIndex,\n          message: messages.expected(value, expectedFeatureName),\n          node: atRule,\n          ruleName,\n          result\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-feature-name-case/index.js"],"names":["_","require","atRuleParamIndex","isCustomMediaQuery","isRangeContextMediaFeature","isStandardSyntaxMediaFeatureName","mediaParser","default","rangeContextNodeParser","report","ruleMessages","validateOptions","ruleName","messages","expected","actual","rule","expectation","options","context","root","result","validOptions","possible","walkAtRules","atRule","hasComments","get","mediaRule","params","walk","mediaFeatureNode","parent","mediaFeatureRangeContext","value","sourceIndex","parsedRangeContext","name","expectedFeatureName","toLowerCase","toUpperCase","fix","slice","length","set","index","message","node","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'media-feature-name-case';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nfunction rule(expectation, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['lower', 'upper'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tlet hasComments = _.get(atRule, 'raws.params.raw');\n\t\t\tconst mediaRule = hasComments ? hasComments : atRule.params;\n\n\t\t\tmediaParser(mediaRule).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst expectedFeatureName =\n\t\t\t\t\texpectation === 'lower' ? value.toLowerCase() : value.toUpperCase();\n\n\t\t\t\tif (value === expectedFeatureName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (hasComments) {\n\t\t\t\t\t\thasComments =\n\t\t\t\t\t\t\thasComments.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\thasComments.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t\t_.set(atRule, 'raws.params.raw', hasComments);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tatRule.params =\n\t\t\t\t\t\t\tatRule.params.slice(0, sourceIndex) +\n\t\t\t\t\t\t\texpectedFeatureName +\n\t\t\t\t\t\t\tatRule.params.slice(sourceIndex + expectedFeatureName.length);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.expected(value, expectedFeatureName),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}