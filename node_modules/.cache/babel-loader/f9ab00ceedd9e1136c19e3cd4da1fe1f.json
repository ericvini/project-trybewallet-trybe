{"ast":null,"code":"'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Pseudo} node postcss-selector-parser node (of type pseudo)\n * @return {boolean} If `true`, the node is a context-functional pseudo-class\n */\n\n\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n  if (node.type === 'pseudo') {\n    const normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n    return keywordSets.logicalCombinationsPseudoClasses.has(normalisedParentName) || keywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName);\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/isContextFunctionalPseudoClass.js"],"names":["keywordSets","require","module","exports","isContextFunctionalPseudoClass","node","type","normalisedParentName","value","toLowerCase","replace","logicalCombinationsPseudoClasses","has","aNPlusBOfSNotationPseudoClasses"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,0BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,8BAAT,CAAwCC,IAAxC,EAA8C;AAC9D,MAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AAC3B,UAAMC,oBAAoB,GAAGF,IAAI,CAACG,KAAL,CAAWC,WAAX,GAAyBC,OAAzB,CAAiC,IAAjC,EAAuC,EAAvC,CAA7B;AAEA,WACCV,WAAW,CAACW,gCAAZ,CAA6CC,GAA7C,CAAiDL,oBAAjD,KACAP,WAAW,CAACa,+BAAZ,CAA4CD,GAA5C,CAAgDL,oBAAhD,CAFD;AAIA;;AAED,SAAO,KAAP;AACA,CAXD","sourcesContent":["'use strict';\n\nconst keywordSets = require('../reference/keywordSets');\n\n/**\n * Check whether a node is a context-functional pseudo-class (i.e. either a logical combination\n * or a 'aNPlusBOfSNotationPseudoClasses' / tree-structural pseudo-class)\n *\n * @param {import('postcss-selector-parser').Pseudo} node postcss-selector-parser node (of type pseudo)\n * @return {boolean} If `true`, the node is a context-functional pseudo-class\n */\nmodule.exports = function isContextFunctionalPseudoClass(node) {\n\tif (node.type === 'pseudo') {\n\t\tconst normalisedParentName = node.value.toLowerCase().replace(/:+/, '');\n\n\t\treturn (\n\t\t\tkeywordSets.logicalCombinationsPseudoClasses.has(normalisedParentName) ||\n\t\t\tkeywordSets.aNPlusBOfSNotationPseudoClasses.has(normalisedParentName)\n\t\t);\n\t}\n\n\treturn false;\n};\n"]},"metadata":{},"sourceType":"script"}