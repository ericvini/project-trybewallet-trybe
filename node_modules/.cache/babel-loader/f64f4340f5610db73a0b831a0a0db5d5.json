{"ast":null,"code":"// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { NEW_EXPENSE, REQUEST_CURRENCIES, RECEIVE_CURRENCIES_SUCCESS, RECEIVE_CURRENCIES_FAILURE, EXCLUDE_EXPENSE } from '../actions';\nconst INITAL_STATE = {\n  isFetching: false,\n  currencies: {},\n  expenses: [],\n  error: ''\n};\n\nconst walletReducer = (state = INITAL_STATE, action) => {\n  switch (action.type) {\n    case NEW_EXPENSE:\n      return { ...state,\n        expenses: [...state.expenses, action.value]\n      };\n\n    case REQUEST_CURRENCIES:\n      return { ...state,\n        isFetching: true\n      };\n\n    case RECEIVE_CURRENCIES_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        currencies: { ...action.currencies\n        }\n      };\n\n    case RECEIVE_CURRENCIES_FAILURE:\n      return { ...state,\n        isFetching: false,\n        error: action.err.message\n      };\n\n    case EXCLUDE_EXPENSE:\n      return { ...state,\n        expenses: [...state.expenses.filter(expense => expense.id !== action.id)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default walletReducer;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/src/reducers/wallet.js"],"names":["NEW_EXPENSE","REQUEST_CURRENCIES","RECEIVE_CURRENCIES_SUCCESS","RECEIVE_CURRENCIES_FAILURE","EXCLUDE_EXPENSE","INITAL_STATE","isFetching","currencies","expenses","error","walletReducer","state","action","type","value","err","message","filter","expense","id"],"mappings":"AAAA;AACA,SACEA,WADF,EAEEC,kBAFF,EAGEC,0BAHF,EAIEC,0BAJF,EAKEC,eALF,QAMO,YANP;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;;AAOA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKb,WAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AAAYH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,KAA3B;AAAtB,OAAP;;AACF,SAAKb,kBAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYL,QAAAA,UAAU,EAAE;AAAxB,OAAP;;AACF,SAAKJ,0BAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELL,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,UAAU,EAAE,EAAE,GAAGK,MAAM,CAACL;AAAZ;AAHP,OAAP;;AAKF,SAAKJ,0BAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELL,QAAAA,UAAU,EAAE,KAFP;AAGLG,QAAAA,KAAK,EAAEG,MAAM,CAACG,GAAP,CAAWC;AAHb,OAAP;;AAKF,SAAKZ,eAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AACLH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAN,CAAeS,MAAf,CAAuBC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACO,EAAzD,CAAJ;AADL,OAAP;;AAEF;AACE,aAAOR,KAAP;AArBF;AAuBD,CAxBD;;AA0BA,eAAeD,aAAf","sourcesContent":["// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  NEW_EXPENSE,\n  REQUEST_CURRENCIES,\n  RECEIVE_CURRENCIES_SUCCESS,\n  RECEIVE_CURRENCIES_FAILURE,\n  EXCLUDE_EXPENSE,\n} from '../actions';\n\nconst INITAL_STATE = {\n  isFetching: false,\n  currencies: {},\n  expenses: [],\n  error: '',\n};\n\nconst walletReducer = (state = INITAL_STATE, action) => {\n  switch (action.type) {\n  case NEW_EXPENSE:\n    return { ...state, expenses: [...state.expenses, action.value] };\n  case REQUEST_CURRENCIES:\n    return { ...state, isFetching: true };\n  case RECEIVE_CURRENCIES_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: { ...action.currencies },\n    };\n  case RECEIVE_CURRENCIES_FAILURE:\n    return {\n      ...state,\n      isFetching: false,\n      error: action.err.message,\n    };\n  case EXCLUDE_EXPENSE:\n    return { ...state,\n      expenses: [...state.expenses.filter((expense) => expense.id !== action.id)] };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n"]},"metadata":{},"sourceType":"module"}