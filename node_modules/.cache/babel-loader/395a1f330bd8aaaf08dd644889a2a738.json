{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\nconst messages = ruleMessages(ruleName, {\n  rejected: 'Unexpected qualifying type selector'\n});\nconst selectorCharacters = ['#', '.', '['];\n\nfunction isSelectorCharacters(value) {\n  return selectorCharacters.some(char => value.includes(char));\n}\n\nfunction getRightNodes(node) {\n  const result = [];\n  let rightNode = node;\n\n  while (rightNode = rightNode.next()) {\n    if (rightNode.type === 'combinator') {\n      break;\n    }\n\n    if (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n      continue;\n    }\n\n    result.push(rightNode);\n  }\n\n  return result;\n}\n\nfunction rule(enabled, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: enabled,\n      possible: [true, false]\n    }, {\n      actual: options,\n      possible: {\n        ignore: ['attribute', 'class', 'id']\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      if (isKeyframeRule(rule)) {\n        return;\n      }\n\n      if (!isSelectorCharacters(rule.selector)) {\n        return;\n      }\n\n      function checkSelector(selectorAST) {\n        selectorAST.walkTags(selector => {\n          const selectorParent = selector.parent;\n\n          if (selectorParent.nodes.length === 1) {\n            return;\n          }\n\n          const selectorNodes = getRightNodes(selector);\n          const index = selector.sourceIndex;\n          selectorNodes.forEach(selectorNode => {\n            if (selectorNode.type === 'id' && !optionsMatches(options, 'ignore', 'id')) {\n              complain(index);\n            }\n\n            if (selectorNode.type === 'class' && !optionsMatches(options, 'ignore', 'class')) {\n              complain(index);\n            }\n\n            if (selectorNode.type === 'attribute' && !optionsMatches(options, 'ignore', 'attribute')) {\n              complain(index);\n            }\n          });\n        });\n      }\n\n      resolvedNestedSelector(rule.selector, rule).forEach(resolvedSelector => {\n        if (!isStandardSyntaxSelector(resolvedSelector)) {\n          return;\n        }\n\n        parseSelector(resolvedSelector, result, rule, checkSelector);\n      });\n\n      function complain(index) {\n        report({\n          ruleName,\n          result,\n          node: rule,\n          message: messages.rejected,\n          index\n        });\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.js"],"names":["isKeyframeRule","require","isStandardSyntaxRule","isStandardSyntaxSelector","optionsMatches","parseSelector","report","resolvedNestedSelector","ruleMessages","validateOptions","ruleName","messages","rejected","selectorCharacters","isSelectorCharacters","value","some","char","includes","getRightNodes","node","result","rightNode","next","type","push","rule","enabled","options","root","validOptions","actual","possible","ignore","optional","walkRules","selector","checkSelector","selectorAST","walkTags","selectorParent","parent","nodes","length","selectorNodes","index","sourceIndex","forEach","selectorNode","complain","resolvedSelector","message","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isKeyframeRule = require('../../utils/isKeyframeRule');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-no-qualifying-type';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected qualifying type selector',\n});\n\nconst selectorCharacters = ['#', '.', '['];\n\nfunction isSelectorCharacters(value) {\n\treturn selectorCharacters.some((char) => value.includes(char));\n}\n\nfunction getRightNodes(node) {\n\tconst result = [];\n\tlet rightNode = node;\n\n\twhile ((rightNode = rightNode.next())) {\n\t\tif (rightNode.type === 'combinator') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rightNode.type !== 'id' && rightNode.type !== 'class' && rightNode.type !== 'attribute') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(rightNode);\n\t}\n\n\treturn result;\n}\n\nfunction rule(enabled, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: enabled,\n\t\t\t\tpossible: [true, false],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['attribute', 'class', 'id'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isKeyframeRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isSelectorCharacters(rule.selector)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunction checkSelector(selectorAST) {\n\t\t\t\tselectorAST.walkTags((selector) => {\n\t\t\t\t\tconst selectorParent = selector.parent;\n\n\t\t\t\t\tif (selectorParent.nodes.length === 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectorNodes = getRightNodes(selector);\n\t\t\t\t\tconst index = selector.sourceIndex;\n\n\t\t\t\t\tselectorNodes.forEach((selectorNode) => {\n\t\t\t\t\t\tif (selectorNode.type === 'id' && !optionsMatches(options, 'ignore', 'id')) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (selectorNode.type === 'class' && !optionsMatches(options, 'ignore', 'class')) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselectorNode.type === 'attribute' &&\n\t\t\t\t\t\t\t!optionsMatches(options, 'ignore', 'attribute')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcomplain(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresolvedNestedSelector(rule.selector, rule).forEach((resolvedSelector) => {\n\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tparseSelector(resolvedSelector, result, rule, checkSelector);\n\t\t\t});\n\n\t\t\tfunction complain(index) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: rule,\n\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\tindex,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}