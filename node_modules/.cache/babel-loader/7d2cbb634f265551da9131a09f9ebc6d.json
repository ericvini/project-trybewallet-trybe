{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\n\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\n\nconst isVariable = require('../../utils/isVariable');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\nconst messages = ruleMessages(ruleName, {\n  expected: family => `Expected quotes around \"${family}\"`,\n  rejected: family => `Unexpected quotes around \"${family}\"`\n});\n\nfunction isSystemFontKeyword(font) {\n  if (font.startsWith('-apple-')) {\n    return true;\n  }\n\n  if (font === 'BlinkMacSystemFont') {\n    return true;\n  }\n\n  return false;\n} // \"To avoid mistakes in escaping, it is recommended to quote font family names\n// that contain white space, digits, or punctuation characters other than hyphens\"\n// (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\n\n\nfunction quotesRecommended(family) {\n  return !/^[-a-zA-Z]+$/.test(family);\n} // Quotes are required if the family is not a valid CSS identifier\n// (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\n\n\nfunction quotesRequired(family) {\n  return family.split(/\\s+/).some(word => {\n    return /^(-?\\d|--)/.test(word) || !/^[-_a-zA-Z0-9\\u{00A0}-\\u{10FFFF}]+$/u.test(word);\n  });\n}\n\nfunction rule(expectation) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(/^font(-family)?$/i, decl => {\n      const fontFamilies = findFontFamily(decl.value);\n\n      if (fontFamilies.length === 0) {\n        return;\n      }\n\n      fontFamilies.forEach(fontFamilyNode => {\n        let rawFamily = fontFamilyNode.value;\n\n        if (fontFamilyNode.quote) {\n          rawFamily = fontFamilyNode.quote + rawFamily + fontFamilyNode.quote;\n        }\n\n        checkFamilyName(rawFamily, decl);\n      });\n    });\n\n    function checkFamilyName(rawFamily, decl) {\n      if (!isStandardSyntaxValue(rawFamily)) {\n        return;\n      }\n\n      if (isVariable(rawFamily)) {\n        return;\n      }\n\n      const hasQuotes = rawFamily.startsWith(\"'\") || rawFamily.startsWith('\"'); // Clean the family of its quotes\n\n      const family = rawFamily.replace(/^['\"]|['\"]$/g, ''); // Disallow quotes around (case-insensitive) keywords\n      // and system font keywords in all cases\n\n      if (keywordSets.fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n        if (hasQuotes) {\n          return complain(messages.rejected(family), family, decl);\n        }\n\n        return;\n      }\n\n      const required = quotesRequired(family);\n      const recommended = quotesRecommended(family);\n\n      switch (expectation) {\n        case 'always-unless-keyword':\n          if (!hasQuotes) {\n            return complain(messages.expected(family), family, decl);\n          }\n\n          return;\n\n        case 'always-where-recommended':\n          if (!recommended && hasQuotes) {\n            return complain(messages.rejected(family), family, decl);\n          }\n\n          if (recommended && !hasQuotes) {\n            return complain(messages.expected(family), family, decl);\n          }\n\n          return;\n\n        case 'always-where-required':\n          if (!required && hasQuotes) {\n            return complain(messages.rejected(family), family, decl);\n          }\n\n          if (required && !hasQuotes) {\n            return complain(messages.expected(family), family, decl);\n          }\n\n      }\n    }\n\n    function complain(message, family, decl) {\n      report({\n        result,\n        ruleName,\n        message,\n        node: decl,\n        word: family\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/font-family-name-quotes/index.js"],"names":["findFontFamily","require","isStandardSyntaxValue","isVariable","keywordSets","report","ruleMessages","validateOptions","ruleName","messages","expected","family","rejected","isSystemFontKeyword","font","startsWith","quotesRecommended","test","quotesRequired","split","some","word","rule","expectation","root","result","validOptions","actual","possible","walkDecls","decl","fontFamilies","value","length","forEach","fontFamilyNode","rawFamily","quote","checkFamilyName","hasQuotes","replace","fontFamilyKeywords","has","toLowerCase","complain","required","recommended","message","node","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-family-name-quotes';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (family) => `Expected quotes around \"${family}\"`,\n\trejected: (family) => `Unexpected quotes around \"${family}\"`,\n});\n\nfunction isSystemFontKeyword(font) {\n\tif (font.startsWith('-apple-')) {\n\t\treturn true;\n\t}\n\n\tif (font === 'BlinkMacSystemFont') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// \"To avoid mistakes in escaping, it is recommended to quote font family names\n// that contain white space, digits, or punctuation characters other than hyphens\"\n// (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)\nfunction quotesRecommended(family) {\n\treturn !/^[-a-zA-Z]+$/.test(family);\n}\n\n// Quotes are required if the family is not a valid CSS identifier\n// (regexes from https://mathiasbynens.be/notes/unquoted-font-family)\nfunction quotesRequired(family) {\n\treturn family.split(/\\s+/).some((word) => {\n\t\treturn /^(-?\\d|--)/.test(word) || !/^[-_a-zA-Z0-9\\u{00A0}-\\u{10FFFF}]+$/u.test(word);\n\t});\n}\n\nfunction rule(expectation) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always-where-required', 'always-where-recommended', 'always-unless-keyword'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfontFamilies.forEach((fontFamilyNode) => {\n\t\t\t\tlet rawFamily = fontFamilyNode.value;\n\n\t\t\t\tif (fontFamilyNode.quote) {\n\t\t\t\t\trawFamily = fontFamilyNode.quote + rawFamily + fontFamilyNode.quote;\n\t\t\t\t}\n\n\t\t\t\tcheckFamilyName(rawFamily, decl);\n\t\t\t});\n\t\t});\n\n\t\tfunction checkFamilyName(rawFamily, decl) {\n\t\t\tif (!isStandardSyntaxValue(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(rawFamily)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasQuotes = rawFamily.startsWith(\"'\") || rawFamily.startsWith('\"');\n\n\t\t\t// Clean the family of its quotes\n\t\t\tconst family = rawFamily.replace(/^['\"]|['\"]$/g, '');\n\n\t\t\t// Disallow quotes around (case-insensitive) keywords\n\t\t\t// and system font keywords in all cases\n\t\t\tif (keywordSets.fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {\n\t\t\t\tif (hasQuotes) {\n\t\t\t\t\treturn complain(messages.rejected(family), family, decl);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst required = quotesRequired(family);\n\t\t\tconst recommended = quotesRecommended(family);\n\n\t\t\tswitch (expectation) {\n\t\t\t\tcase 'always-unless-keyword':\n\t\t\t\t\tif (!hasQuotes) {\n\t\t\t\t\t\treturn complain(messages.expected(family), family, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-recommended':\n\t\t\t\t\tif (!recommended && hasQuotes) {\n\t\t\t\t\t\treturn complain(messages.rejected(family), family, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recommended && !hasQuotes) {\n\t\t\t\t\t\treturn complain(messages.expected(family), family, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'always-where-required':\n\t\t\t\t\tif (!required && hasQuotes) {\n\t\t\t\t\t\treturn complain(messages.rejected(family), family, decl);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (required && !hasQuotes) {\n\t\t\t\t\t\treturn complain(messages.expected(family), family, decl);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction complain(message, family, decl) {\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage,\n\t\t\t\tnode: decl,\n\t\t\t\tword: family,\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}