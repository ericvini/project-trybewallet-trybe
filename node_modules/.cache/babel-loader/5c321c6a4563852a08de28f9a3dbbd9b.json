{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\n\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\n\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\n\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-type';\nconst messages = ruleMessages(ruleName, {\n  expected: (selector, max) => `Expected \"${selector}\" to have no more than ${max} type ${max === 1 ? 'selector' : 'selectors'}`\n});\n\nfunction rule(max, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: max,\n\n      // TODO: Issue #4985\n      // eslint-disable-next-line no-shadow\n      possible(max) {\n        return typeof max === 'number' && max >= 0;\n      }\n\n    }, {\n      actual: options,\n      possible: {\n        ignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n        ignoreTypes: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const ignoreDescendant = optionsMatches(options, 'ignore', 'descendant');\n    const ignoreChild = optionsMatches(options, 'ignore', 'child');\n    const ignoreCompounded = optionsMatches(options, 'ignore', 'compounded');\n    const ignoreNextSibling = optionsMatches(options, 'ignore', 'next-sibling');\n\n    function checkSelector(selectorNode, ruleNode) {\n      const count = selectorNode.reduce((total, childNode) => {\n        // Only traverse inside actual selectors and context functional pseudo-classes\n        if (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n          checkSelector(childNode, ruleNode);\n        }\n\n        if (optionsMatches(options, 'ignoreTypes', childNode.value)) {\n          return total;\n        }\n\n        if (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n          return total;\n        }\n\n        if (ignoreChild && hasChildCombinatorBefore(childNode)) {\n          return total;\n        }\n\n        if (ignoreCompounded && hasCompoundSelector(childNode)) {\n          return total;\n        }\n\n        if (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n          return total;\n        }\n\n        if (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n          return total;\n        }\n\n        return total + (childNode.type === 'tag');\n      }, 0);\n\n      if (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > max) {\n        report({\n          ruleName,\n          result,\n          node: ruleNode,\n          message: messages.expected(selectorNode, max),\n          word: selectorNode\n        });\n      }\n    }\n\n    root.walkRules(ruleNode => {\n      const selectors = ruleNode.selectors;\n\n      if (!isStandardSyntaxRule(ruleNode)) {\n        return;\n      }\n\n      if (selectors.some(s => isKeyframeSelector(s))) {\n        return;\n      }\n\n      ruleNode.selectors.forEach(selector => {\n        resolvedNestedSelector(selector, ruleNode).forEach(resolvedSelector => {\n          if (!isStandardSyntaxSelector(resolvedSelector)) {\n            return;\n          }\n\n          parseSelector(resolvedSelector, result, ruleNode, container => checkSelector(container, ruleNode));\n        });\n      });\n    });\n  };\n}\n\nfunction hasDescendantCombinatorBefore(node) {\n  const nodeIndex = node.parent.nodes.indexOf(node);\n  return node.parent.nodes.slice(0, nodeIndex).some(isDescendantCombinator);\n}\n\nfunction hasChildCombinatorBefore(node) {\n  const nodeIndex = node.parent.nodes.indexOf(node);\n  return node.parent.nodes.slice(0, nodeIndex).some(isChildCombinator);\n}\n\nfunction hasCompoundSelector(node) {\n  if (node.prev() && !isCombinator(node.prev())) {\n    return true;\n  }\n\n  return node.next() && !isCombinator(node.next());\n}\n\nfunction hasNextSiblingCombinator(node) {\n  return node.prev() && isNextSiblingCombinator(node.prev());\n}\n\nfunction isCombinator(node) {\n  if (!node) return false;\n  return _.get(node, 'type') === 'combinator';\n}\n\nfunction isDescendantCombinator(node) {\n  if (!node) return false;\n  return isCombinator(node) && isOnlyWhitespace(node.value);\n}\n\nfunction isChildCombinator(node) {\n  if (!node) return false;\n  return isCombinator(node) && node.value === '>';\n}\n\nfunction isNextSiblingCombinator(node) {\n  return isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-max-type/index.js"],"names":["_","require","isContextFunctionalPseudoClass","isKeyframeSelector","isOnlyWhitespace","isStandardSyntaxRule","isStandardSyntaxSelector","isStandardSyntaxTypeSelector","optionsMatches","parseSelector","report","resolvedNestedSelector","ruleMessages","validateOptions","ruleName","messages","expected","selector","max","rule","options","root","result","validOptions","actual","possible","ignore","ignoreTypes","isString","isRegExp","optional","ignoreDescendant","ignoreChild","ignoreCompounded","ignoreNextSibling","checkSelector","selectorNode","ruleNode","count","reduce","total","childNode","type","value","hasDescendantCombinatorBefore","hasChildCombinatorBefore","hasCompoundSelector","hasNextSiblingCombinator","node","message","word","walkRules","selectors","some","s","forEach","resolvedSelector","container","nodeIndex","parent","nodes","indexOf","slice","isDescendantCombinator","isChildCombinator","prev","isCombinator","next","isNextSiblingCombinator","get","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isKeyframeSelector = require('../../utils/isKeyframeSelector');\nconst isOnlyWhitespace = require('../../utils/isOnlyWhitespace');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst isStandardSyntaxSelector = require('../../utils/isStandardSyntaxSelector');\nconst isStandardSyntaxTypeSelector = require('../../utils/isStandardSyntaxTypeSelector');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-type';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} type ${\n\t\t\tmax === 1 ? 'selector' : 'selectors'\n\t\t}`,\n});\n\nfunction rule(max, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: max,\n\t\t\t\t// TODO: Issue #4985\n\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\tpossible(max) {\n\t\t\t\t\treturn typeof max === 'number' && max >= 0;\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['descendant', 'child', 'compounded', 'next-sibling'],\n\t\t\t\t\tignoreTypes: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ignoreDescendant = optionsMatches(options, 'ignore', 'descendant');\n\t\tconst ignoreChild = optionsMatches(options, 'ignore', 'child');\n\t\tconst ignoreCompounded = optionsMatches(options, 'ignore', 'compounded');\n\t\tconst ignoreNextSibling = optionsMatches(options, 'ignore', 'next-sibling');\n\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(options, 'ignoreTypes', childNode.value)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreDescendant && hasDescendantCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreChild && hasChildCombinatorBefore(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreCompounded && hasCompoundSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (ignoreNextSibling && hasNextSiblingCombinator(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\tif (childNode.type === 'tag' && !isStandardSyntaxTypeSelector(childNode)) {\n\t\t\t\t\treturn total;\n\t\t\t\t}\n\n\t\t\t\treturn total + (childNode.type === 'tag');\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > max) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selectorNode, max),\n\t\t\t\t\tword: selectorNode,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst selectors = ruleNode.selectors;\n\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (selectors.some((s) => isKeyframeSelector(s))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\truleNode.selectors.forEach((selector) => {\n\t\t\t\tresolvedNestedSelector(selector, ruleNode).forEach((resolvedSelector) => {\n\t\t\t\t\tif (!isStandardSyntaxSelector(resolvedSelector)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nfunction hasDescendantCombinatorBefore(node) {\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some(isDescendantCombinator);\n}\n\nfunction hasChildCombinatorBefore(node) {\n\tconst nodeIndex = node.parent.nodes.indexOf(node);\n\n\treturn node.parent.nodes.slice(0, nodeIndex).some(isChildCombinator);\n}\n\nfunction hasCompoundSelector(node) {\n\tif (node.prev() && !isCombinator(node.prev())) {\n\t\treturn true;\n\t}\n\n\treturn node.next() && !isCombinator(node.next());\n}\n\nfunction hasNextSiblingCombinator(node) {\n\treturn node.prev() && isNextSiblingCombinator(node.prev());\n}\n\nfunction isCombinator(node) {\n\tif (!node) return false;\n\n\treturn _.get(node, 'type') === 'combinator';\n}\n\nfunction isDescendantCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && isOnlyWhitespace(node.value);\n}\n\nfunction isChildCombinator(node) {\n\tif (!node) return false;\n\n\treturn isCombinator(node) && node.value === '>';\n}\n\nfunction isNextSiblingCombinator(node) {\n\treturn isCombinator(node) && node.value === '+';\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}