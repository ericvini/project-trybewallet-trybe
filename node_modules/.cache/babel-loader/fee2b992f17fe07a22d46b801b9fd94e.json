{"ast":null,"code":"'use strict';\n/** @typedef {import('postcss').Rule} Rule */\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {Rule | AtRule} statement\n * @param {{\n * \tnoRawBefore?: boolean\n * }} options\n *\n * @returns {string}\n */\n\nmodule.exports = function (statement, options = {}) {\n  let result = '';\n  /** @type {Rule | undefined} */\n\n  let rule;\n  /*?: postcss$rule*/\n\n  /** @type {AtRule | undefined} */\n\n  let atRule;\n  /*?: postcss$atRule*/\n\n  if (statement.type === 'rule') {\n    rule = statement;\n  }\n\n  if (statement.type === 'atrule') {\n    atRule = statement;\n  }\n\n  if (!rule && !atRule) {\n    return result;\n  }\n\n  const before = statement.raws.before || '';\n\n  if (!options.noRawBefore) {\n    result += before;\n  }\n\n  if (rule) {\n    result += rule.selector;\n  }\n\n  if (atRule) {\n    result += `@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`;\n  }\n\n  const between = statement.raws.between;\n\n  if (between !== undefined) {\n    result += between;\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/beforeBlockString.js"],"names":["module","exports","statement","options","result","rule","atRule","type","before","raws","noRawBefore","selector","name","afterName","params","between","undefined"],"mappings":"AAAA;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACnD,MAAIC,MAAM,GAAG,EAAb;AACA;;AACA,MAAIC,IAAJ;AAAU;;AACV;;AACA,MAAIC,MAAJ;AAAY;;AAEZ,MAAIJ,SAAS,CAACK,IAAV,KAAmB,MAAvB,EAA+B;AAC9BF,IAAAA,IAAI,GAAGH,SAAP;AACA;;AAED,MAAIA,SAAS,CAACK,IAAV,KAAmB,QAAvB,EAAiC;AAChCD,IAAAA,MAAM,GAAGJ,SAAT;AACA;;AAED,MAAI,CAACG,IAAD,IAAS,CAACC,MAAd,EAAsB;AACrB,WAAOF,MAAP;AACA;;AAED,QAAMI,MAAM,GAAGN,SAAS,CAACO,IAAV,CAAeD,MAAf,IAAyB,EAAxC;;AAEA,MAAI,CAACL,OAAO,CAACO,WAAb,EAA0B;AACzBN,IAAAA,MAAM,IAAII,MAAV;AACA;;AAED,MAAIH,IAAJ,EAAU;AACTD,IAAAA,MAAM,IAAIC,IAAI,CAACM,QAAf;AACA;;AAED,MAAIL,MAAJ,EAAY;AACXF,IAAAA,MAAM,IAAK,IAAGE,MAAM,CAACM,IAAK,GAAEN,MAAM,CAACG,IAAP,CAAYI,SAAZ,IAAyB,EAAG,GAAEP,MAAM,CAACQ,MAAO,EAAxE;AACA;;AAED,QAAMC,OAAO,GAAGb,SAAS,CAACO,IAAV,CAAeM,OAA/B;;AAEA,MAAIA,OAAO,KAAKC,SAAhB,EAA2B;AAC1BZ,IAAAA,MAAM,IAAIW,OAAV;AACA;;AAED,SAAOX,MAAP;AACA,CAxCD","sourcesContent":["'use strict';\n\n/** @typedef {import('postcss').Rule} Rule */\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * @param {Rule | AtRule} statement\n * @param {{\n * \tnoRawBefore?: boolean\n * }} options\n *\n * @returns {string}\n */\nmodule.exports = function (statement, options = {}) {\n\tlet result = '';\n\t/** @type {Rule | undefined} */\n\tlet rule; /*?: postcss$rule*/\n\t/** @type {AtRule | undefined} */\n\tlet atRule; /*?: postcss$atRule*/\n\n\tif (statement.type === 'rule') {\n\t\trule = statement;\n\t}\n\n\tif (statement.type === 'atrule') {\n\t\tatRule = statement;\n\t}\n\n\tif (!rule && !atRule) {\n\t\treturn result;\n\t}\n\n\tconst before = statement.raws.before || '';\n\n\tif (!options.noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (rule) {\n\t\tresult += rule.selector;\n\t}\n\n\tif (atRule) {\n\t\tresult += `@${atRule.name}${atRule.raws.afterName || ''}${atRule.params}`;\n\t}\n\n\tconst between = statement.raws.between;\n\n\tif (between !== undefined) {\n\t\tresult += between;\n\t}\n\n\treturn result;\n};\n"]},"metadata":{},"sourceType":"script"}