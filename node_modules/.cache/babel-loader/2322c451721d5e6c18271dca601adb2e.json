{"ast":null,"code":"'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\n\nconst get = require('lodash/get');\n\nconst getOsEol = require('./utils/getOsEol');\n\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\n\nconst rulesOrder = require('./rules');\n/** @typedef {import('stylelint').StylelintStandaloneOptions} StylelintStandaloneOptions */\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('stylelint').StylelintConfig} StylelintConfig */\n\n/**\n * @param {StylelintStandaloneOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\n\n\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n  postcssResult.stylelint.ruleSeverities = {};\n  postcssResult.stylelint.customMessages = {};\n  postcssResult.stylelint.stylelintError = false;\n  postcssResult.stylelint.quiet = config.quiet;\n  postcssResult.stylelint.config = config;\n  /** @type {string} */\n\n  let newline;\n  const postcssDoc = postcssResult.root;\n\n  if (postcssDoc) {\n    if (!('type' in postcssDoc)) {\n      throw new Error('Unexpected Postcss root object!');\n    } // @ts-ignore TODO TYPES property css does not exists\n\n\n    const newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n    newline = newlineMatch ? newlineMatch[0] : getOsEol();\n    assignDisabledRanges(postcssDoc, postcssResult);\n  }\n\n  if (stylelintOptions.ignoreDisables) {\n    postcssResult.stylelint.ignoreDisables = true;\n  }\n\n  if (stylelintOptions.reportNeedlessDisables) {\n    postcssResult.stylelint.reportNeedlessDisables = true;\n  }\n\n  const isFileFixCompatible = isFixCompatible(postcssResult);\n\n  if (!isFileFixCompatible) {\n    postcssResult.stylelint.disableWritingFix = true;\n  }\n\n  const postcssRoots =\n  /** @type {import('postcss').Root[]} */\n  postcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]; // Promises for the rules. Although the rule code runs synchronously now,\n  // the use of Promises makes it compatible with the possibility of async\n  // rules down the line.\n\n  /** @type {Array<Promise<any>>} */\n\n  const performRules = [];\n  const rules = config.rules ? Object.keys(config.rules).sort((a, b) => Object.keys(rulesOrder).indexOf(a) - Object.keys(rulesOrder).indexOf(b)) : [];\n  rules.forEach(ruleName => {\n    const ruleFunction = rulesOrder[ruleName] || get(config, ['pluginFunctions', ruleName]);\n\n    if (ruleFunction === undefined) {\n      performRules.push(Promise.all(postcssRoots.map(postcssRoot => reportUnknownRuleNames(ruleName, postcssRoot, postcssResult))));\n      return;\n    }\n\n    const ruleSettings = get(config, ['rules', ruleName]);\n\n    if (ruleSettings === null || ruleSettings[0] === null) {\n      return;\n    }\n\n    const primaryOption = ruleSettings[0];\n    const secondaryOptions = ruleSettings[1]; // Log the rule's severity in the PostCSS result\n\n    const defaultSeverity = config.defaultSeverity || 'error';\n    postcssResult.stylelint.ruleSeverities[ruleName] = get(secondaryOptions, 'severity', defaultSeverity);\n    postcssResult.stylelint.customMessages[ruleName] = get(secondaryOptions, 'message');\n    performRules.push(Promise.all(postcssRoots.map(postcssRoot => ruleFunction(primaryOption, secondaryOptions, {\n      fix: stylelintOptions.fix && // Next two conditionals are temporary measures until #2643 is resolved\n      isFileFixCompatible && !postcssResult.stylelint.disabledRanges[ruleName],\n      newline\n    })(postcssRoot, postcssResult))));\n  });\n  return Promise.all(performRules);\n}\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\n\n\nfunction isFixCompatible({\n  stylelint\n}) {\n  // Check for issue #2643\n  if (stylelint.disabledRanges.all.length) return false;\n  return true;\n}\n\nmodule.exports = lintPostcssResult;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/lintPostcssResult.js"],"names":["assignDisabledRanges","require","get","getOsEol","reportUnknownRuleNames","rulesOrder","lintPostcssResult","stylelintOptions","postcssResult","config","stylelint","ruleSeverities","customMessages","stylelintError","quiet","newline","postcssDoc","root","Error","newlineMatch","source","input","css","match","ignoreDisables","reportNeedlessDisables","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","constructor","name","nodes","performRules","rules","Object","keys","sort","a","b","indexOf","forEach","ruleName","ruleFunction","undefined","push","Promise","all","map","postcssRoot","ruleSettings","primaryOption","secondaryOptions","defaultSeverity","fix","disabledRanges","length","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst get = require('lodash/get');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rulesOrder = require('./rules');\n\n/** @typedef {import('stylelint').StylelintStandaloneOptions} StylelintStandaloneOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintConfig} StylelintConfig */\n\n/**\n * @param {StylelintStandaloneOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\t// @ts-ignore TODO TYPES property css does not exists\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tif (stylelintOptions.ignoreDisables) {\n\t\tpostcssResult.stylelint.ignoreDisables = true;\n\t}\n\n\tif (stylelintOptions.reportNeedlessDisables) {\n\t\tpostcssResult.stylelint.reportNeedlessDisables = true;\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (postcssDoc &&\n\tpostcssDoc.constructor.name === 'Document'\n\t\t? postcssDoc.nodes\n\t\t: [postcssDoc]);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rules = config.rules\n\t\t? Object.keys(config.rules).sort(\n\t\t\t\t(a, b) => Object.keys(rulesOrder).indexOf(a) - Object.keys(rulesOrder).indexOf(b),\n\t\t  )\n\t\t: [];\n\n\trules.forEach((ruleName) => {\n\t\tconst ruleFunction = rulesOrder[ruleName] || get(config, ['pluginFunctions', ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst ruleSettings = get(config, ['rules', ruleName]);\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] = get(\n\t\t\tsecondaryOptions,\n\t\t\t'severity',\n\t\t\tdefaultSeverity,\n\t\t);\n\t\tpostcssResult.stylelint.customMessages[ruleName] = get(secondaryOptions, 'message');\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t});\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n"]},"metadata":{},"sourceType":"script"}