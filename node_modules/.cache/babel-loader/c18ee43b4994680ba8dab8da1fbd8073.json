{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst blockString = require('../../utils/blockString');\n\nconst hasBlock = require('../../utils/hasBlock');\n\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected single space before \"}\"',\n  rejectedBefore: () => 'Unexpected whitespace before \"}\"',\n  expectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n  rejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n  expectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n  rejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never', 'always-single-line', 'never-single-line', 'always-multi-line', 'never-multi-line']\n    });\n\n    if (!validOptions) {\n      return;\n    } // Check both kinds of statement: rules and at-rules\n\n\n    root.walkRules(check);\n    root.walkAtRules(check);\n\n    function check(statement) {\n      // Return early if blockless or has empty block\n      if (!hasBlock(statement) || hasEmptyBlock(statement)) {\n        return;\n      }\n\n      const source = blockString(statement);\n      const statementString = statement.toString();\n      let index = statementString.length - 2;\n\n      if (statementString[index - 1] === '\\r') {\n        index -= 1;\n      }\n\n      checker.before({\n        source,\n        index: source.length - 1,\n        err: msg => {\n          if (context.fix) {\n            if (expectation.startsWith('always')) {\n              statement.raws.after = statement.raws.after.replace(/\\s*$/, ' ');\n              return;\n            }\n\n            if (expectation.startsWith('never')) {\n              statement.raws.after = statement.raws.after.replace(/\\s*$/, '');\n              return;\n            }\n          }\n\n          report({\n            message: msg,\n            node: statement,\n            index,\n            result,\n            ruleName\n          });\n        }\n      });\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/block-closing-brace-space-before/index.js"],"names":["blockString","require","hasBlock","hasEmptyBlock","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","rejectedBefore","expectedBeforeSingleLine","rejectedBeforeSingleLine","expectedBeforeMultiLine","rejectedBeforeMultiLine","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","walkRules","check","walkAtRules","statement","source","statementString","toString","index","length","before","err","msg","fix","startsWith","raws","after","replace","message","node","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMO,QAAQ,GAAG,kCAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,cAAc,EAAE,MAAM,kCADiB;AAEvCC,EAAAA,cAAc,EAAE,MAAM,kCAFiB;AAGvCC,EAAAA,wBAAwB,EAAE,MAAM,yDAHO;AAIvCC,EAAAA,wBAAwB,EAAE,MAAM,yDAJO;AAKvCC,EAAAA,uBAAuB,EAAE,MAAM,wDALQ;AAMvCC,EAAAA,uBAAuB,EAAE,MAAM;AANQ,CAAX,CAA7B;;AASA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC5C,QAAMC,OAAO,GAAGb,iBAAiB,CAAC,OAAD,EAAUU,WAAV,EAAuBR,QAAvB,CAAjC;AAEA,SAAO,CAACY,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGjB,eAAe,CAACgB,MAAD,EAASd,QAAT,EAAmB;AACtDgB,MAAAA,MAAM,EAAEP,WAD8C;AAEtDQ,MAAAA,QAAQ,EAAE,CACT,QADS,EAET,OAFS,EAGT,oBAHS,EAIT,mBAJS,EAKT,mBALS,EAMT,kBANS;AAF4C,KAAnB,CAApC;;AAYA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA,KAfuB,CAiBxB;;;AACAF,IAAAA,IAAI,CAACK,SAAL,CAAeC,KAAf;AACAN,IAAAA,IAAI,CAACO,WAAL,CAAiBD,KAAjB;;AAEA,aAASA,KAAT,CAAeE,SAAf,EAA0B;AACzB;AACA,UAAI,CAAC3B,QAAQ,CAAC2B,SAAD,CAAT,IAAwB1B,aAAa,CAAC0B,SAAD,CAAzC,EAAsD;AACrD;AACA;;AAED,YAAMC,MAAM,GAAG9B,WAAW,CAAC6B,SAAD,CAA1B;AACA,YAAME,eAAe,GAAGF,SAAS,CAACG,QAAV,EAAxB;AAEA,UAAIC,KAAK,GAAGF,eAAe,CAACG,MAAhB,GAAyB,CAArC;;AAEA,UAAIH,eAAe,CAACE,KAAK,GAAG,CAAT,CAAf,KAA+B,IAAnC,EAAyC;AACxCA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEDb,MAAAA,OAAO,CAACe,MAAR,CAAe;AACdL,QAAAA,MADc;AAEdG,QAAAA,KAAK,EAAEH,MAAM,CAACI,MAAP,GAAgB,CAFT;AAGdE,QAAAA,GAAG,EAAGC,GAAD,IAAS;AACb,cAAIlB,OAAO,CAACmB,GAAZ,EAAiB;AAChB,gBAAIrB,WAAW,CAACsB,UAAZ,CAAuB,QAAvB,CAAJ,EAAsC;AACrCV,cAAAA,SAAS,CAACW,IAAV,CAAeC,KAAf,GAAuBZ,SAAS,CAACW,IAAV,CAAeC,KAAf,CAAqBC,OAArB,CAA6B,MAA7B,EAAqC,GAArC,CAAvB;AAEA;AACA;;AAED,gBAAIzB,WAAW,CAACsB,UAAZ,CAAuB,OAAvB,CAAJ,EAAqC;AACpCV,cAAAA,SAAS,CAACW,IAAV,CAAeC,KAAf,GAAuBZ,SAAS,CAACW,IAAV,CAAeC,KAAf,CAAqBC,OAArB,CAA6B,MAA7B,EAAqC,EAArC,CAAvB;AAEA;AACA;AACD;;AAEDtC,UAAAA,MAAM,CAAC;AACNuC,YAAAA,OAAO,EAAEN,GADH;AAENO,YAAAA,IAAI,EAAEf,SAFA;AAGNI,YAAAA,KAHM;AAINX,YAAAA,MAJM;AAKNd,YAAAA;AALM,WAAD,CAAN;AAOA;AAzBa,OAAf;AA2BA;AACD,GAhED;AAiEA;;AAEDQ,IAAI,CAACR,QAAL,GAAgBA,QAAhB;AACAQ,IAAI,CAACP,QAAL,GAAgBA,QAAhB;AACAoC,MAAM,CAACC,OAAP,GAAiB9B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst hasBlock = require('../../utils/hasBlock');\nconst hasEmptyBlock = require('../../utils/hasEmptyBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'block-closing-brace-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \"}\"',\n\trejectedBefore: () => 'Unexpected whitespace before \"}\"',\n\texpectedBeforeSingleLine: () => 'Expected single space before \"}\" of a single-line block',\n\trejectedBeforeSingleLine: () => 'Unexpected whitespace before \"}\" of a single-line block',\n\texpectedBeforeMultiLine: () => 'Expected single space before \"}\" of a multi-line block',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \"}\" of a multi-line block',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: [\n\t\t\t\t'always',\n\t\t\t\t'never',\n\t\t\t\t'always-single-line',\n\t\t\t\t'never-single-line',\n\t\t\t\t'always-multi-line',\n\t\t\t\t'never-multi-line',\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check both kinds of statement: rules and at-rules\n\t\troot.walkRules(check);\n\t\troot.walkAtRules(check);\n\n\t\tfunction check(statement) {\n\t\t\t// Return early if blockless or has empty block\n\t\t\tif (!hasBlock(statement) || hasEmptyBlock(statement)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst source = blockString(statement);\n\t\t\tconst statementString = statement.toString();\n\n\t\t\tlet index = statementString.length - 2;\n\n\t\t\tif (statementString[index - 1] === '\\r') {\n\t\t\t\tindex -= 1;\n\t\t\t}\n\n\t\t\tchecker.before({\n\t\t\t\tsource,\n\t\t\t\tindex: source.length - 1,\n\t\t\t\terr: (msg) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (expectation.startsWith('always')) {\n\t\t\t\t\t\t\tstatement.raws.after = statement.raws.after.replace(/\\s*$/, ' ');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation.startsWith('never')) {\n\t\t\t\t\t\t\tstatement.raws.after = statement.raws.after.replace(/\\s*$/, '');\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tnode: statement,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}