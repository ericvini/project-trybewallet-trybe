{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-max-empty-lines';\nconst messages = ruleMessages(ruleName, {\n  expected: max => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`\n});\n\nfunction placeIndexOnValueStart(decl) {\n  return decl.prop.length + decl.raws.between.length - 1;\n}\n\nfunction rule(max, options, context) {\n  const maxAdjacentNewlines = max + 1;\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: max,\n      possible: _.isNumber\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    const violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n    const violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n    const allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n    const allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n    root.walkDecls(decl => {\n      if (!decl.value.includes('(')) {\n        return;\n      }\n\n      const stringValue = decl.raws.value ? decl.raws.value.raw : decl.value;\n      const splittedValue = [];\n      let sourceIndexStart = 0;\n      valueParser(stringValue).walk(node => {\n        if (node.type !== 'function'\n        /* ignore non functions */\n        || node.value.length === 0\n        /* ignore sass lists */\n        ) {\n            return;\n          }\n\n        const stringifiedNode = valueParser.stringify(node);\n\n        if (!violatedLFNewLinesRegex.test(stringifiedNode) && !violatedCRLFNewLinesRegex.test(stringifiedNode)) {\n          return;\n        }\n\n        if (context.fix) {\n          const newNodeString = stringifiedNode.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString).replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n          splittedValue.push([stringValue.slice(sourceIndexStart, node.sourceIndex), newNodeString]);\n          sourceIndexStart = node.sourceIndex + stringifiedNode.length;\n        } else {\n          report({\n            message: messages.expected(max),\n            node: decl,\n            index: placeIndexOnValueStart(decl) + node.sourceIndex,\n            result,\n            ruleName\n          });\n        }\n      });\n\n      if (context.fix && splittedValue.length > 0) {\n        const updatedValue = splittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') + stringValue.slice(sourceIndexStart);\n\n        if (decl.raws.value) {\n          decl.raws.value.raw = updatedValue;\n        } else {\n          decl.value = updatedValue;\n        }\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/function-max-empty-lines/index.js"],"names":["_","require","report","ruleMessages","validateOptions","valueParser","ruleName","messages","expected","max","placeIndexOnValueStart","decl","prop","length","raws","between","rule","options","context","maxAdjacentNewlines","root","result","validOptions","actual","possible","isNumber","violatedCRLFNewLinesRegex","RegExp","violatedLFNewLinesRegex","allowedLFNewLinesString","fix","repeat","allowedCRLFNewLinesString","walkDecls","value","includes","stringValue","raw","splittedValue","sourceIndexStart","walk","node","type","stringifiedNode","stringify","test","newNodeString","replace","push","slice","sourceIndex","message","index","updatedValue","reduce","acc","curr","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\n\nconst ruleName = 'function-max-empty-lines';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} empty ${max === 1 ? 'line' : 'lines'}`,\n});\n\nfunction placeIndexOnValueStart(decl) {\n\treturn decl.prop.length + decl.raws.between.length - 1;\n}\n\nfunction rule(max, options, context) {\n\tconst maxAdjacentNewlines = max + 1;\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: max,\n\t\t\tpossible: _.isNumber,\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violatedCRLFNewLinesRegex = new RegExp(`(?:\\r\\n){${maxAdjacentNewlines + 1},}`);\n\t\tconst violatedLFNewLinesRegex = new RegExp(`\\n{${maxAdjacentNewlines + 1},}`);\n\t\tconst allowedLFNewLinesString = context.fix ? '\\n'.repeat(maxAdjacentNewlines) : '';\n\t\tconst allowedCRLFNewLinesString = context.fix ? '\\r\\n'.repeat(maxAdjacentNewlines) : '';\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (!decl.value.includes('(')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst stringValue = decl.raws.value ? decl.raws.value.raw : decl.value;\n\t\t\tconst splittedValue = [];\n\t\t\tlet sourceIndexStart = 0;\n\n\t\t\tvalueParser(stringValue).walk((node) => {\n\t\t\t\tif (\n\t\t\t\t\tnode.type !== 'function' /* ignore non functions */ ||\n\t\t\t\t\tnode.value.length === 0 /* ignore sass lists */\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stringifiedNode = valueParser.stringify(node);\n\n\t\t\t\tif (\n\t\t\t\t\t!violatedLFNewLinesRegex.test(stringifiedNode) &&\n\t\t\t\t\t!violatedCRLFNewLinesRegex.test(stringifiedNode)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tconst newNodeString = stringifiedNode\n\t\t\t\t\t\t.replace(new RegExp(violatedLFNewLinesRegex, 'gm'), allowedLFNewLinesString)\n\t\t\t\t\t\t.replace(new RegExp(violatedCRLFNewLinesRegex, 'gm'), allowedCRLFNewLinesString);\n\n\t\t\t\t\tsplittedValue.push([\n\t\t\t\t\t\tstringValue.slice(sourceIndexStart, node.sourceIndex),\n\t\t\t\t\t\tnewNodeString,\n\t\t\t\t\t]);\n\t\t\t\t\tsourceIndexStart = node.sourceIndex + stringifiedNode.length;\n\t\t\t\t} else {\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.expected(max),\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: placeIndexOnValueStart(decl) + node.sourceIndex,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (context.fix && splittedValue.length > 0) {\n\t\t\t\tconst updatedValue =\n\t\t\t\t\tsplittedValue.reduce((acc, curr) => acc + curr[0] + curr[1], '') +\n\t\t\t\t\tstringValue.slice(sourceIndexStart);\n\n\t\t\t\tif (decl.raws.value) {\n\t\t\t\t\tdecl.raws.value.raw = updatedValue;\n\t\t\t\t} else {\n\t\t\t\t\tdecl.value = updatedValue;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}