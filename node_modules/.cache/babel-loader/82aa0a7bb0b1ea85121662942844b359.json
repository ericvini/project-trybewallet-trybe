{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst shorthandData = require('../../reference/shorthandData');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\nconst messages = ruleMessages(ruleName, {\n  expected: props => `Expected shorthand property \"${props}\"`\n});\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignoreShorthands: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    const longhandProperties = _.transform(shorthandData, (result, values, key) => {\n      if (optionsMatches(options, 'ignoreShorthands', key)) {\n        return;\n      }\n\n      values.forEach(value => {\n        (result[value] || (result[value] = [])).push(key);\n      });\n    });\n\n    eachDeclarationBlock(root, eachDecl => {\n      const longhandDeclarations = {};\n      eachDecl(decl => {\n        const prop = decl.prop.toLowerCase();\n        const unprefixedProp = vendor.unprefixed(prop);\n        const prefix = vendor.prefix(prop);\n        const shorthandProperties = longhandProperties[unprefixedProp];\n\n        if (!shorthandProperties) {\n          return;\n        }\n\n        shorthandProperties.forEach(shorthandProperty => {\n          const prefixedShorthandProperty = prefix + shorthandProperty;\n\n          if (!longhandDeclarations[prefixedShorthandProperty]) {\n            longhandDeclarations[prefixedShorthandProperty] = [];\n          }\n\n          longhandDeclarations[prefixedShorthandProperty].push(prop);\n          const prefixedShorthandData = shorthandData[shorthandProperty].map(item => {\n            return prefix + item;\n          });\n\n          if (!_.isEqual(prefixedShorthandData.sort(), longhandDeclarations[prefixedShorthandProperty].sort())) {\n            return;\n          }\n\n          report({\n            ruleName,\n            result,\n            node: decl,\n            message: messages.expected(prefixedShorthandProperty)\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js"],"names":["_","require","eachDeclarationBlock","optionsMatches","report","ruleMessages","shorthandData","validateOptions","vendor","ruleName","messages","expected","props","rule","actual","options","root","result","validOptions","possible","ignoreShorthands","isString","isRegExp","optional","longhandProperties","transform","values","key","forEach","value","push","eachDecl","longhandDeclarations","decl","prop","toLowerCase","unprefixedProp","unprefixed","prefix","shorthandProperties","shorthandProperty","prefixedShorthandProperty","prefixedShorthandData","map","item","isEqual","sort","node","message","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAC,+BAAD,CAA7B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMQ,QAAQ,GAAG,oDAAjB;AAEA,MAAMC,QAAQ,GAAGL,YAAY,CAACI,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,KAAD,IAAY,gCAA+BA,KAAM;AADpB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B;AAC9B,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CACnCU,MADmC,EAEnCR,QAFmC,EAGnC;AAAEK,MAAAA;AAAF,KAHmC,EAInC;AACCA,MAAAA,MAAM,EAAEC,OADT;AAECI,MAAAA,QAAQ,EAAE;AACTC,QAAAA,gBAAgB,EAAE,CAACpB,CAAC,CAACqB,QAAH,EAAarB,CAAC,CAACsB,QAAf;AADT,OAFX;AAKCC,MAAAA,QAAQ,EAAE;AALX,KAJmC,CAApC;;AAaA,QAAI,CAACL,YAAL,EAAmB;AAClB;AACA,KAhBuB,CAkBxB;AACA;;;AACA,UAAMM,kBAAkB,GAAGxB,CAAC,CAACyB,SAAF,CAAYnB,aAAZ,EAA2B,CAACW,MAAD,EAASS,MAAT,EAAiBC,GAAjB,KAAyB;AAC9E,UAAIxB,cAAc,CAACY,OAAD,EAAU,kBAAV,EAA8BY,GAA9B,CAAlB,EAAsD;AACrD;AACA;;AAEDD,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAW;AACzB,SAACZ,MAAM,CAACY,KAAD,CAAN,KAAkBZ,MAAM,CAACY,KAAD,CAAN,GAAgB,EAAlC,CAAD,EAAwCC,IAAxC,CAA6CH,GAA7C;AACA,OAFD;AAGA,KAR0B,CAA3B;;AAUAzB,IAAAA,oBAAoB,CAACc,IAAD,EAAQe,QAAD,IAAc;AACxC,YAAMC,oBAAoB,GAAG,EAA7B;AAEAD,MAAAA,QAAQ,CAAEE,IAAD,IAAU;AAClB,cAAMC,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,WAAV,EAAb;AACA,cAAMC,cAAc,GAAG5B,MAAM,CAAC6B,UAAP,CAAkBH,IAAlB,CAAvB;AACA,cAAMI,MAAM,GAAG9B,MAAM,CAAC8B,MAAP,CAAcJ,IAAd,CAAf;AAEA,cAAMK,mBAAmB,GAAGf,kBAAkB,CAACY,cAAD,CAA9C;;AAEA,YAAI,CAACG,mBAAL,EAA0B;AACzB;AACA;;AAEDA,QAAAA,mBAAmB,CAACX,OAApB,CAA6BY,iBAAD,IAAuB;AAClD,gBAAMC,yBAAyB,GAAGH,MAAM,GAAGE,iBAA3C;;AAEA,cAAI,CAACR,oBAAoB,CAACS,yBAAD,CAAzB,EAAsD;AACrDT,YAAAA,oBAAoB,CAACS,yBAAD,CAApB,GAAkD,EAAlD;AACA;;AAEDT,UAAAA,oBAAoB,CAACS,yBAAD,CAApB,CAAgDX,IAAhD,CAAqDI,IAArD;AAEA,gBAAMQ,qBAAqB,GAAGpC,aAAa,CAACkC,iBAAD,CAAb,CAAiCG,GAAjC,CAAsCC,IAAD,IAAU;AAC5E,mBAAON,MAAM,GAAGM,IAAhB;AACA,WAF6B,CAA9B;;AAIA,cACC,CAAC5C,CAAC,CAAC6C,OAAF,CACAH,qBAAqB,CAACI,IAAtB,EADA,EAEAd,oBAAoB,CAACS,yBAAD,CAApB,CAAgDK,IAAhD,EAFA,CADF,EAKE;AACD;AACA;;AAED1C,UAAAA,MAAM,CAAC;AACNK,YAAAA,QADM;AAENQ,YAAAA,MAFM;AAGN8B,YAAAA,IAAI,EAAEd,IAHA;AAINe,YAAAA,OAAO,EAAEtC,QAAQ,CAACC,QAAT,CAAkB8B,yBAAlB;AAJH,WAAD,CAAN;AAMA,SA5BD;AA6BA,OAxCO,CAAR;AAyCA,KA5CmB,CAApB;AA6CA,GA3ED;AA4EA;;AAED5B,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAuC,MAAM,CAACC,OAAP,GAAiBrC,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-redundant-longhand-properties';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (props) => `Expected shorthand property \"${props}\"`,\n});\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreShorthands: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\tconst longhandProperties = _.transform(shorthandData, (result, values, key) => {\n\t\t\tif (optionsMatches(options, 'ignoreShorthands', key)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalues.forEach((value) => {\n\t\t\t\t(result[value] || (result[value] = [])).push(key);\n\t\t\t});\n\t\t});\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst longhandDeclarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop.toLowerCase();\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop);\n\n\t\t\t\tconst shorthandProperties = longhandProperties[unprefixedProp];\n\n\t\t\t\tif (!shorthandProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tshorthandProperties.forEach((shorthandProperty) => {\n\t\t\t\t\tconst prefixedShorthandProperty = prefix + shorthandProperty;\n\n\t\t\t\t\tif (!longhandDeclarations[prefixedShorthandProperty]) {\n\t\t\t\t\t\tlonghandDeclarations[prefixedShorthandProperty] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tlonghandDeclarations[prefixedShorthandProperty].push(prop);\n\n\t\t\t\t\tconst prefixedShorthandData = shorthandData[shorthandProperty].map((item) => {\n\t\t\t\t\t\treturn prefix + item;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!_.isEqual(\n\t\t\t\t\t\t\tprefixedShorthandData.sort(),\n\t\t\t\t\t\t\tlonghandDeclarations[prefixedShorthandProperty].sort(),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.expected(prefixedShorthandProperty),\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}