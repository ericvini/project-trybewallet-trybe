{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected newline before \",\"',\n  expectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n  rejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list'\n});\n\nfunction rule(expectation) {\n  const checker = whitespaceChecker('newline', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'always-multi-line', 'never-multi-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    mediaQueryListCommaWhitespaceChecker({\n      root,\n      result,\n      locationChecker: checker.beforeAllowingIndentation,\n      checkedRuleName: ruleName\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-query-list-comma-newline-before/index.js"],"names":["mediaQueryListCommaWhitespaceChecker","require","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","expectedBeforeMultiLine","rejectedBeforeMultiLine","rule","expectation","checker","root","result","validOptions","actual","possible","locationChecker","beforeAllowingIndentation","checkedRuleName","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,oCAAoC,GAAGC,OAAO,CAAC,yCAAD,CAApD;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMI,QAAQ,GAAG,uCAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,cAAc,EAAE,MAAM,6BADiB;AAEvCC,EAAAA,uBAAuB,EAAE,MAAM,kDAFQ;AAGvCC,EAAAA,uBAAuB,EAAE,MAAM;AAHQ,CAAX,CAA7B;;AAMA,SAASC,IAAT,CAAcC,WAAd,EAA2B;AAC1B,QAAMC,OAAO,GAAGR,iBAAiB,CAAC,SAAD,EAAYO,WAAZ,EAAyBL,QAAzB,CAAjC;AAEA,SAAO,CAACO,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGZ,eAAe,CAACW,MAAD,EAAST,QAAT,EAAmB;AACtDW,MAAAA,MAAM,EAAEL,WAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,mBAAX,EAAgC,kBAAhC;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDf,IAAAA,oCAAoC,CAAC;AACpCa,MAAAA,IADoC;AAEpCC,MAAAA,MAFoC;AAGpCI,MAAAA,eAAe,EAAEN,OAAO,CAACO,yBAHW;AAIpCC,MAAAA,eAAe,EAAEf;AAJmB,KAAD,CAApC;AAMA,GAhBD;AAiBA;;AAEDK,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAe,MAAM,CAACC,OAAP,GAAiBZ,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst mediaQueryListCommaWhitespaceChecker = require('../mediaQueryListCommaWhitespaceChecker');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'media-query-list-comma-newline-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected newline before \",\"',\n\texpectedBeforeMultiLine: () => 'Expected newline before \",\" in a multi-line list',\n\trejectedBeforeMultiLine: () => 'Unexpected whitespace before \",\" in a multi-line list',\n});\n\nfunction rule(expectation) {\n\tconst checker = whitespaceChecker('newline', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'always-multi-line', 'never-multi-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tmediaQueryListCommaWhitespaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.beforeAllowingIndentation,\n\t\t\tcheckedRuleName: ruleName,\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}