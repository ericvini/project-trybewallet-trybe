{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\nconst messages = ruleMessages(ruleName, {\n  expected: (selector, max) => `Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`\n});\n\nfunction rule(max) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: max,\n      possible: [// TODO: Issue #4985\n      // eslint-disable-next-line no-shadow\n      function (max) {\n        return typeof max === 'number' && max >= 0;\n      }]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    function checkSelector(selectorNode, ruleNode) {\n      const count = selectorNode.reduce((total, childNode) => {\n        // Only traverse inside actual selectors and context functional pseudo-classes\n        if (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n          checkSelector(childNode, ruleNode);\n        }\n\n        return total += childNode.type === 'class' ? 1 : 0;\n      }, 0);\n\n      if (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > max) {\n        report({\n          ruleName,\n          result,\n          node: ruleNode,\n          message: messages.expected(selectorNode, max),\n          word: selectorNode\n        });\n      }\n    }\n\n    root.walkRules(ruleNode => {\n      if (!isStandardSyntaxRule(ruleNode)) {\n        return;\n      }\n\n      ruleNode.selectors.forEach(selector => {\n        resolvedNestedSelector(selector, ruleNode).forEach(resolvedSelector => {\n          parseSelector(resolvedSelector, result, ruleNode, container => checkSelector(container, ruleNode));\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-max-class/index.js"],"names":["isContextFunctionalPseudoClass","require","isStandardSyntaxRule","parseSelector","report","resolvedNestedSelector","ruleMessages","validateOptions","ruleName","messages","expected","selector","max","rule","root","result","validOptions","actual","possible","checkSelector","selectorNode","ruleNode","count","reduce","total","childNode","type","node","message","word","walkRules","selectors","forEach","resolvedSelector","container","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst isContextFunctionalPseudoClass = require('../../utils/isContextFunctionalPseudoClass');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst resolvedNestedSelector = require('postcss-resolve-nested-selector');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-max-class';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (selector, max) =>\n\t\t`Expected \"${selector}\" to have no more than ${max} ${max === 1 ? 'class' : 'classes'}`,\n});\n\nfunction rule(max) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: max,\n\t\t\tpossible: [\n\t\t\t\t// TODO: Issue #4985\n\t\t\t\t// eslint-disable-next-line no-shadow\n\t\t\t\tfunction (max) {\n\t\t\t\t\treturn typeof max === 'number' && max >= 0;\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction checkSelector(selectorNode, ruleNode) {\n\t\t\tconst count = selectorNode.reduce((total, childNode) => {\n\t\t\t\t// Only traverse inside actual selectors and context functional pseudo-classes\n\t\t\t\tif (childNode.type === 'selector' || isContextFunctionalPseudoClass(childNode)) {\n\t\t\t\t\tcheckSelector(childNode, ruleNode);\n\t\t\t\t}\n\n\t\t\t\treturn (total += childNode.type === 'class' ? 1 : 0);\n\t\t\t}, 0);\n\n\t\t\tif (selectorNode.type !== 'root' && selectorNode.type !== 'pseudo' && count > max) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tnode: ruleNode,\n\t\t\t\t\tmessage: messages.expected(selectorNode, max),\n\t\t\t\t\tword: selectorNode,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tif (!isStandardSyntaxRule(ruleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\truleNode.selectors.forEach((selector) => {\n\t\t\t\tresolvedNestedSelector(selector, ruleNode).forEach((resolvedSelector) => {\n\t\t\t\t\tparseSelector(resolvedSelector, result, ruleNode, (container) =>\n\t\t\t\t\t\tcheckSelector(container, ruleNode),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}