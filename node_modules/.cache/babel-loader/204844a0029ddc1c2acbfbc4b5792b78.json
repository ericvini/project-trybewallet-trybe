{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst rpl = require(\"run-parallel\");\n\nconst constants_1 = require(\"../constants\");\n\nconst utils = require(\"../utils\");\n\nfunction read(directory, settings, callback) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    return readdirWithFileTypes(directory, settings, callback);\n  }\n\n  return readdir(directory, settings, callback);\n}\n\nexports.read = read;\n\nfunction readdirWithFileTypes(directory, settings, callback) {\n  settings.fs.readdir(directory, {\n    withFileTypes: true\n  }, (readdirError, dirents) => {\n    if (readdirError !== null) {\n      return callFailureCallback(callback, readdirError);\n    }\n\n    const entries = dirents.map(dirent => ({\n      dirent,\n      name: dirent.name,\n      path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`\n    }));\n\n    if (!settings.followSymbolicLinks) {\n      return callSuccessCallback(callback, entries);\n    }\n\n    const tasks = entries.map(entry => makeRplTaskEntry(entry, settings));\n    rpl(tasks, (rplError, rplEntries) => {\n      if (rplError !== null) {\n        return callFailureCallback(callback, rplError);\n      }\n\n      callSuccessCallback(callback, rplEntries);\n    });\n  });\n}\n\nexports.readdirWithFileTypes = readdirWithFileTypes;\n\nfunction makeRplTaskEntry(entry, settings) {\n  return done => {\n    if (!entry.dirent.isSymbolicLink()) {\n      return done(null, entry);\n    }\n\n    settings.fs.stat(entry.path, (statError, stats) => {\n      if (statError !== null) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          return done(statError);\n        }\n\n        return done(null, entry);\n      }\n\n      entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      return done(null, entry);\n    });\n  };\n}\n\nfunction readdir(directory, settings, callback) {\n  settings.fs.readdir(directory, (readdirError, names) => {\n    if (readdirError !== null) {\n      return callFailureCallback(callback, readdirError);\n    }\n\n    const filepaths = names.map(name => `${directory}${settings.pathSegmentSeparator}${name}`);\n    const tasks = filepaths.map(filepath => {\n      return done => fsStat.stat(filepath, settings.fsStatSettings, done);\n    });\n    rpl(tasks, (rplError, results) => {\n      if (rplError !== null) {\n        return callFailureCallback(callback, rplError);\n      }\n\n      const entries = [];\n      names.forEach((name, index) => {\n        const stats = results[index];\n        const entry = {\n          name,\n          path: filepaths[index],\n          dirent: utils.fs.createDirentFromStats(name, stats)\n        };\n\n        if (settings.stats) {\n          entry.stats = stats;\n        }\n\n        entries.push(entry);\n      });\n      callSuccessCallback(callback, entries);\n    });\n  });\n}\n\nexports.readdir = readdir;\n\nfunction callFailureCallback(callback, error) {\n  callback(error);\n}\n\nfunction callSuccessCallback(callback, result) {\n  callback(null, result);\n}","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/@nodelib/fs.scandir/out/providers/async.js"],"names":["Object","defineProperty","exports","value","fsStat","require","rpl","constants_1","utils","read","directory","settings","callback","stats","IS_SUPPORT_READDIR_WITH_FILE_TYPES","readdirWithFileTypes","readdir","fs","withFileTypes","readdirError","dirents","callFailureCallback","entries","map","dirent","name","path","pathSegmentSeparator","followSymbolicLinks","callSuccessCallback","tasks","entry","makeRplTaskEntry","rplError","rplEntries","done","isSymbolicLink","stat","statError","throwErrorOnBrokenSymbolicLink","createDirentFromStats","names","filepaths","filepath","fsStatSettings","results","forEach","index","push","error","result"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fsStat = require(\"@nodelib/fs.stat\");\r\nconst rpl = require(\"run-parallel\");\r\nconst constants_1 = require(\"../constants\");\r\nconst utils = require(\"../utils\");\r\nfunction read(directory, settings, callback) {\r\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\r\n        return readdirWithFileTypes(directory, settings, callback);\r\n    }\r\n    return readdir(directory, settings, callback);\r\n}\r\nexports.read = read;\r\nfunction readdirWithFileTypes(directory, settings, callback) {\r\n    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {\r\n        if (readdirError !== null) {\r\n            return callFailureCallback(callback, readdirError);\r\n        }\r\n        const entries = dirents.map((dirent) => ({\r\n            dirent,\r\n            name: dirent.name,\r\n            path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`\r\n        }));\r\n        if (!settings.followSymbolicLinks) {\r\n            return callSuccessCallback(callback, entries);\r\n        }\r\n        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));\r\n        rpl(tasks, (rplError, rplEntries) => {\r\n            if (rplError !== null) {\r\n                return callFailureCallback(callback, rplError);\r\n            }\r\n            callSuccessCallback(callback, rplEntries);\r\n        });\r\n    });\r\n}\r\nexports.readdirWithFileTypes = readdirWithFileTypes;\r\nfunction makeRplTaskEntry(entry, settings) {\r\n    return (done) => {\r\n        if (!entry.dirent.isSymbolicLink()) {\r\n            return done(null, entry);\r\n        }\r\n        settings.fs.stat(entry.path, (statError, stats) => {\r\n            if (statError !== null) {\r\n                if (settings.throwErrorOnBrokenSymbolicLink) {\r\n                    return done(statError);\r\n                }\r\n                return done(null, entry);\r\n            }\r\n            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\r\n            return done(null, entry);\r\n        });\r\n    };\r\n}\r\nfunction readdir(directory, settings, callback) {\r\n    settings.fs.readdir(directory, (readdirError, names) => {\r\n        if (readdirError !== null) {\r\n            return callFailureCallback(callback, readdirError);\r\n        }\r\n        const filepaths = names.map((name) => `${directory}${settings.pathSegmentSeparator}${name}`);\r\n        const tasks = filepaths.map((filepath) => {\r\n            return (done) => fsStat.stat(filepath, settings.fsStatSettings, done);\r\n        });\r\n        rpl(tasks, (rplError, results) => {\r\n            if (rplError !== null) {\r\n                return callFailureCallback(callback, rplError);\r\n            }\r\n            const entries = [];\r\n            names.forEach((name, index) => {\r\n                const stats = results[index];\r\n                const entry = {\r\n                    name,\r\n                    path: filepaths[index],\r\n                    dirent: utils.fs.createDirentFromStats(name, stats)\r\n                };\r\n                if (settings.stats) {\r\n                    entry.stats = stats;\r\n                }\r\n                entries.push(entry);\r\n            });\r\n            callSuccessCallback(callback, entries);\r\n        });\r\n    });\r\n}\r\nexports.readdir = readdir;\r\nfunction callFailureCallback(callback, error) {\r\n    callback(error);\r\n}\r\nfunction callSuccessCallback(callback, result) {\r\n    callback(null, result);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}