{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isWhitespace = require('../../utils/isWhitespace');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\nconst messages = ruleMessages(ruleName, {\n  expectedOpening: 'Expected whitespace after \"/*\"',\n  rejectedOpening: 'Unexpected whitespace after \"/*\"',\n  expectedClosing: 'Expected whitespace before \"*/\"',\n  rejectedClosing: 'Unexpected whitespace before \"*/\"'\n});\n\nfunction rule(expectation, options, context) {\n  return function (root, result) {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkComments(comment => {\n      if (comment.raws.inline || comment.inline) {\n        return;\n      }\n\n      const rawComment = comment.toString();\n      const firstFourChars = rawComment.substr(0, 4); // Return early if sourcemap or copyright comment\n\n      if (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n        return;\n      }\n\n      const leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n      const rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n      const opener = leftMatches[1];\n      const leftSpace = leftMatches[2] || '';\n      const rightSpace = rightMatches[1] || '';\n      const closer = rightMatches[2];\n\n      if (expectation === 'never' && leftSpace !== '') {\n        complain(messages.rejectedOpening, opener.length);\n      }\n\n      if (expectation === 'always' && !isWhitespace(leftSpace)) {\n        complain(messages.expectedOpening, opener.length);\n      }\n\n      if (expectation === 'never' && rightSpace !== '') {\n        complain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n      }\n\n      if (expectation === 'always' && !isWhitespace(rightSpace)) {\n        complain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n      } // TODO: Issue #4985\n      // eslint-disable-next-line no-shadow\n\n\n      function addWhitespaceBefore(comment) {\n        if (comment.text.startsWith('*')) {\n          comment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n        } else {\n          comment.raws.left = ' ';\n        }\n      } // TODO: Issue #4985\n      // eslint-disable-next-line no-shadow\n\n\n      function addWhitespaceAfter(comment) {\n        if (_.last(comment.text) === '*') {\n          comment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n        } else {\n          comment.raws.right = ' ';\n        }\n      }\n\n      function complain(message, index) {\n        if (context.fix) {\n          if (expectation === 'never') {\n            comment.raws.left = '';\n            comment.raws.right = '';\n            comment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n          } else {\n            if (!leftSpace) {\n              addWhitespaceBefore(comment);\n            }\n\n            if (!rightSpace) {\n              addWhitespaceAfter(comment);\n            }\n          }\n\n          return;\n        }\n\n        report({\n          message,\n          index,\n          result,\n          ruleName,\n          node: comment\n        });\n      }\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/comment-whitespace-inside/index.js"],"names":["_","require","isWhitespace","report","ruleMessages","validateOptions","ruleName","messages","expectedOpening","rejectedOpening","expectedClosing","rejectedClosing","rule","expectation","options","context","root","result","validOptions","actual","possible","walkComments","comment","raws","inline","rawComment","toString","firstFourChars","substr","test","leftMatches","match","rightMatches","opener","leftSpace","rightSpace","closer","complain","length","addWhitespaceBefore","text","startsWith","replace","left","addWhitespaceAfter","last","right","message","index","fix","node","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\n\nconst isWhitespace = require('../../utils/isWhitespace');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nfunction rule(expectation, options, context) {\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (comment.raws.inline || comment.inline) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.substr(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/);\n\t\t\tconst rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/);\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftSpace = leftMatches[2] || '';\n\t\t\tconst rightSpace = rightMatches[1] || '';\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (expectation === 'never' && leftSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (expectation === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (expectation === 'never' && rightSpace !== '') {\n\t\t\t\tcomplain(messages.rejectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\tif (expectation === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, comment.toString().length - closer.length - 1);\n\t\t\t}\n\n\t\t\t// TODO: Issue #4985\n\t\t\t// eslint-disable-next-line no-shadow\n\t\t\tfunction addWhitespaceBefore(comment) {\n\t\t\t\tif (comment.text.startsWith('*')) {\n\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t\t\t\t} else {\n\t\t\t\t\tcomment.raws.left = ' ';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO: Issue #4985\n\t\t\t// eslint-disable-next-line no-shadow\n\t\t\tfunction addWhitespaceAfter(comment) {\n\t\t\t\tif (_.last(comment.text) === '*') {\n\t\t\t\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t\t\t\t} else {\n\t\t\t\t\tcomment.raws.right = ' ';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction complain(message, index) {\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tif (expectation === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!leftSpace) {\n\t\t\t\t\t\t\taddWhitespaceBefore(comment);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rightSpace) {\n\t\t\t\t\t\t\taddWhitespaceAfter(comment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}