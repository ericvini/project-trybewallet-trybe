{"ast":null,"code":"'use strict';\n\nconst isNumbery = require('./isNumbery');\n\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\n\nconst isValidFontSize = require('./isValidFontSize');\n\nconst isVariable = require('./isVariable');\n\nconst keywordSets = require('../reference/keywordSets');\n\nconst postcssValueParser = require('postcss-value-parser');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\n\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n  firstNode.value = firstNode.value + charactersBetween + secondNode.value;\n  return firstNode;\n}\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @return {object} Collection font-family nodes\n */\n\n\nmodule.exports = function findFontFamily(value) {\n  /** @type {Node[]} */\n  const fontFamilies = [];\n  const valueNodes = postcssValueParser(value); // Handle `inherit`, `initial` and etc\n\n  if (valueNodes.nodes.length === 1 && keywordSets.basicKeywords.has(valueNodes.nodes[0].value.toLowerCase())) {\n    return [valueNodes.nodes[0]];\n  }\n\n  let needMergeNodesByValue = false;\n  /** @type {string | null} */\n\n  let mergeCharacters = null;\n  valueNodes.walk((valueNode, index, nodes) => {\n    if (valueNode.type === 'function') {\n      return false;\n    }\n\n    if (!nodeTypesToCheck.has(valueNode.type)) {\n      return;\n    }\n\n    const valueLowerCase = valueNode.value.toLowerCase(); // Ignore non standard syntax\n\n    if (!isStandardSyntaxValue(valueLowerCase)) {\n      return;\n    } // Ignore variables\n\n\n    if (isVariable(valueLowerCase)) {\n      return;\n    } // Ignore keywords for other font parts\n\n\n    if (keywordSets.fontShorthandKeywords.has(valueLowerCase) && !keywordSets.fontFamilyKeywords.has(valueLowerCase)) {\n      return;\n    } // Ignore font-sizes\n\n\n    if (isValidFontSize(valueNode.value)) {\n      return;\n    } // Ignore anything come after a <font-size>/, because it's a line-height\n\n\n    if (nodes[index - 1] && nodes[index - 1].value === '/' && nodes[index - 2] && isValidFontSize(nodes[index - 2].value)) {\n      return;\n    } // Ignore number values\n\n\n    if (isNumbery(valueLowerCase)) {\n      return;\n    } // Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\n\n    if ((valueNode.type === 'space' || valueNode.type === 'div' && valueNode.value !== ',') && fontFamilies.length !== 0) {\n      needMergeNodesByValue = true;\n      mergeCharacters = valueNode.value;\n      return;\n    }\n\n    if (valueNode.type === 'space' || valueNode.type === 'div') {\n      return;\n    }\n\n    const fontFamily = valueNode;\n\n    if (needMergeNodesByValue) {\n      joinValueNodes(fontFamilies[fontFamilies.length - 1], valueNode, mergeCharacters);\n      needMergeNodesByValue = false;\n      mergeCharacters = null;\n    } else {\n      fontFamilies.push(fontFamily);\n    }\n  });\n  return fontFamilies;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/findFontFamily.js"],"names":["isNumbery","require","isStandardSyntaxValue","isValidFontSize","isVariable","keywordSets","postcssValueParser","nodeTypesToCheck","Set","joinValueNodes","firstNode","secondNode","charactersBetween","value","module","exports","findFontFamily","fontFamilies","valueNodes","nodes","length","basicKeywords","has","toLowerCase","needMergeNodesByValue","mergeCharacters","walk","valueNode","index","type","valueLowerCase","fontShorthandKeywords","fontFamilyKeywords","fontFamily","push"],"mappings":"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","sourcesContent":["'use strict';\n\nconst isNumbery = require('./isNumbery');\nconst isStandardSyntaxValue = require('./isStandardSyntaxValue');\nconst isValidFontSize = require('./isValidFontSize');\nconst isVariable = require('./isVariable');\nconst keywordSets = require('../reference/keywordSets');\nconst postcssValueParser = require('postcss-value-parser');\n\nconst nodeTypesToCheck = new Set(['word', 'string', 'space', 'div']);\n\n/** @typedef {import('postcss-value-parser').Node} Node */\n\n/**\n *\n * @param {Node} firstNode\n * @param {Node} secondNode\n * @param {string | null} charactersBetween\n *\n * @returns {Node}\n */\nfunction joinValueNodes(firstNode, secondNode, charactersBetween) {\n\tfirstNode.value = firstNode.value + charactersBetween + secondNode.value;\n\n\treturn firstNode;\n}\n\n/**\n * Get the font-families within a `font` shorthand property value.\n *\n * @param {string} value\n * @return {object} Collection font-family nodes\n */\nmodule.exports = function findFontFamily(value) {\n\t/** @type {Node[]} */\n\tconst fontFamilies = [];\n\n\tconst valueNodes = postcssValueParser(value);\n\n\t// Handle `inherit`, `initial` and etc\n\tif (\n\t\tvalueNodes.nodes.length === 1 &&\n\t\tkeywordSets.basicKeywords.has(valueNodes.nodes[0].value.toLowerCase())\n\t) {\n\t\treturn [valueNodes.nodes[0]];\n\t}\n\n\tlet needMergeNodesByValue = false;\n\t/** @type {string | null} */\n\tlet mergeCharacters = null;\n\n\tvalueNodes.walk((valueNode, index, nodes) => {\n\t\tif (valueNode.type === 'function') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!nodeTypesToCheck.has(valueNode.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueLowerCase = valueNode.value.toLowerCase();\n\n\t\t// Ignore non standard syntax\n\t\tif (!isStandardSyntaxValue(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore variables\n\t\tif (isVariable(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore keywords for other font parts\n\t\tif (\n\t\t\tkeywordSets.fontShorthandKeywords.has(valueLowerCase) &&\n\t\t\t!keywordSets.fontFamilyKeywords.has(valueLowerCase)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore font-sizes\n\t\tif (isValidFontSize(valueNode.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore anything come after a <font-size>/, because it's a line-height\n\t\tif (\n\t\t\tnodes[index - 1] &&\n\t\t\tnodes[index - 1].value === '/' &&\n\t\t\tnodes[index - 2] &&\n\t\t\tisValidFontSize(nodes[index - 2].value)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore number values\n\t\tif (isNumbery(valueLowerCase)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detect when a space or comma is dividing a list of font-families, and save the joining character.\n\t\tif (\n\t\t\t(valueNode.type === 'space' || (valueNode.type === 'div' && valueNode.value !== ',')) &&\n\t\t\tfontFamilies.length !== 0\n\t\t) {\n\t\t\tneedMergeNodesByValue = true;\n\t\t\tmergeCharacters = valueNode.value;\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (valueNode.type === 'space' || valueNode.type === 'div') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontFamily = valueNode;\n\n\t\tif (needMergeNodesByValue) {\n\t\t\tjoinValueNodes(fontFamilies[fontFamilies.length - 1], valueNode, mergeCharacters);\n\t\t\tneedMergeNodesByValue = false;\n\t\t\tmergeCharacters = null;\n\t\t} else {\n\t\t\tfontFamilies.push(fontFamily);\n\t\t}\n\t});\n\n\treturn fontFamilies;\n};\n"]},"metadata":{},"sourceType":"script"}