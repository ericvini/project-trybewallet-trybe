{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\n\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\n\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\n\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst mediaParser = require('postcss-media-query-parser').default;\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-no-unknown';\nconst messages = ruleMessages(ruleName, {\n  rejected: mediaFeatureName => `Unexpected unknown media feature name \"${mediaFeatureName}\"`\n});\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignoreMediaFeatureNames: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkAtRules(/^media$/i, atRule => {\n      mediaParser(atRule.params).walk(/^media-feature$/i, mediaFeatureNode => {\n        const parent = mediaFeatureNode.parent;\n        const mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n        let value;\n        let sourceIndex;\n\n        if (mediaFeatureRangeContext) {\n          const parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n          value = parsedRangeContext.name.value;\n          sourceIndex = parsedRangeContext.name.sourceIndex;\n        } else {\n          value = mediaFeatureNode.value;\n          sourceIndex = mediaFeatureNode.sourceIndex;\n        }\n\n        if (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n          return;\n        }\n\n        if (optionsMatches(options, 'ignoreMediaFeatureNames', value)) {\n          return;\n        }\n\n        if (vendor.prefix(value) || keywordSets.mediaFeatureNames.has(value.toLowerCase())) {\n          return;\n        }\n\n        report({\n          index: atRuleParamIndex(atRule) + sourceIndex,\n          message: messages.rejected(value),\n          node: atRule,\n          ruleName,\n          result\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.js"],"names":["_","require","atRuleParamIndex","isCustomMediaQuery","isRangeContextMediaFeature","isStandardSyntaxMediaFeatureName","keywordSets","mediaParser","default","optionsMatches","rangeContextNodeParser","report","ruleMessages","validateOptions","vendor","ruleName","messages","rejected","mediaFeatureName","rule","actual","options","root","result","validOptions","possible","ignoreMediaFeatureNames","isString","isRegExp","optional","walkAtRules","atRule","params","walk","mediaFeatureNode","parent","mediaFeatureRangeContext","value","sourceIndex","parsedRangeContext","name","prefix","mediaFeatureNames","has","toLowerCase","index","message","node","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst atRuleParamIndex = require('../../utils/atRuleParamIndex');\nconst isCustomMediaQuery = require('../../utils/isCustomMediaQuery');\nconst isRangeContextMediaFeature = require('../../utils/isRangeContextMediaFeature');\nconst isStandardSyntaxMediaFeatureName = require('../../utils/isStandardSyntaxMediaFeatureName');\nconst keywordSets = require('../../reference/keywordSets');\nconst mediaParser = require('postcss-media-query-parser').default;\nconst optionsMatches = require('../../utils/optionsMatches');\nconst rangeContextNodeParser = require('../rangeContextNodeParser');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'media-feature-name-no-unknown';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (mediaFeatureName) => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,\n});\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreMediaFeatureNames: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkAtRules(/^media$/i, (atRule) => {\n\t\t\tmediaParser(atRule.params).walk(/^media-feature$/i, (mediaFeatureNode) => {\n\t\t\t\tconst parent = mediaFeatureNode.parent;\n\t\t\t\tconst mediaFeatureRangeContext = isRangeContextMediaFeature(parent.value);\n\n\t\t\t\tlet value;\n\t\t\t\tlet sourceIndex;\n\n\t\t\t\tif (mediaFeatureRangeContext) {\n\t\t\t\t\tconst parsedRangeContext = rangeContextNodeParser(mediaFeatureNode);\n\n\t\t\t\t\tvalue = parsedRangeContext.name.value;\n\t\t\t\t\tsourceIndex = parsedRangeContext.name.sourceIndex;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = mediaFeatureNode.value;\n\t\t\t\t\tsourceIndex = mediaFeatureNode.sourceIndex;\n\t\t\t\t}\n\n\t\t\t\tif (!isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (optionsMatches(options, 'ignoreMediaFeatureNames', value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (vendor.prefix(value) || keywordSets.mediaFeatureNames.has(value.toLowerCase())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tindex: atRuleParamIndex(atRule) + sourceIndex,\n\t\t\t\t\tmessage: messages.rejected(value),\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}