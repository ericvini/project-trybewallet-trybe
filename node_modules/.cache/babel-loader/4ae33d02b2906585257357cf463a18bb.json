{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = (filepath, cwd) => {\n  const pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n  return path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nconst addExtensions = (file, extensions) => {\n  if (path.extname(file)) {\n    return `**/${file}`;\n  }\n\n  return `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (directory, options) => {\n  if (options.files && !Array.isArray(options.files)) {\n    throw new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n  }\n\n  if (options.extensions && !Array.isArray(options.extensions)) {\n    throw new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n  }\n\n  if (options.files && options.extensions) {\n    return options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n  }\n\n  if (options.files) {\n    return options.files.map(x => path.posix.join(directory, `**/${x}`));\n  }\n\n  if (options.extensions) {\n    return [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n  }\n\n  return [path.posix.join(directory, '**')];\n};\n\nmodule.exports = async (input, options) => {\n  options = {\n    cwd: process.cwd(),\n    ...options\n  };\n\n  if (typeof options.cwd !== 'string') {\n    throw new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n  }\n\n  const globs = await Promise.all([].concat(input).map(async x => {\n    const isDirectory = await pathType.isDirectory(getPath(x, options.cwd));\n    return isDirectory ? getGlob(x, options) : x;\n  }));\n  return [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n\nmodule.exports.sync = (input, options) => {\n  options = {\n    cwd: process.cwd(),\n    ...options\n  };\n\n  if (typeof options.cwd !== 'string') {\n    throw new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n  }\n\n  const globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n  return [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/node_modules/dir-glob/index.js"],"names":["path","require","pathType","getExtensions","extensions","length","join","getPath","filepath","cwd","pth","slice","isAbsolute","addExtensions","file","extname","getGlob","directory","options","files","Array","isArray","TypeError","map","x","posix","module","exports","input","process","globs","Promise","all","concat","isDirectory","apply","sync","isDirectorySync"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = (filepath, cwd) => {\n\tconst pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n\treturn path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nconst addExtensions = (file, extensions) => {\n\tif (path.extname(file)) {\n\t\treturn `**/${file}`;\n\t}\n\n\treturn `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (directory, options) => {\n\tif (options.files && !Array.isArray(options.files)) {\n\t\tthrow new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n\t}\n\n\tif (options.extensions && !Array.isArray(options.extensions)) {\n\t\tthrow new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n\t}\n\n\tif (options.files && options.extensions) {\n\t\treturn options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n\t}\n\n\tif (options.files) {\n\t\treturn options.files.map(x => path.posix.join(directory, `**/${x}`));\n\t}\n\n\tif (options.extensions) {\n\t\treturn [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n\t}\n\n\treturn [path.posix.join(directory, '**')];\n};\n\nmodule.exports = async (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = await Promise.all([].concat(input).map(async x => {\n\t\tconst isDirectory = await pathType.isDirectory(getPath(x, options.cwd));\n\t\treturn isDirectory ? getGlob(x, options) : x;\n\t}));\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n\nmodule.exports.sync = (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n"]},"metadata":{},"sourceType":"script"}