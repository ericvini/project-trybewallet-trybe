{"ast":null,"code":"'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\n\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\n\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\n\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\n\n\nmodule.exports = function (url) {\n  if (url.length === 0) {\n    return true;\n  } // Sass interpolation works anywhere\n\n\n  if (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n    return false;\n  } // Inside `'` and `\"` work only LESS interpolation\n\n\n  if (url.startsWith(`'`) && url.endsWith(`'`) || url.startsWith(`\"`) && url.endsWith(`\"`)) {\n    if (hasLessInterpolation(url)) {\n      return false;\n    }\n\n    return true;\n  } // Less variable works only at the beginning\n  // Check is less variable, allow use '@url/some/path'\n  // https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\n\n  if (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n    return false;\n  } // In url without quotes scss variable can be everywhere\n  // But in this case it is allowed to use only specific characters\n  // Also forbidden \"/\" at the end of url\n\n\n  if (url.includes('$') && /^[$\\s\\w+-/*'\"/]+$/.test(url) && !url.endsWith('/')) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/isStandardSyntaxUrl.js"],"names":["hasLessInterpolation","require","hasPsvInterpolation","hasScssInterpolation","hasTplInterpolation","module","exports","url","length","startsWith","endsWith","test","includes"],"mappings":"AAAA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,+BAAD,CAApC;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,8BAAD,CAAnC;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,+BAAD,CAApC;;AACA,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,8BAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC/B,MAAIA,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;AACrB,WAAO,IAAP;AACA,GAH8B,CAK/B;;;AACA,MAAIL,oBAAoB,CAACI,GAAD,CAApB,IAA6BH,mBAAmB,CAACG,GAAD,CAAhD,IAAyDL,mBAAmB,CAACK,GAAD,CAAhF,EAAuF;AACtF,WAAO,KAAP;AACA,GAR8B,CAU/B;;;AACA,MAAKA,GAAG,CAACE,UAAJ,CAAgB,GAAhB,KAAuBF,GAAG,CAACG,QAAJ,CAAc,GAAd,CAAxB,IAA+CH,GAAG,CAACE,UAAJ,CAAgB,GAAhB,KAAuBF,GAAG,CAACG,QAAJ,CAAc,GAAd,CAA1E,EAA8F;AAC7F,QAAIV,oBAAoB,CAACO,GAAD,CAAxB,EAA+B;AAC9B,aAAO,KAAP;AACA;;AAED,WAAO,IAAP;AACA,GAjB8B,CAmB/B;AACA;AACA;;;AACA,MAAIA,GAAG,CAACE,UAAJ,CAAe,GAAf,KAAuB,cAAcE,IAAd,CAAmBJ,GAAnB,CAA3B,EAAoD;AACnD,WAAO,KAAP;AACA,GAxB8B,CA0B/B;AACA;AACA;;;AACA,MAAIA,GAAG,CAACK,QAAJ,CAAa,GAAb,KAAqB,oBAAoBD,IAApB,CAAyBJ,GAAzB,CAArB,IAAsD,CAACA,GAAG,CAACG,QAAJ,CAAa,GAAb,CAA3D,EAA8E;AAC7E,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA,CAlCD","sourcesContent":["'use strict';\n\nconst hasLessInterpolation = require('../utils/hasLessInterpolation');\nconst hasPsvInterpolation = require('../utils/hasPsvInterpolation');\nconst hasScssInterpolation = require('../utils/hasScssInterpolation');\nconst hasTplInterpolation = require('../utils/hasTplInterpolation');\n\n/**\n * Check whether a URL is standard\n *\n * @param {string} url\n * @returns {boolean}\n */\nmodule.exports = function (url) {\n\tif (url.length === 0) {\n\t\treturn true;\n\t}\n\n\t// Sass interpolation works anywhere\n\tif (hasScssInterpolation(url) || hasTplInterpolation(url) || hasPsvInterpolation(url)) {\n\t\treturn false;\n\t}\n\n\t// Inside `'` and `\"` work only LESS interpolation\n\tif ((url.startsWith(`'`) && url.endsWith(`'`)) || (url.startsWith(`\"`) && url.endsWith(`\"`))) {\n\t\tif (hasLessInterpolation(url)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Less variable works only at the beginning\n\t// Check is less variable, allow use '@url/some/path'\n\t// https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547\n\tif (url.startsWith('@') && /^@@?[\\w-]+$/.test(url)) {\n\t\treturn false;\n\t}\n\n\t// In url without quotes scss variable can be everywhere\n\t// But in this case it is allowed to use only specific characters\n\t// Also forbidden \"/\" at the end of url\n\tif (url.includes('$') && /^[$\\s\\w+-/*'\"/]+$/.test(url) && !url.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"]},"metadata":{},"sourceType":"script"}