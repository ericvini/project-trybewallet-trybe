{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\nconst messages = ruleMessages(ruleName, {\n  expectedBefore: () => 'Expected single space before \":\"',\n  rejectedBefore: () => 'Unexpected whitespace before \":\"'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    declarationColonSpaceChecker({\n      root,\n      result,\n      locationChecker: checker.before,\n      checkedRuleName: ruleName,\n      fix: context.fix ? (decl, index) => {\n        const colonIndex = index - declarationValueIndex(decl);\n        const between = decl.raws.between;\n\n        if (expectation === 'always') {\n          decl.raws.between = between.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n          return true;\n        }\n\n        if (expectation === 'never') {\n          decl.raws.between = between.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n          return true;\n        }\n      } : null\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-colon-space-before/index.js"],"names":["declarationColonSpaceChecker","require","declarationValueIndex","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedBefore","rejectedBefore","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","locationChecker","before","checkedRuleName","fix","decl","index","colonIndex","between","raws","slice","replace","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,4BAA4B,GAAGC,OAAO,CAAC,iCAAD,CAA5C;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMK,QAAQ,GAAG,gCAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,cAAc,EAAE,MAAM,kCADiB;AAEvCC,EAAAA,cAAc,EAAE,MAAM;AAFiB,CAAX,CAA7B;;AAKA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC5C,QAAMC,OAAO,GAAGT,iBAAiB,CAAC,OAAD,EAAUM,WAAV,EAAuBJ,QAAvB,CAAjC;AAEA,SAAO,CAACQ,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGb,eAAe,CAACY,MAAD,EAASV,QAAT,EAAmB;AACtDY,MAAAA,MAAM,EAAEP,WAD8C;AAEtDQ,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDjB,IAAAA,4BAA4B,CAAC;AAC5Be,MAAAA,IAD4B;AAE5BC,MAAAA,MAF4B;AAG5BI,MAAAA,eAAe,EAAEN,OAAO,CAACO,MAHG;AAI5BC,MAAAA,eAAe,EAAEhB,QAJW;AAK5BiB,MAAAA,GAAG,EAAEV,OAAO,CAACU,GAAR,GACF,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjB,cAAMC,UAAU,GAAGD,KAAK,GAAGvB,qBAAqB,CAACsB,IAAD,CAAhD;AACA,cAAMG,OAAO,GAAGH,IAAI,CAACI,IAAL,CAAUD,OAA1B;;AAEA,YAAIhB,WAAW,KAAK,QAApB,EAA8B;AAC7Ba,UAAAA,IAAI,CAACI,IAAL,CAAUD,OAAV,GACCA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBH,UAAjB,EAA6BI,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,IAAoDH,OAAO,CAACE,KAAR,CAAcH,UAAd,CADrD;AAGA,iBAAO,IAAP;AACA;;AAED,YAAIf,WAAW,KAAK,OAApB,EAA6B;AAC5Ba,UAAAA,IAAI,CAACI,IAAL,CAAUD,OAAV,GACCA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBH,UAAjB,EAA6BI,OAA7B,CAAqC,MAArC,EAA6C,EAA7C,IAAmDH,OAAO,CAACE,KAAR,CAAcH,UAAd,CADpD;AAGA,iBAAO,IAAP;AACA;AACA,OAlBC,GAmBF;AAxByB,KAAD,CAA5B;AA0BA,GApCD;AAqCA;;AAEDhB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAwB,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst declarationColonSpaceChecker = require('../declarationColonSpaceChecker');\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-colon-space-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedBefore: () => 'Expected single space before \":\"',\n\trejectedBefore: () => 'Unexpected whitespace before \":\"',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeclarationColonSpaceChecker({\n\t\t\troot,\n\t\t\tresult,\n\t\t\tlocationChecker: checker.before,\n\t\t\tcheckedRuleName: ruleName,\n\t\t\tfix: context.fix\n\t\t\t\t? (decl, index) => {\n\t\t\t\t\t\tconst colonIndex = index - declarationValueIndex(decl);\n\t\t\t\t\t\tconst between = decl.raws.between;\n\n\t\t\t\t\t\tif (expectation === 'always') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, ' ') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation === 'never') {\n\t\t\t\t\t\t\tdecl.raws.between =\n\t\t\t\t\t\t\t\tbetween.slice(0, colonIndex).replace(/\\s*$/, '') + between.slice(colonIndex);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}