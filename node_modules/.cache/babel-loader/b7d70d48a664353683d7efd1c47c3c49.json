{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst blockString = require('../../utils/blockString');\n\nconst rawNodeString = require('../../utils/rawNodeString');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\nconst messages = ruleMessages(ruleName, {\n  expectedAfter: () => 'Expected single space after \";\"',\n  rejectedAfter: () => 'Unexpected whitespace after \";\"',\n  expectedAfterSingleLine: () => 'Expected single space after \";\" in a single-line declaration block',\n  rejectedAfterSingleLine: () => 'Unexpected whitespace after \";\" in a single-line declaration block'\n});\n\nfunction rule(expectation, options, context) {\n  const checker = whitespaceChecker('space', expectation, messages);\n  return function (root, result) {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['always', 'never', 'always-single-line', 'never-single-line']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      // Ignore last declaration if there's no trailing semicolon\n      const parentRule = decl.parent;\n\n      if (!parentRule.raws.semicolon && parentRule.last === decl) {\n        return;\n      }\n\n      const nextDecl = decl.next();\n\n      if (!nextDecl) {\n        return;\n      }\n\n      checker.after({\n        source: rawNodeString(nextDecl),\n        index: -1,\n        lineCheckStr: blockString(parentRule),\n        err: m => {\n          if (context.fix) {\n            if (expectation.startsWith('always')) {\n              nextDecl.raws.before = ' ';\n              return;\n            }\n\n            if (expectation.startsWith('never')) {\n              nextDecl.raws.before = '';\n              return;\n            }\n          }\n\n          report({\n            message: m,\n            node: decl,\n            index: decl.toString().length + 1,\n            result,\n            ruleName\n          });\n        }\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js"],"names":["blockString","require","rawNodeString","report","ruleMessages","validateOptions","whitespaceChecker","ruleName","messages","expectedAfter","rejectedAfter","expectedAfterSingleLine","rejectedAfterSingleLine","rule","expectation","options","context","checker","root","result","validOptions","actual","possible","walkDecls","decl","parentRule","parent","raws","semicolon","last","nextDecl","next","after","source","index","lineCheckStr","err","m","fix","startsWith","before","message","node","toString","length","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMM,QAAQ,GAAG,yCAAjB;AAEA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,QAAD,EAAW;AACvCE,EAAAA,aAAa,EAAE,MAAM,iCADkB;AAEvCC,EAAAA,aAAa,EAAE,MAAM,iCAFkB;AAGvCC,EAAAA,uBAAuB,EAAE,MACxB,oEAJsC;AAKvCC,EAAAA,uBAAuB,EAAE,MACxB;AANsC,CAAX,CAA7B;;AASA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC5C,QAAMC,OAAO,GAAGX,iBAAiB,CAAC,OAAD,EAAUQ,WAAV,EAAuBN,QAAvB,CAAjC;AAEA,SAAO,UAAUU,IAAV,EAAgBC,MAAhB,EAAwB;AAC9B,UAAMC,YAAY,GAAGf,eAAe,CAACc,MAAD,EAASZ,QAAT,EAAmB;AACtDc,MAAAA,MAAM,EAAEP,WAD8C;AAEtDQ,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,oBAApB,EAA0C,mBAA1C;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA;;AAEDF,IAAAA,IAAI,CAACK,SAAL,CAAgBC,IAAD,IAAU;AACxB;AACA,YAAMC,UAAU,GAAGD,IAAI,CAACE,MAAxB;;AAEA,UAAI,CAACD,UAAU,CAACE,IAAX,CAAgBC,SAAjB,IAA8BH,UAAU,CAACI,IAAX,KAAoBL,IAAtD,EAA4D;AAC3D;AACA;;AAED,YAAMM,QAAQ,GAAGN,IAAI,CAACO,IAAL,EAAjB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACd;AACA;;AAEDb,MAAAA,OAAO,CAACe,KAAR,CAAc;AACbC,QAAAA,MAAM,EAAE/B,aAAa,CAAC4B,QAAD,CADR;AAEbI,QAAAA,KAAK,EAAE,CAAC,CAFK;AAGbC,QAAAA,YAAY,EAAEnC,WAAW,CAACyB,UAAD,CAHZ;AAIbW,QAAAA,GAAG,EAAGC,CAAD,IAAO;AACX,cAAIrB,OAAO,CAACsB,GAAZ,EAAiB;AAChB,gBAAIxB,WAAW,CAACyB,UAAZ,CAAuB,QAAvB,CAAJ,EAAsC;AACrCT,cAAAA,QAAQ,CAACH,IAAT,CAAca,MAAd,GAAuB,GAAvB;AAEA;AACA;;AAED,gBAAI1B,WAAW,CAACyB,UAAZ,CAAuB,OAAvB,CAAJ,EAAqC;AACpCT,cAAAA,QAAQ,CAACH,IAAT,CAAca,MAAd,GAAuB,EAAvB;AAEA;AACA;AACD;;AAEDrC,UAAAA,MAAM,CAAC;AACNsC,YAAAA,OAAO,EAAEJ,CADH;AAENK,YAAAA,IAAI,EAAElB,IAFA;AAGNU,YAAAA,KAAK,EAAEV,IAAI,CAACmB,QAAL,GAAgBC,MAAhB,GAAyB,CAH1B;AAINzB,YAAAA,MAJM;AAKNZ,YAAAA;AALM,WAAD,CAAN;AAOA;AA1BY,OAAd;AA4BA,KA1CD;AA2CA,GArDD;AAsDA;;AAEDM,IAAI,CAACN,QAAL,GAAgBA,QAAhB;AACAM,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAqC,MAAM,CAACC,OAAP,GAAiBjC,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst blockString = require('../../utils/blockString');\nconst rawNodeString = require('../../utils/rawNodeString');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst whitespaceChecker = require('../../utils/whitespaceChecker');\n\nconst ruleName = 'declaration-block-semicolon-space-after';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedAfter: () => 'Expected single space after \";\"',\n\trejectedAfter: () => 'Unexpected whitespace after \";\"',\n\texpectedAfterSingleLine: () =>\n\t\t'Expected single space after \";\" in a single-line declaration block',\n\trejectedAfterSingleLine: () =>\n\t\t'Unexpected whitespace after \";\" in a single-line declaration block',\n});\n\nfunction rule(expectation, options, context) {\n\tconst checker = whitespaceChecker('space', expectation, messages);\n\n\treturn function (root, result) {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['always', 'never', 'always-single-line', 'never-single-line'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\t// Ignore last declaration if there's no trailing semicolon\n\t\t\tconst parentRule = decl.parent;\n\n\t\t\tif (!parentRule.raws.semicolon && parentRule.last === decl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextDecl = decl.next();\n\n\t\t\tif (!nextDecl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchecker.after({\n\t\t\t\tsource: rawNodeString(nextDecl),\n\t\t\t\tindex: -1,\n\t\t\t\tlineCheckStr: blockString(parentRule),\n\t\t\t\terr: (m) => {\n\t\t\t\t\tif (context.fix) {\n\t\t\t\t\t\tif (expectation.startsWith('always')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = ' ';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expectation.startsWith('never')) {\n\t\t\t\t\t\t\tnextDecl.raws.before = '';\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: m,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tindex: decl.toString().length + 1,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}