{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst reSyntaxCSS = /^(?:post)?css$/i;\n\nfunction cssSyntax() {\n  return {\n    stringify: require(\"postcss/lib/stringify\"),\n    parse: require(\"postcss/lib/parse\")\n  };\n}\n\nfunction normalize(syntax) {\n  if (!syntax.parse) {\n    syntax = {\n      parse: syntax\n    };\n  }\n\n  return syntax;\n}\n\nfunction requireSyntax(syntax) {\n  if (reSyntaxCSS.test(syntax)) {\n    return cssSyntax();\n  } else if (/^sugarss$/i.test(syntax)) {\n    syntax = \"sugarss\";\n  } else if (path.isAbsolute(syntax) || syntax[0] === \".\") {\n    syntax = path.resolve(syntax);\n  } else {\n    syntax = syntax.toLowerCase().replace(/^(?:postcss-)?(\\w+)/i, \"postcss-$1\");\n  }\n\n  return normalize(require(syntax));\n}\n\nfunction getSyntax(lang, opts) {\n  let syntax;\n  lang = lang || \"css\";\n\n  if (opts.syntax.config[lang]) {\n    syntax = opts.syntax.config[lang];\n\n    if (typeof syntax === \"string\") {\n      if (syntax !== lang && opts.syntax.config[syntax]) {\n        return getSyntax(syntax, opts);\n      }\n\n      syntax = requireSyntax(syntax);\n    } else {\n      syntax = normalize(syntax);\n    }\n  } else if (reSyntaxCSS.test(lang)) {\n    syntax = cssSyntax();\n  } else {\n    return requireSyntax(lang);\n  }\n\n  if (!syntax.stringify) {\n    if (reSyntaxCSS.test(lang)) {\n      syntax.stringify = require(\"postcss/lib/stringify\");\n    } else {\n      syntax.stringify = getSyntax(null, opts).stringify;\n    }\n  }\n\n  opts.syntax.config[lang] = syntax;\n  return syntax;\n}\n\nmodule.exports = getSyntax;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/postcss-syntax/get-syntax.js"],"names":["path","require","reSyntaxCSS","cssSyntax","stringify","parse","normalize","syntax","requireSyntax","test","isAbsolute","resolve","toLowerCase","replace","getSyntax","lang","opts","config","module","exports"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,WAAW,GAAG,iBAApB;;AAEA,SAASC,SAAT,GAAsB;AACrB,SAAO;AACNC,IAAAA,SAAS,EAAEH,OAAO,CAAC,uBAAD,CADZ;AAENI,IAAAA,KAAK,EAAEJ,OAAO,CAAC,mBAAD;AAFR,GAAP;AAIA;;AAED,SAASK,SAAT,CAAoBC,MAApB,EAA4B;AAC3B,MAAI,CAACA,MAAM,CAACF,KAAZ,EAAmB;AAClBE,IAAAA,MAAM,GAAG;AACRF,MAAAA,KAAK,EAAEE;AADC,KAAT;AAGA;;AACD,SAAOA,MAAP;AACA;;AAED,SAASC,aAAT,CAAwBD,MAAxB,EAAgC;AAC/B,MAAIL,WAAW,CAACO,IAAZ,CAAiBF,MAAjB,CAAJ,EAA8B;AAC7B,WAAOJ,SAAS,EAAhB;AACA,GAFD,MAEO,IAAI,aAAaM,IAAb,CAAkBF,MAAlB,CAAJ,EAA+B;AACrCA,IAAAA,MAAM,GAAG,SAAT;AACA,GAFM,MAEA,IAAIP,IAAI,CAACU,UAAL,CAAgBH,MAAhB,KAA2BA,MAAM,CAAC,CAAD,CAAN,KAAc,GAA7C,EAAkD;AACxDA,IAAAA,MAAM,GAAGP,IAAI,CAACW,OAAL,CAAaJ,MAAb,CAAT;AACA,GAFM,MAEA;AACNA,IAAAA,MAAM,GAAGA,MAAM,CAACK,WAAP,GAAqBC,OAArB,CAA6B,sBAA7B,EAAqD,YAArD,CAAT;AACA;;AACD,SAAOP,SAAS,CAACL,OAAO,CAACM,MAAD,CAAR,CAAhB;AACA;;AAED,SAASO,SAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC/B,MAAIT,MAAJ;AACAQ,EAAAA,IAAI,GAAGA,IAAI,IAAI,KAAf;;AACA,MAAIC,IAAI,CAACT,MAAL,CAAYU,MAAZ,CAAmBF,IAAnB,CAAJ,EAA8B;AAC7BR,IAAAA,MAAM,GAAGS,IAAI,CAACT,MAAL,CAAYU,MAAZ,CAAmBF,IAAnB,CAAT;;AACA,QAAI,OAAOR,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAIA,MAAM,KAAKQ,IAAX,IAAmBC,IAAI,CAACT,MAAL,CAAYU,MAAZ,CAAmBV,MAAnB,CAAvB,EAAmD;AAClD,eAAOO,SAAS,CAACP,MAAD,EAASS,IAAT,CAAhB;AACA;;AACDT,MAAAA,MAAM,GAAGC,aAAa,CAACD,MAAD,CAAtB;AACA,KALD,MAKO;AACNA,MAAAA,MAAM,GAAGD,SAAS,CAACC,MAAD,CAAlB;AACA;AACD,GAVD,MAUO,IAAIL,WAAW,CAACO,IAAZ,CAAiBM,IAAjB,CAAJ,EAA4B;AAClCR,IAAAA,MAAM,GAAGJ,SAAS,EAAlB;AACA,GAFM,MAEA;AACN,WAAOK,aAAa,CAACO,IAAD,CAApB;AACA;;AACD,MAAI,CAACR,MAAM,CAACH,SAAZ,EAAuB;AACtB,QAAIF,WAAW,CAACO,IAAZ,CAAiBM,IAAjB,CAAJ,EAA4B;AAC3BR,MAAAA,MAAM,CAACH,SAAP,GAAmBH,OAAO,CAAC,uBAAD,CAA1B;AACA,KAFD,MAEO;AACNM,MAAAA,MAAM,CAACH,SAAP,GAAmBU,SAAS,CAAC,IAAD,EAAOE,IAAP,CAAT,CAAsBZ,SAAzC;AACA;AACD;;AACDY,EAAAA,IAAI,CAACT,MAAL,CAAYU,MAAZ,CAAmBF,IAAnB,IAA2BR,MAA3B;AACA,SAAOA,MAAP;AACA;;AAEDW,MAAM,CAACC,OAAP,GAAiBL,SAAjB","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst reSyntaxCSS = /^(?:post)?css$/i;\n\nfunction cssSyntax () {\n\treturn {\n\t\tstringify: require(\"postcss/lib/stringify\"),\n\t\tparse: require(\"postcss/lib/parse\"),\n\t};\n}\n\nfunction normalize (syntax) {\n\tif (!syntax.parse) {\n\t\tsyntax = {\n\t\t\tparse: syntax,\n\t\t};\n\t}\n\treturn syntax;\n}\n\nfunction requireSyntax (syntax) {\n\tif (reSyntaxCSS.test(syntax)) {\n\t\treturn cssSyntax();\n\t} else if (/^sugarss$/i.test(syntax)) {\n\t\tsyntax = \"sugarss\";\n\t} else if (path.isAbsolute(syntax) || syntax[0] === \".\") {\n\t\tsyntax = path.resolve(syntax);\n\t} else {\n\t\tsyntax = syntax.toLowerCase().replace(/^(?:postcss-)?(\\w+)/i, \"postcss-$1\");\n\t}\n\treturn normalize(require(syntax));\n}\n\nfunction getSyntax (lang, opts) {\n\tlet syntax;\n\tlang = lang || \"css\";\n\tif (opts.syntax.config[lang]) {\n\t\tsyntax = opts.syntax.config[lang];\n\t\tif (typeof syntax === \"string\") {\n\t\t\tif (syntax !== lang && opts.syntax.config[syntax]) {\n\t\t\t\treturn getSyntax(syntax, opts);\n\t\t\t}\n\t\t\tsyntax = requireSyntax(syntax);\n\t\t} else {\n\t\t\tsyntax = normalize(syntax);\n\t\t}\n\t} else if (reSyntaxCSS.test(lang)) {\n\t\tsyntax = cssSyntax();\n\t} else {\n\t\treturn requireSyntax(lang);\n\t}\n\tif (!syntax.stringify) {\n\t\tif (reSyntaxCSS.test(lang)) {\n\t\t\tsyntax.stringify = require(\"postcss/lib/stringify\");\n\t\t} else {\n\t\t\tsyntax.stringify = getSyntax(null, opts).stringify;\n\t\t}\n\t}\n\topts.syntax.config[lang] = syntax;\n\treturn syntax;\n}\n\nmodule.exports = getSyntax;\n"]},"metadata":{},"sourceType":"script"}