{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _isNumber2 = _interopRequireDefault(require(\"lodash/isNumber\"));\n\nvar _isString2 = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _stringWidth = _interopRequireDefault(require(\"string-width\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst alignments = ['left', 'right', 'center'];\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\n\nconst alignLeft = (subject, width) => {\n  return subject + ' '.repeat(width);\n};\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\n\n\nconst alignRight = (subject, width) => {\n  return ' '.repeat(width) + subject;\n};\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\n\n\nconst alignCenter = (subject, width) => {\n  let halfWidth;\n  halfWidth = width / 2;\n\n  if (width % 2 === 0) {\n    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth);\n  } else {\n    halfWidth = Math.floor(halfWidth);\n    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth + 1);\n  }\n};\n/**\n * Pads a string to the left and/or right to position the subject\n * text in a desired alignment within a container.\n *\n * @param {string} subject\n * @param {number} containerWidth\n * @param {string} alignment One of the valid options (left, right, center).\n * @returns {string}\n */\n\n\nconst alignString = (subject, containerWidth, alignment) => {\n  if (!(0, _isString2.default)(subject)) {\n    throw new TypeError('Subject parameter value must be a string.');\n  }\n\n  if (!(0, _isNumber2.default)(containerWidth)) {\n    throw new TypeError('Container width parameter value must be a number.');\n  }\n\n  const subjectWidth = (0, _stringWidth.default)(subject);\n\n  if (subjectWidth > containerWidth) {\n    // console.log('subjectWidth', subjectWidth, 'containerWidth', containerWidth, 'subject', subject);\n    throw new Error('Subject parameter value width cannot be greater than the container width.');\n  }\n\n  if (!(0, _isString2.default)(alignment)) {\n    throw new TypeError('Alignment parameter value must be a string.');\n  }\n\n  if (!alignments.includes(alignment)) {\n    throw new Error('Alignment parameter value must be a known alignment parameter value (left, right, center).');\n  }\n\n  if (subjectWidth === 0) {\n    return ' '.repeat(containerWidth);\n  }\n\n  const availableWidth = containerWidth - subjectWidth;\n\n  if (alignment === 'left') {\n    return alignLeft(subject, availableWidth);\n  }\n\n  if (alignment === 'right') {\n    return alignRight(subject, availableWidth);\n  }\n\n  return alignCenter(subject, availableWidth);\n};\n\nvar _default = alignString;\nexports.default = _default;","map":{"version":3,"sources":["../src/alignString.js"],"names":["alignments","alignLeft","subject","alignRight","alignCenter","halfWidth","width","Math","containerWidth","alignment","subjectWidth","availableWidth"],"mappings":";;;;;;;;;;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;;;;;;;AAEA,MAAMA,UAAU,GAAG,CAAA,MAAA,EAAA,OAAA,EAAnB,QAAmB,CAAnB;AAMA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,CAAA,OAAA,EAAA,KAAA,KAAoB;AACpC,SAAOC,OAAO,GAAG,IAAA,MAAA,CAAjB,KAAiB,CAAjB;AADF,CAAA;AAIA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,UAAU,GAAG,CAAA,OAAA,EAAA,KAAA,KAAoB;AACrC,SAAO,IAAA,MAAA,CAAA,KAAA,IAAP,OAAA;AADF,CAAA;AAIA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAG,CAAA,OAAA,EAAA,KAAA,KAAoB;AACtC,MAAA,SAAA;AAEAC,EAAAA,SAAS,GAAGC,KAAK,GAAjBD,CAAAA;;AAEA,MAAIC,KAAK,GAALA,CAAAA,KAAJ,CAAA,EAAqB;AACnB,WAAO,IAAA,MAAA,CAAA,SAAA,IAAA,OAAA,GAAkC,IAAA,MAAA,CAAzC,SAAyC,CAAzC;AADF,GAAA,MAEO;AACLD,IAAAA,SAAS,GAAGE,IAAI,CAAJA,KAAAA,CAAZF,SAAYE,CAAZF;AAEA,WAAO,IAAA,MAAA,CAAA,SAAA,IAAA,OAAA,GAAkC,IAAA,MAAA,CAAWA,SAAS,GAA7D,CAAyC,CAAzC;AACD;AAXH,CAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;qBACgBH,O,EAASM,c,EAAgBC,S,KAAc;AACrD,MAAI,CAAC,CAAA,GAAA,UAAA,CAAA,OAAA,EAAL,OAAK,CAAL,EAA0B;AACxB,UAAM,IAAA,SAAA,CAAN,2CAAM,CAAN;AACD;;AAED,MAAI,CAAC,CAAA,GAAA,UAAA,CAAA,OAAA,EAAL,cAAK,CAAL,EAAiC;AAC/B,UAAM,IAAA,SAAA,CAAN,mDAAM,CAAN;AACD;;AAED,QAAMC,YAAY,GAAG,CAAA,GAAA,YAAA,CAAA,OAAA,EAArB,OAAqB,CAArB;;AAEA,MAAIA,YAAY,GAAhB,cAAA,EAAmC;AACjC;AAEA,UAAM,IAAA,KAAA,CAAN,2EAAM,CAAN;AACD;;AAED,MAAI,CAAC,CAAA,GAAA,UAAA,CAAA,OAAA,EAAL,SAAK,CAAL,EAA4B;AAC1B,UAAM,IAAA,SAAA,CAAN,6CAAM,CAAN;AACD;;AAED,MAAI,CAACV,UAAU,CAAVA,QAAAA,CAAL,SAAKA,CAAL,EAAqC;AACnC,UAAM,IAAA,KAAA,CAAN,4FAAM,CAAN;AACD;;AAED,MAAIU,YAAY,KAAhB,CAAA,EAAwB;AACtB,WAAO,IAAA,MAAA,CAAP,cAAO,CAAP;AACD;;AAED,QAAMC,cAAc,GAAGH,cAAc,GAArC,YAAA;;AAEA,MAAIC,SAAS,KAAb,MAAA,EAA0B;AACxB,WAAOR,SAAS,CAAA,OAAA,EAAhB,cAAgB,CAAhB;AACD;;AAED,MAAIQ,SAAS,KAAb,OAAA,EAA2B;AACzB,WAAON,UAAU,CAAA,OAAA,EAAjB,cAAiB,CAAjB;AACD;;AAED,SAAOC,WAAW,CAAA,OAAA,EAAlB,cAAkB,CAAlB","sourcesContent":["import _ from 'lodash';\nimport stringWidth from 'string-width';\n\nconst alignments = [\n  'left',\n  'right',\n  'center',\n];\n\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\nconst alignLeft = (subject, width) => {\n  return subject + ' '.repeat(width);\n};\n\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\nconst alignRight = (subject, width) => {\n  return ' '.repeat(width) + subject;\n};\n\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\nconst alignCenter = (subject, width) => {\n  let halfWidth;\n\n  halfWidth = width / 2;\n\n  if (width % 2 === 0) {\n    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth);\n  } else {\n    halfWidth = Math.floor(halfWidth);\n\n    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth + 1);\n  }\n};\n\n/**\n * Pads a string to the left and/or right to position the subject\n * text in a desired alignment within a container.\n *\n * @param {string} subject\n * @param {number} containerWidth\n * @param {string} alignment One of the valid options (left, right, center).\n * @returns {string}\n */\nexport default (subject, containerWidth, alignment) => {\n  if (!_.isString(subject)) {\n    throw new TypeError('Subject parameter value must be a string.');\n  }\n\n  if (!_.isNumber(containerWidth)) {\n    throw new TypeError('Container width parameter value must be a number.');\n  }\n\n  const subjectWidth = stringWidth(subject);\n\n  if (subjectWidth > containerWidth) {\n    // console.log('subjectWidth', subjectWidth, 'containerWidth', containerWidth, 'subject', subject);\n\n    throw new Error('Subject parameter value width cannot be greater than the container width.');\n  }\n\n  if (!_.isString(alignment)) {\n    throw new TypeError('Alignment parameter value must be a string.');\n  }\n\n  if (!alignments.includes(alignment)) {\n    throw new Error('Alignment parameter value must be a known alignment parameter value (left, right, center).');\n  }\n\n  if (subjectWidth === 0) {\n    return ' '.repeat(containerWidth);\n  }\n\n  const availableWidth = containerWidth - subjectWidth;\n\n  if (alignment === 'left') {\n    return alignLeft(subject, availableWidth);\n  }\n\n  if (alignment === 'right') {\n    return alignRight(subject, availableWidth);\n  }\n\n  return alignCenter(subject, availableWidth);\n};\n"]},"metadata":{},"sourceType":"script"}