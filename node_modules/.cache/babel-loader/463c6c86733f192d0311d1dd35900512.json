{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\n\nconst parseSelector = require('../../utils/parseSelector');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\nconst messages = ruleMessages(ruleName, {\n  rejected: operator => `Unexpected operator \"${operator}\"`\n});\n\nfunction rule(listInput) {\n  const list = [].concat(listInput);\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString]\n    });\n\n    if (!validOptions) {\n      return;\n    } // TODO: Issue #4985\n    // eslint-disable-next-line no-shadow\n\n\n    root.walkRules(rule => {\n      if (!isStandardSyntaxRule(rule)) {\n        return;\n      }\n\n      if (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n        return;\n      }\n\n      parseSelector(rule.selector, result, rule, selectorTree => {\n        selectorTree.walkAttributes(attributeNode => {\n          const operator = attributeNode.operator;\n\n          if (!operator || operator && !list.includes(operator)) {\n            return;\n          }\n\n          report({\n            message: messages.rejected(operator),\n            node: rule,\n            index: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n            result,\n            ruleName\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.js"],"names":["_","require","isStandardSyntaxRule","parseSelector","report","ruleMessages","validateOptions","ruleName","messages","rejected","operator","rule","listInput","list","concat","root","result","validOptions","actual","possible","isString","walkRules","selector","includes","selectorTree","walkAttributes","attributeNode","message","node","index","sourceIndex","offsetOf","primaryOptionArray","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMM,QAAQ,GAAG,6CAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,QAAD,IAAe,wBAAuBA,QAAS;AADlB,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,SAAd,EAAyB;AACxB,QAAMC,IAAI,GAAG,GAAGC,MAAH,CAAUF,SAAV,CAAb;AAEA,SAAO,CAACG,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAAST,QAAT,EAAmB;AACtDW,MAAAA,MAAM,EAAEL,IAD8C;AAEtDM,MAAAA,QAAQ,EAAE,CAACnB,CAAC,CAACoB,QAAH;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA,KARuB,CAUxB;AACA;;;AACAF,IAAAA,IAAI,CAACM,SAAL,CAAgBV,IAAD,IAAU;AACxB,UAAI,CAACT,oBAAoB,CAACS,IAAD,CAAzB,EAAiC;AAChC;AACA;;AAED,UAAI,CAACA,IAAI,CAACW,QAAL,CAAcC,QAAd,CAAuB,GAAvB,CAAD,IAAgC,CAACZ,IAAI,CAACW,QAAL,CAAcC,QAAd,CAAuB,GAAvB,CAArC,EAAkE;AACjE;AACA;;AAEDpB,MAAAA,aAAa,CAACQ,IAAI,CAACW,QAAN,EAAgBN,MAAhB,EAAwBL,IAAxB,EAA+Ba,YAAD,IAAkB;AAC5DA,QAAAA,YAAY,CAACC,cAAb,CAA6BC,aAAD,IAAmB;AAC9C,gBAAMhB,QAAQ,GAAGgB,aAAa,CAAChB,QAA/B;;AAEA,cAAI,CAACA,QAAD,IAAcA,QAAQ,IAAI,CAACG,IAAI,CAACU,QAAL,CAAcb,QAAd,CAA/B,EAAyD;AACxD;AACA;;AAEDN,UAAAA,MAAM,CAAC;AACNuB,YAAAA,OAAO,EAAEnB,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,CADH;AAENkB,YAAAA,IAAI,EAAEjB,IAFA;AAGNkB,YAAAA,KAAK,EAAEH,aAAa,CAACI,WAAd,GAA4BJ,aAAa,CAACK,QAAd,CAAuB,UAAvB,CAH7B;AAINf,YAAAA,MAJM;AAKNT,YAAAA;AALM,WAAD,CAAN;AAOA,SAdD;AAeA,OAhBY,CAAb;AAiBA,KA1BD;AA2BA,GAvCD;AAwCA;;AAEDI,IAAI,CAACqB,kBAAL,GAA0B,IAA1B;AAEArB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAyB,MAAM,CAACC,OAAP,GAAiBvB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isStandardSyntaxRule = require('../../utils/isStandardSyntaxRule');\nconst parseSelector = require('../../utils/parseSelector');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'selector-attribute-operator-disallowed-list';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (operator) => `Unexpected operator \"${operator}\"`,\n});\n\nfunction rule(listInput) {\n\tconst list = [].concat(listInput);\n\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: Issue #4985\n\t\t// eslint-disable-next-line no-shadow\n\t\troot.walkRules((rule) => {\n\t\t\tif (!isStandardSyntaxRule(rule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!rule.selector.includes('[') || !rule.selector.includes('=')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparseSelector(rule.selector, result, rule, (selectorTree) => {\n\t\t\t\tselectorTree.walkAttributes((attributeNode) => {\n\t\t\t\t\tconst operator = attributeNode.operator;\n\n\t\t\t\t\tif (!operator || (operator && !list.includes(operator))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\tmessage: messages.rejected(operator),\n\t\t\t\t\t\tnode: rule,\n\t\t\t\t\t\tindex: attributeNode.sourceIndex + attributeNode.offsetOf('operator'),\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}