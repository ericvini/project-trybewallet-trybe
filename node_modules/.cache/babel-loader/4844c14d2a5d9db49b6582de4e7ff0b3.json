{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst patched = {};\n\nfunction isPromise(obj) {\n  return typeof obj === \"object\" && typeof obj.then === \"function\";\n}\n\nfunction runDocument(plugin) {\n  const result = this.result;\n  result.lastPlugin = plugin;\n  const promise = result.root.nodes.map(root => {\n    try {\n      return plugin(root, result);\n    } catch (error) {\n      this.handleError(error, plugin);\n      throw error;\n    }\n  });\n\n  if (promise.some(isPromise)) {\n    return Promise.all(promise);\n  }\n}\n\nfunction patchDocument(Document, LazyResult) {\n  LazyResult = LazyResult.prototype;\n  const runRoot = LazyResult.run;\n\n  LazyResult.run = function run() {\n    return (this.result.root instanceof Document ? runDocument : runRoot).apply(this, arguments);\n  };\n}\n\nfunction patchNode(Node) {\n  Node = Node.prototype;\n  const NodeToString = Node.toString;\n\n  Node.toString = function toString(stringifier) {\n    return NodeToString.call(this, stringifier || this.root().source.syntax);\n  };\n}\n\nfunction patch(Document) {\n  let fn;\n  let file;\n\n  if (Document) {\n    patch();\n    fn = patchDocument.bind(this, Document);\n    file = \"lazy-result\";\n  } else {\n    fn = patchNode;\n    file = \"node\";\n  }\n\n  findPostcss().map(dir => [dir + \"lib\", file].join(path.sep)).filter(file => !patched[file]).forEach(file => {\n    try {\n      fn(require(file));\n    } catch (ex) {//\n    }\n\n    patched[file] = true;\n  });\n}\n\nfunction findPostcss() {\n  const result = {};\n\n  for (const file in require.cache) {\n    if (/^(.+?(\\\\|\\/))postcss(\\2)/.test(file)) {\n      result[RegExp.lastMatch] = true;\n    }\n  }\n\n  return Object.keys(result);\n}\n\nmodule.exports = patch;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/postcss-syntax/patch-postcss.js"],"names":["path","require","patched","isPromise","obj","then","runDocument","plugin","result","lastPlugin","promise","root","nodes","map","error","handleError","some","Promise","all","patchDocument","Document","LazyResult","prototype","runRoot","run","apply","arguments","patchNode","Node","NodeToString","toString","stringifier","call","source","syntax","patch","fn","file","bind","findPostcss","dir","join","sep","filter","forEach","ex","cache","test","RegExp","lastMatch","Object","keys","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst patched = {};\n\nfunction isPromise (obj) {\n\treturn typeof obj === \"object\" && typeof obj.then === \"function\";\n}\n\nfunction runDocument (plugin) {\n\tconst result = this.result;\n\tresult.lastPlugin = plugin;\n\tconst promise = result.root.nodes.map(root => {\n\t\ttry {\n\t\t\treturn plugin(root, result);\n\t\t} catch (error) {\n\t\t\tthis.handleError(error, plugin);\n\t\t\tthrow error;\n\t\t}\n\t});\n\tif (promise.some(isPromise)) {\n\t\treturn Promise.all(promise);\n\t}\n}\n\nfunction patchDocument (Document, LazyResult) {\n\tLazyResult = LazyResult.prototype;\n\tconst runRoot = LazyResult.run;\n\n\tLazyResult.run = function run () {\n\t\treturn (this.result.root instanceof Document ? runDocument : runRoot).apply(this, arguments);\n\t};\n}\n\nfunction patchNode (Node) {\n\tNode = Node.prototype;\n\tconst NodeToString = Node.toString;\n\tNode.toString = function toString (stringifier) {\n\t\treturn NodeToString.call(this, stringifier || this.root().source.syntax);\n\t};\n}\n\nfunction patch (Document) {\n\tlet fn;\n\tlet file;\n\tif (Document) {\n\t\tpatch();\n\t\tfn = patchDocument.bind(this, Document);\n\t\tfile = \"lazy-result\";\n\t} else {\n\t\tfn = patchNode;\n\t\tfile = \"node\";\n\t}\n\tfindPostcss().map(dir => (\n\t\t[dir + \"lib\", file].join(path.sep)\n\t)).filter(file => (\n\t\t!patched[file]\n\t)).forEach(file => {\n\t\ttry {\n\t\t\tfn(require(file));\n\t\t} catch (ex) {\n\t\t\t//\n\t\t}\n\t\tpatched[file] = true;\n\t});\n}\n\nfunction findPostcss () {\n\tconst result = {};\n\tfor (const file in require.cache) {\n\t\tif (/^(.+?(\\\\|\\/))postcss(\\2)/.test(file)) {\n\t\t\tresult[RegExp.lastMatch] = true;\n\t\t}\n\t}\n\treturn Object.keys(result);\n}\n\nmodule.exports = patch;\n"]},"metadata":{},"sourceType":"script"}