{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst fsWalk = require(\"@nodelib/fs.walk\");\n\nconst reader_1 = require(\"./reader\");\n\nclass ReaderSync extends reader_1.default {\n  constructor() {\n    super(...arguments);\n    this._walkSync = fsWalk.walkSync;\n    this._statSync = fsStat.statSync;\n  }\n\n  dynamic(root, options) {\n    return this._walkSync(root, options);\n  }\n\n  static(patterns, options) {\n    const entries = [];\n\n    for (const pattern of patterns) {\n      const filepath = this._getFullEntryPath(pattern);\n\n      const entry = this._getEntry(filepath, pattern, options);\n\n      if (entry === null || !options.entryFilter(entry)) {\n        continue;\n      }\n\n      entries.push(entry);\n    }\n\n    return entries;\n  }\n\n  _getEntry(filepath, pattern, options) {\n    try {\n      const stats = this._getStat(filepath);\n\n      return this._makeEntry(stats, pattern);\n    } catch (error) {\n      if (options.errorFilter(error)) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  _getStat(filepath) {\n    return this._statSync(filepath, this._fsStatSettings);\n  }\n\n}\n\nexports.default = ReaderSync;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/node_modules/fast-glob/out/readers/sync.js"],"names":["Object","defineProperty","exports","value","fsStat","require","fsWalk","reader_1","ReaderSync","default","constructor","arguments","_walkSync","walkSync","_statSync","statSync","dynamic","root","options","static","patterns","entries","pattern","filepath","_getFullEntryPath","entry","_getEntry","entryFilter","push","stats","_getStat","_makeEntry","error","errorFilter","_fsStatSettings"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,UAAN,SAAyBD,QAAQ,CAACE,OAAlC,CAA0C;AACtCC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,SAAL,GAAiBN,MAAM,CAACO,QAAxB;AACA,SAAKC,SAAL,GAAiBV,MAAM,CAACW,QAAxB;AACH;;AACDC,EAAAA,OAAO,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACnB,WAAO,KAAKN,SAAL,CAAeK,IAAf,EAAqBC,OAArB,CAAP;AACH;;AACDC,EAAAA,MAAM,CAACC,QAAD,EAAWF,OAAX,EAAoB;AACtB,UAAMG,OAAO,GAAG,EAAhB;;AACA,SAAK,MAAMC,OAAX,IAAsBF,QAAtB,EAAgC;AAC5B,YAAMG,QAAQ,GAAG,KAAKC,iBAAL,CAAuBF,OAAvB,CAAjB;;AACA,YAAMG,KAAK,GAAG,KAAKC,SAAL,CAAeH,QAAf,EAAyBD,OAAzB,EAAkCJ,OAAlC,CAAd;;AACA,UAAIO,KAAK,KAAK,IAAV,IAAkB,CAACP,OAAO,CAACS,WAAR,CAAoBF,KAApB,CAAvB,EAAmD;AAC/C;AACH;;AACDJ,MAAAA,OAAO,CAACO,IAAR,CAAaH,KAAb;AACH;;AACD,WAAOJ,OAAP;AACH;;AACDK,EAAAA,SAAS,CAACH,QAAD,EAAWD,OAAX,EAAoBJ,OAApB,EAA6B;AAClC,QAAI;AACA,YAAMW,KAAK,GAAG,KAAKC,QAAL,CAAcP,QAAd,CAAd;;AACA,aAAO,KAAKQ,UAAL,CAAgBF,KAAhB,EAAuBP,OAAvB,CAAP;AACH,KAHD,CAIA,OAAOU,KAAP,EAAc;AACV,UAAId,OAAO,CAACe,WAAR,CAAoBD,KAApB,CAAJ,EAAgC;AAC5B,eAAO,IAAP;AACH;;AACD,YAAMA,KAAN;AACH;AACJ;;AACDF,EAAAA,QAAQ,CAACP,QAAD,EAAW;AACf,WAAO,KAAKT,SAAL,CAAeS,QAAf,EAAyB,KAAKW,eAA9B,CAAP;AACH;;AAnCqC;;AAqC1ChC,OAAO,CAACO,OAAR,GAAkBD,UAAlB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fsStat = require(\"@nodelib/fs.stat\");\r\nconst fsWalk = require(\"@nodelib/fs.walk\");\r\nconst reader_1 = require(\"./reader\");\r\nclass ReaderSync extends reader_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._walkSync = fsWalk.walkSync;\r\n        this._statSync = fsStat.statSync;\r\n    }\r\n    dynamic(root, options) {\r\n        return this._walkSync(root, options);\r\n    }\r\n    static(patterns, options) {\r\n        const entries = [];\r\n        for (const pattern of patterns) {\r\n            const filepath = this._getFullEntryPath(pattern);\r\n            const entry = this._getEntry(filepath, pattern, options);\r\n            if (entry === null || !options.entryFilter(entry)) {\r\n                continue;\r\n            }\r\n            entries.push(entry);\r\n        }\r\n        return entries;\r\n    }\r\n    _getEntry(filepath, pattern, options) {\r\n        try {\r\n            const stats = this._getStat(filepath);\r\n            return this._makeEntry(stats, pattern);\r\n        }\r\n        catch (error) {\r\n            if (options.errorFilter(error)) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    _getStat(filepath) {\r\n        return this._statSync(filepath, this._fsStatSettings);\r\n    }\r\n}\r\nexports.default = ReaderSync;\r\n"]},"metadata":{},"sourceType":"script"}