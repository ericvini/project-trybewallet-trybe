{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst shorthandData = require('../../reference/shorthandData');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\nconst messages = ruleMessages(ruleName, {\n  rejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`\n});\n\nfunction rule(actual) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    eachDeclarationBlock(root, eachDecl => {\n      const declarations = {};\n      eachDecl(decl => {\n        const prop = decl.prop;\n        const unprefixedProp = vendor.unprefixed(prop);\n        const prefix = vendor.prefix(prop).toLowerCase();\n        const overrideables = shorthandData[unprefixedProp.toLowerCase()];\n\n        if (!overrideables) {\n          declarations[prop.toLowerCase()] = prop;\n          return;\n        }\n\n        overrideables.forEach(longhandProp => {\n          if (!Object.prototype.hasOwnProperty.call(declarations, prefix + longhandProp)) {\n            return;\n          }\n\n          report({\n            ruleName,\n            result,\n            node: decl,\n            message: messages.rejected(prop, declarations[prefix + longhandProp])\n          });\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js"],"names":["eachDeclarationBlock","require","report","ruleMessages","shorthandData","validateOptions","vendor","ruleName","messages","rejected","shorthand","original","rule","actual","root","result","validOptions","eachDecl","declarations","decl","prop","unprefixedProp","unprefixed","prefix","toLowerCase","overrideables","forEach","longhandProp","Object","prototype","hasOwnProperty","call","node","message","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,kCAAD,CAApC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,+BAAD,CAA7B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,oBAAD,CAAtB;;AAEA,MAAMM,QAAQ,GAAG,mDAAjB;AAEA,MAAMC,QAAQ,GAAGL,YAAY,CAACI,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAE,CAACC,SAAD,EAAYC,QAAZ,KAA0B,yBAAwBD,SAAU,YAAWC,QAAS;AADnD,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,MAAd,EAAsB;AACrB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGX,eAAe,CAACU,MAAD,EAASR,QAAT,EAAmB;AAAEM,MAAAA;AAAF,KAAnB,CAApC;;AAEA,QAAI,CAACG,YAAL,EAAmB;AAClB;AACA;;AAEDhB,IAAAA,oBAAoB,CAACc,IAAD,EAAQG,QAAD,IAAc;AACxC,YAAMC,YAAY,GAAG,EAArB;AAEAD,MAAAA,QAAQ,CAAEE,IAAD,IAAU;AAClB,cAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,cAAMC,cAAc,GAAGf,MAAM,CAACgB,UAAP,CAAkBF,IAAlB,CAAvB;AACA,cAAMG,MAAM,GAAGjB,MAAM,CAACiB,MAAP,CAAcH,IAAd,EAAoBI,WAApB,EAAf;AAEA,cAAMC,aAAa,GAAGrB,aAAa,CAACiB,cAAc,CAACG,WAAf,EAAD,CAAnC;;AAEA,YAAI,CAACC,aAAL,EAAoB;AACnBP,UAAAA,YAAY,CAACE,IAAI,CAACI,WAAL,EAAD,CAAZ,GAAmCJ,IAAnC;AAEA;AACA;;AAEDK,QAAAA,aAAa,CAACC,OAAd,CAAuBC,YAAD,IAAkB;AACvC,cAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCb,YAArC,EAAmDK,MAAM,GAAGI,YAA5D,CAAL,EAAgF;AAC/E;AACA;;AAEDzB,UAAAA,MAAM,CAAC;AACNK,YAAAA,QADM;AAENQ,YAAAA,MAFM;AAGNiB,YAAAA,IAAI,EAAEb,IAHA;AAINc,YAAAA,OAAO,EAAEzB,QAAQ,CAACC,QAAT,CAAkBW,IAAlB,EAAwBF,YAAY,CAACK,MAAM,GAAGI,YAAV,CAApC;AAJH,WAAD,CAAN;AAMA,SAXD;AAYA,OAzBO,CAAR;AA0BA,KA7BmB,CAApB;AA8BA,GArCD;AAsCA;;AAEDf,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACA0B,MAAM,CAACC,OAAP,GAAiBvB,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst eachDeclarationBlock = require('../../utils/eachDeclarationBlock');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst shorthandData = require('../../reference/shorthandData');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'declaration-block-no-shorthand-property-overrides';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,\n});\n\nfunction rule(actual) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\teachDeclarationBlock(root, (eachDecl) => {\n\t\t\tconst declarations = {};\n\n\t\t\teachDecl((decl) => {\n\t\t\t\tconst prop = decl.prop;\n\t\t\t\tconst unprefixedProp = vendor.unprefixed(prop);\n\t\t\t\tconst prefix = vendor.prefix(prop).toLowerCase();\n\n\t\t\t\tconst overrideables = shorthandData[unprefixedProp.toLowerCase()];\n\n\t\t\t\tif (!overrideables) {\n\t\t\t\t\tdeclarations[prop.toLowerCase()] = prop;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\toverrideables.forEach((longhandProp) => {\n\t\t\t\t\tif (!Object.prototype.hasOwnProperty.call(declarations, prefix + longhandProp)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treport({\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\tmessage: messages.rejected(prop, declarations[prefix + longhandProp]),\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}