{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\n\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst valueParser = require('postcss-value-parser');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\nconst messages = ruleMessages(ruleName, {\n  rejected: 'Unexpected nonstandard direction'\n});\n\nfunction isStandardDirection(source, withToPrefix) {\n  const regexp = withToPrefix ? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/ : /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n  const matches = source.match(regexp);\n\n  if (!matches) {\n    return false;\n  }\n\n  if (matches.length === 2) {\n    return true;\n  } // Cannot repeat side-or-corner, e.g. \"to top top\"\n\n\n  if (matches.length === 3 && matches[1] !== matches[2]) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction rule(actual) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      valueParser(decl.value).walk(valueNode => {\n        if (valueNode.type !== 'function') {\n          return;\n        }\n\n        functionArgumentsSearch(valueParser.stringify(valueNode).toLowerCase(), 'linear-gradient', (expression, expressionIndex) => {\n          const firstArg = expression.split(',')[0].trim(); // If the first arg is not standard, return early\n\n          if (!isStandardSyntaxValue(firstArg)) {\n            return;\n          } // If the first character is a number, we can assume the user intends an angle\n\n\n          if (/[\\d.]/.test(firstArg[0])) {\n            if (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n              return;\n            }\n\n            complain();\n            return;\n          } // The first argument may not be a direction: it may be an angle,\n          // or a color stop (in which case user gets default direction, \"to bottom\")\n          // cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\n\n          if (!/left|right|top|bottom/.test(firstArg)) {\n            return;\n          }\n\n          const withToPrefix = !vendor.prefix(valueNode.value);\n\n          if (!isStandardDirection(firstArg, withToPrefix)) {\n            complain();\n          }\n\n          function complain() {\n            report({\n              message: messages.rejected,\n              node: decl,\n              index: declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex,\n              result,\n              ruleName\n            });\n          }\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js"],"names":["declarationValueIndex","require","functionArgumentsSearch","isStandardSyntaxValue","report","ruleMessages","validateOptions","valueParser","vendor","ruleName","messages","rejected","isStandardDirection","source","withToPrefix","regexp","matches","match","length","rule","actual","root","result","validOptions","walkDecls","decl","value","walk","valueNode","type","stringify","toLowerCase","expression","expressionIndex","firstArg","split","trim","test","complain","prefix","message","node","index","sourceIndex","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst functionArgumentsSearch = require('../../utils/functionArgumentsSearch');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\nconst valueParser = require('postcss-value-parser');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'function-linear-gradient-no-nonstandard-direction';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected nonstandard direction',\n});\n\nfunction isStandardDirection(source, withToPrefix) {\n\tconst regexp = withToPrefix\n\t\t? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/\n\t\t: /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/;\n\n\tconst matches = source.match(regexp);\n\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\tif (matches.length === 2) {\n\t\treturn true;\n\t}\n\n\t// Cannot repeat side-or-corner, e.g. \"to top top\"\n\tif (matches.length === 3 && matches[1] !== matches[2]) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nfunction rule(actual) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, { actual });\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tvalueParser(decl.value).walk((valueNode) => {\n\t\t\t\tif (valueNode.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunctionArgumentsSearch(\n\t\t\t\t\tvalueParser.stringify(valueNode).toLowerCase(),\n\t\t\t\t\t'linear-gradient',\n\t\t\t\t\t(expression, expressionIndex) => {\n\t\t\t\t\t\tconst firstArg = expression.split(',')[0].trim();\n\n\t\t\t\t\t\t// If the first arg is not standard, return early\n\t\t\t\t\t\tif (!isStandardSyntaxValue(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the first character is a number, we can assume the user intends an angle\n\t\t\t\t\t\tif (/[\\d.]/.test(firstArg[0])) {\n\t\t\t\t\t\t\tif (/^[\\d.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomplain();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The first argument may not be a direction: it may be an angle,\n\t\t\t\t\t\t// or a color stop (in which case user gets default direction, \"to bottom\")\n\t\t\t\t\t\t// cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax\n\t\t\t\t\t\tif (!/left|right|top|bottom/.test(firstArg)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst withToPrefix = !vendor.prefix(valueNode.value);\n\n\t\t\t\t\t\tif (!isStandardDirection(firstArg, withToPrefix)) {\n\t\t\t\t\t\t\tcomplain();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfunction complain() {\n\t\t\t\t\t\t\treport({\n\t\t\t\t\t\t\t\tmessage: messages.rejected,\n\t\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\t\tindex: declarationValueIndex(decl) + valueNode.sourceIndex + expressionIndex,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}