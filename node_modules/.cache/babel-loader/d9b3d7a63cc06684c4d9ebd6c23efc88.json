{"ast":null,"code":"'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\n\nconst hasBlock = require('./hasBlock');\n\nconst rawNodeString = require('./rawNodeString');\n/** @typedef {import('postcss').Rule} Rule */\n\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`),\n * return false.\n *\n * @param {Rule | AtRule} statement - postcss rule or at-rule node\n * @return {string | boolean}\n */\n\n\nmodule.exports = function (statement) {\n  if (!hasBlock(statement)) {\n    return false;\n  }\n\n  return rawNodeString(statement).slice(beforeBlockString(statement).length);\n};","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/blockString.js"],"names":["beforeBlockString","require","hasBlock","rawNodeString","module","exports","statement","slice","length"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA7B;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;AACrC,MAAI,CAACJ,QAAQ,CAACI,SAAD,CAAb,EAA0B;AACzB,WAAO,KAAP;AACA;;AAED,SAAOH,aAAa,CAACG,SAAD,CAAb,CAAyBC,KAAzB,CAA+BP,iBAAiB,CAACM,SAAD,CAAjB,CAA6BE,MAA5D,CAAP;AACA,CAND","sourcesContent":["'use strict';\n\nconst beforeBlockString = require('./beforeBlockString');\nconst hasBlock = require('./hasBlock');\nconst rawNodeString = require('./rawNodeString');\n\n/** @typedef {import('postcss').Rule} Rule */\n/** @typedef {import('postcss').AtRule} AtRule */\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`),\n * return false.\n *\n * @param {Rule | AtRule} statement - postcss rule or at-rule node\n * @return {string | boolean}\n */\nmodule.exports = function (statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn false;\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n};\n"]},"metadata":{},"sourceType":"script"}