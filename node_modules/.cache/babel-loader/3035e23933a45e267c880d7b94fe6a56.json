{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst containsString = require('../../utils/containsString');\n\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-word-blacklist';\nconst messages = ruleMessages(ruleName, {\n  rejected: pattern => `Unexpected word matching pattern \"${pattern}\"`\n});\n\nfunction rule(list) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: list,\n      possible: [_.isString, _.isRegExp]\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    result.warn(`'${ruleName}' has been deprecated. Instead use 'comment-word-disallowed-list'.`, {\n      stylelintType: 'deprecation',\n      stylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`\n    });\n    root.walkComments(comment => {\n      const text = comment.text;\n      const rawComment = comment.toString();\n      const firstFourChars = rawComment.substr(0, 4); // Return early if sourcemap\n\n      if (firstFourChars === '/*# ') {\n        return;\n      }\n\n      const matchesWord = matchesStringOrRegExp(text, list) || containsString(text, list);\n\n      if (!matchesWord) {\n        return;\n      }\n\n      report({\n        message: messages.rejected(matchesWord.pattern),\n        node: comment,\n        result,\n        ruleName\n      });\n    });\n  };\n}\n\nrule.primaryOptionArray = true;\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = {\n  deprecated: true\n};\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/comment-word-blacklist/index.js"],"names":["_","require","containsString","matchesStringOrRegExp","report","ruleMessages","validateOptions","ruleName","messages","rejected","pattern","rule","list","root","result","validOptions","actual","possible","isString","isRegExp","warn","stylelintType","stylelintReference","walkComments","comment","text","rawComment","toString","firstFourChars","substr","matchesWord","message","node","primaryOptionArray","meta","deprecated","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAME,qBAAqB,GAAGF,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AAEA,MAAMM,QAAQ,GAAG,wBAAjB;AAEA,MAAMC,QAAQ,GAAGH,YAAY,CAACE,QAAD,EAAW;AACvCE,EAAAA,QAAQ,EAAGC,OAAD,IAAc,qCAAoCA,OAAQ;AAD7B,CAAX,CAA7B;;AAIA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AACnB,SAAO,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,YAAY,GAAGT,eAAe,CAACQ,MAAD,EAASP,QAAT,EAAmB;AACtDS,MAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,MAAAA,QAAQ,EAAE,CAACjB,CAAC,CAACkB,QAAH,EAAalB,CAAC,CAACmB,QAAf;AAF4C,KAAnB,CAApC;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AAClB;AACA;;AAEDD,IAAAA,MAAM,CAACM,IAAP,CAAa,IAAGb,QAAS,oEAAzB,EAA8F;AAC7Fc,MAAAA,aAAa,EAAE,aAD8E;AAE7FC,MAAAA,kBAAkB,EAAG,gEAA+Df,QAAS;AAFA,KAA9F;AAKAM,IAAAA,IAAI,CAACU,YAAL,CAAmBC,OAAD,IAAa;AAC9B,YAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;AACA,YAAMC,UAAU,GAAGF,OAAO,CAACG,QAAR,EAAnB;AACA,YAAMC,cAAc,GAAGF,UAAU,CAACG,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAAvB,CAH8B,CAK9B;;AACA,UAAID,cAAc,KAAK,MAAvB,EAA+B;AAC9B;AACA;;AAED,YAAME,WAAW,GAAG3B,qBAAqB,CAACsB,IAAD,EAAOb,IAAP,CAArB,IAAqCV,cAAc,CAACuB,IAAD,EAAOb,IAAP,CAAvE;;AAEA,UAAI,CAACkB,WAAL,EAAkB;AACjB;AACA;;AAED1B,MAAAA,MAAM,CAAC;AACN2B,QAAAA,OAAO,EAAEvB,QAAQ,CAACC,QAAT,CAAkBqB,WAAW,CAACpB,OAA9B,CADH;AAENsB,QAAAA,IAAI,EAAER,OAFA;AAGNV,QAAAA,MAHM;AAINP,QAAAA;AAJM,OAAD,CAAN;AAMA,KAtBD;AAuBA,GAtCD;AAuCA;;AAEDI,IAAI,CAACsB,kBAAL,GAA0B,IAA1B;AAEAtB,IAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAG,IAAI,CAACuB,IAAL,GAAY;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst containsString = require('../../utils/containsString');\nconst matchesStringOrRegExp = require('../../utils/matchesStringOrRegExp');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'comment-word-blacklist';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (pattern) => `Unexpected word matching pattern \"${pattern}\"`,\n});\n\nfunction rule(list) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: list,\n\t\t\tpossible: [_.isString, _.isRegExp],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.warn(`'${ruleName}' has been deprecated. Instead use 'comment-word-disallowed-list'.`, {\n\t\t\tstylelintType: 'deprecation',\n\t\t\tstylelintReference: `https://github.com/stylelint/stylelint/blob/13.7.0/lib/rules/${ruleName}/README.md`,\n\t\t});\n\n\t\troot.walkComments((comment) => {\n\t\t\tconst text = comment.text;\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.substr(0, 4);\n\n\t\t\t// Return early if sourcemap\n\t\t\tif (firstFourChars === '/*# ') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchesWord = matchesStringOrRegExp(text, list) || containsString(text, list);\n\n\t\t\tif (!matchesWord) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.rejected(matchesWord.pattern),\n\t\t\t\tnode: comment,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.primaryOptionArray = true;\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = { deprecated: true };\n\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}