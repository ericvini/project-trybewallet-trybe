{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst _ = require('lodash');\n\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\n\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\n\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst styleSearch = require('style-search');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'value-no-vendor-prefix';\nconst messages = ruleMessages(ruleName, {\n  rejected: value => `Unexpected vendor-prefix \"${value}\"`\n});\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\nfunction rule(actual, options, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      optional: true,\n      actual: options,\n      possible: {\n        ignoreValues: [_.isString]\n      }\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      if (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop) || !decl.value.startsWith('-')) {\n        return;\n      }\n\n      const prop = decl.prop;\n      const value = decl.value;\n      const unprefixedValue = vendor.unprefixed(value); //return early if value is to be ignored\n\n      if (optionsMatches(options, 'ignoreValues', unprefixedValue)) {\n        return;\n      } // Search the full declaration in order to get an accurate index\n\n\n      styleSearch({\n        source: value.toLowerCase(),\n        target: valuePrefixes\n      }, match => {\n        const fullIdentifier = /^(-[a-z-]+)\\b/i.exec(value.slice(match.startIndex))[1];\n\n        if (!isAutoprefixable.propertyValue(prop, fullIdentifier)) {\n          return;\n        }\n\n        if (context.fix) {\n          decl.value = isAutoprefixable.unprefix(decl.value);\n          return;\n        }\n\n        report({\n          message: messages.rejected(fullIdentifier),\n          node: decl,\n          index: prop.length + (decl.raws.between || '').length + match.startIndex,\n          result,\n          ruleName\n        });\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.js"],"names":["_","require","isAutoprefixable","isStandardSyntaxDeclaration","isStandardSyntaxProperty","optionsMatches","report","ruleMessages","styleSearch","validateOptions","vendor","ruleName","messages","rejected","value","valuePrefixes","rule","actual","options","context","root","result","validOptions","optional","possible","ignoreValues","isString","walkDecls","decl","prop","startsWith","unprefixedValue","unprefixed","source","toLowerCase","target","match","fullIdentifier","exec","slice","startIndex","propertyValue","fix","unprefix","message","node","index","length","raws","between","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst _ = require('lodash');\nconst isAutoprefixable = require('../../utils/isAutoprefixable');\nconst isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration');\nconst isStandardSyntaxProperty = require('../../utils/isStandardSyntaxProperty');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst styleSearch = require('style-search');\nconst validateOptions = require('../../utils/validateOptions');\nconst vendor = require('../../utils/vendor');\n\nconst ruleName = 'value-no-vendor-prefix';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: (value) => `Unexpected vendor-prefix \"${value}\"`,\n});\n\nconst valuePrefixes = ['-webkit-', '-moz-', '-ms-', '-o-'];\n\nfunction rule(actual, options, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\toptional: true,\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreValues: [_.isString],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (\n\t\t\t\t!isStandardSyntaxDeclaration(decl) ||\n\t\t\t\t!isStandardSyntaxProperty(decl.prop) ||\n\t\t\t\t!decl.value.startsWith('-')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst prop = decl.prop;\n\t\t\tconst value = decl.value;\n\t\t\tconst unprefixedValue = vendor.unprefixed(value);\n\n\t\t\t//return early if value is to be ignored\n\t\t\tif (optionsMatches(options, 'ignoreValues', unprefixedValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Search the full declaration in order to get an accurate index\n\n\t\t\tstyleSearch({ source: value.toLowerCase(), target: valuePrefixes }, (match) => {\n\t\t\t\tconst fullIdentifier = /^(-[a-z-]+)\\b/i.exec(value.slice(match.startIndex))[1];\n\n\t\t\t\tif (!isAutoprefixable.propertyValue(prop, fullIdentifier)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tdecl.value = isAutoprefixable.unprefix(decl.value);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.rejected(fullIdentifier),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: prop.length + (decl.raws.between || '').length + match.startIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}