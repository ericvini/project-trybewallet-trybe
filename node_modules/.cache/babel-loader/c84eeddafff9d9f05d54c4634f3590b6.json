{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * @typedef {string} cell\n */\n\n/**\n * @typedef {cell[]} validateData~column\n */\n\n/**\n * @param {column[]} rows\n * @returns {undefined}\n */\n\nconst validateTableData = rows => {\n  if (!Array.isArray(rows)) {\n    throw new TypeError('Table data must be an array.');\n  }\n\n  if (rows.length === 0) {\n    throw new Error('Table must define at least one row.');\n  }\n\n  if (rows[0].length === 0) {\n    throw new Error('Table must define at least one column.');\n  }\n\n  const columnNumber = rows[0].length;\n\n  for (const cells of rows) {\n    if (!Array.isArray(cells)) {\n      throw new TypeError('Table row data must be an array.');\n    }\n\n    if (cells.length !== columnNumber) {\n      throw new Error('Table must have a consistent number of cells.');\n    }\n\n    for (const cell of cells) {\n      // eslint-disable-next-line no-control-regex\n      if (/[\\u0001-\\u0006\\u0008\\u0009\\u000B-\\u001A]/.test(cell)) {\n        throw new Error('Table data must not contain control characters.');\n      }\n    }\n  }\n};\n\nvar _default = validateTableData;\nexports.default = _default;","map":{"version":3,"sources":["../src/validateTableData.js"],"names":["rows","Array","columnNumber","cells"],"mappings":";;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;0BACgBA,I,IAAS;AACvB,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,IAAKA,CAAL,EAA0B;AACxB,UAAM,IAAA,SAAA,CAAN,8BAAM,CAAN;AACD;;AAED,MAAID,IAAI,CAAJA,MAAAA,KAAJ,CAAA,EAAuB;AACrB,UAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;AAED,MAAIA,IAAI,CAAJA,CAAI,CAAJA,CAAAA,MAAAA,KAAJ,CAAA,EAA0B;AACxB,UAAM,IAAA,KAAA,CAAN,wCAAM,CAAN;AACD;;AAED,QAAME,YAAY,GAAGF,IAAI,CAAJA,CAAI,CAAJA,CAArB,MAAA;;AAEA,OAAK,MAAL,KAAA,IAAA,IAAA,EAA0B;AACxB,QAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,KAAKA,CAAL,EAA2B;AACzB,YAAM,IAAA,SAAA,CAAN,kCAAM,CAAN;AACD;;AAED,QAAIE,KAAK,CAALA,MAAAA,KAAJ,YAAA,EAAmC;AACjC,YAAM,IAAA,KAAA,CAAN,+CAAM,CAAN;AACD;;AAED,SAAK,MAAL,IAAA,IAAA,KAAA,EAA0B;AACxB;AACA,UAAI,2CAAA,IAAA,CAAJ,IAAI,CAAJ,EAA2D;AACzD,cAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;AACD;AACF;AACF","sourcesContent":["/**\n * @typedef {string} cell\n */\n\n/**\n * @typedef {cell[]} validateData~column\n */\n\n/**\n * @param {column[]} rows\n * @returns {undefined}\n */\nexport default (rows) => {\n  if (!Array.isArray(rows)) {\n    throw new TypeError('Table data must be an array.');\n  }\n\n  if (rows.length === 0) {\n    throw new Error('Table must define at least one row.');\n  }\n\n  if (rows[0].length === 0) {\n    throw new Error('Table must define at least one column.');\n  }\n\n  const columnNumber = rows[0].length;\n\n  for (const cells of rows) {\n    if (!Array.isArray(cells)) {\n      throw new TypeError('Table row data must be an array.');\n    }\n\n    if (cells.length !== columnNumber) {\n      throw new Error('Table must have a consistent number of cells.');\n    }\n\n    for (const cell of cells) {\n      // eslint-disable-next-line no-control-regex\n      if (/[\\u0001-\\u0006\\u0008\\u0009\\u000B-\\u001A]/.test(cell)) {\n        throw new Error('Table data must not contain control characters.');\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}