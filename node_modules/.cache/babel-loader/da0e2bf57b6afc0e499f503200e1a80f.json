{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst findFontFamily = require('../../utils/findFontFamily');\n\nconst isVariable = require('../../utils/isVariable');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst postcss = require('postcss');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst _ = require('lodash');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\nconst messages = ruleMessages(ruleName, {\n  rejected: 'Unexpected missing generic font family'\n});\n\nconst isFamilyNameKeyword = node => !node.quote && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\nfunction rule(actual, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual\n    }, {\n      actual: options,\n      possible: {\n        ignoreFontFamilies: [_.isString, _.isRegExp]\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(/^font(-family)?$/i, decl => {\n      // Ignore @font-face\n      if (decl.parent && decl.parent.type === 'atrule' && decl.parent.name.toLowerCase() === 'font-face') {\n        return;\n      }\n\n      if (decl.prop === 'font' && keywordSets.systemFontValues.has(decl.value.toLowerCase())) {\n        return;\n      }\n\n      const fontFamilies = findFontFamily(decl.value);\n\n      if (fontFamilies.length === 0) {\n        return;\n      }\n\n      if (fontFamilies.some(isFamilyNameKeyword)) {\n        return;\n      }\n\n      if (postcss.list.space(decl.value).some(isVariable)) {\n        return;\n      }\n\n      if (fontFamilies.some(node => optionsMatches(options, 'ignoreFontFamilies', node.value))) {\n        return;\n      }\n\n      report({\n        result,\n        ruleName,\n        message: messages.rejected,\n        node: decl,\n        index: declarationValueIndex(decl) + fontFamilies[fontFamilies.length - 1].sourceIndex\n      });\n    });\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.js"],"names":["declarationValueIndex","require","findFontFamily","isVariable","keywordSets","optionsMatches","postcss","report","ruleMessages","validateOptions","_","ruleName","messages","rejected","isFamilyNameKeyword","node","quote","fontFamilyKeywords","has","value","toLowerCase","rule","actual","options","root","result","validOptions","possible","ignoreFontFamilies","isString","isRegExp","optional","walkDecls","decl","parent","type","name","prop","systemFontValues","fontFamilies","length","some","list","space","message","index","sourceIndex","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst findFontFamily = require('../../utils/findFontFamily');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst _ = require('lodash');\n\nconst ruleName = 'font-family-no-missing-generic-family-keyword';\n\nconst messages = ruleMessages(ruleName, {\n\trejected: 'Unexpected missing generic font family',\n});\n\nconst isFamilyNameKeyword = (node) =>\n\t!node.quote && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase());\n\nfunction rule(actual, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{ actual },\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignoreFontFamilies: [_.isString, _.isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls(/^font(-family)?$/i, (decl) => {\n\t\t\t// Ignore @font-face\n\t\t\tif (\n\t\t\t\tdecl.parent &&\n\t\t\t\tdecl.parent.type === 'atrule' &&\n\t\t\t\tdecl.parent.name.toLowerCase() === 'font-face'\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (decl.prop === 'font' && keywordSets.systemFontValues.has(decl.value.toLowerCase())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst fontFamilies = findFontFamily(decl.value);\n\n\t\t\tif (fontFamilies.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some(isFamilyNameKeyword)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (postcss.list.space(decl.value).some(isVariable)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fontFamilies.some((node) => optionsMatches(options, 'ignoreFontFamilies', node.value))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tmessage: messages.rejected,\n\t\t\t\tnode: decl,\n\t\t\t\tindex: declarationValueIndex(decl) + fontFamilies[fontFamilies.length - 1].sourceIndex,\n\t\t\t});\n\t\t});\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}