{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _calculateCellWidthIndex = _interopRequireDefault(require(\"./calculateCellWidthIndex\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Produces an array of values that describe the largest value length (width) in every column.\n *\n * @param {Array[]} rows\n * @returns {number[]}\n */\n\n\nconst calculateMaximumColumnWidthIndex = rows => {\n  if (!rows[0]) {\n    throw new Error('Dataset must have at least one row.');\n  }\n\n  const columns = new Array(rows[0].length).fill(0);\n  rows.forEach(row => {\n    const columnWidthIndex = (0, _calculateCellWidthIndex.default)(row);\n    columnWidthIndex.forEach((valueWidth, index0) => {\n      if (columns[index0] < valueWidth) {\n        columns[index0] = valueWidth;\n      }\n    });\n  });\n  return columns;\n};\n\nvar _default = calculateMaximumColumnWidthIndex;\nexports.default = _default;","map":{"version":3,"sources":["../src/calculateMaximumColumnWidthIndex.js"],"names":["rows","columns","row","columnWidthIndex"],"mappings":";;;;;;;AAAA,IAAA,wBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;yCACgBA,I,IAAS;AACvB,MAAI,CAACA,IAAI,CAAT,CAAS,CAAT,EAAc;AACZ,UAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;AAED,QAAMC,OAAO,GAAG,IAAA,KAAA,CAAUD,IAAI,CAAJA,CAAI,CAAJA,CAAV,MAAA,EAAA,IAAA,CAAhB,CAAgB,CAAhB;AAEAA,EAAAA,IAAI,CAAJA,OAAAA,CAAcE,GAAD,IAAS;AACpB,UAAMC,gBAAgB,GAAG,CAAA,GAAA,wBAAA,CAAA,OAAA,EAAzB,GAAyB,CAAzB;AAEAA,IAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAA,UAAA,EAAA,MAAA,KAAwB;AAC/C,UAAIF,OAAO,CAAPA,MAAO,CAAPA,GAAJ,UAAA,EAAkC;AAChCA,QAAAA,OAAO,CAAPA,MAAO,CAAPA,GAAAA,UAAAA;AACD;AAHHE,KAAAA;AAHFH,GAAAA;AAUA,SAAA,OAAA","sourcesContent":["import calculateCellWidthIndex from './calculateCellWidthIndex';\n\n/**\n * Produces an array of values that describe the largest value length (width) in every column.\n *\n * @param {Array[]} rows\n * @returns {number[]}\n */\nexport default (rows) => {\n  if (!rows[0]) {\n    throw new Error('Dataset must have at least one row.');\n  }\n\n  const columns = new Array(rows[0].length).fill(0);\n\n  rows.forEach((row) => {\n    const columnWidthIndex = calculateCellWidthIndex(row);\n\n    columnWidthIndex.forEach((valueWidth, index0) => {\n      if (columns[index0] < valueWidth) {\n        columns[index0] = valueWidth;\n      }\n    });\n  });\n\n  return columns;\n};\n"]},"metadata":{},"sourceType":"script"}