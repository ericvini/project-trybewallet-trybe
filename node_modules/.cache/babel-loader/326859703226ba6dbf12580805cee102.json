{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n/** @typedef {false | { match: string, pattern: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @param {string} input\n * @param {string | string[]} comparison\n *\n * @returns {ReturnValue}\n */\n\n\nmodule.exports = function containsString(input, comparison) {\n  if (!Array.isArray(comparison)) {\n    return testAgainstString(input, comparison);\n  }\n\n  for (const comparisonItem of comparison) {\n    const testResult = testAgainstString(input, comparisonItem);\n\n    if (testResult) {\n      return testResult;\n    }\n  }\n\n  return false;\n};\n/**\n *\n * @param {string} value\n * @param {string} comparison\n *\n * @returns {ReturnValue}\n */\n\n\nfunction testAgainstString(value, comparison) {\n  if (!comparison) return false;\n  if (!_.isString(comparison)) return false;\n\n  if (comparison.startsWith('/') && comparison.endsWith('/')) {\n    return false;\n  }\n\n  if (value.includes(comparison)) {\n    return {\n      match: value,\n      pattern: comparison\n    };\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/utils/containsString.js"],"names":["_","require","module","exports","containsString","input","comparison","Array","isArray","testAgainstString","comparisonItem","testResult","value","isString","startsWith","endsWith","includes","match","pattern"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AAC3D,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC;AAC/B,WAAOG,iBAAiB,CAACJ,KAAD,EAAQC,UAAR,CAAxB;AACA;;AAED,OAAK,MAAMI,cAAX,IAA6BJ,UAA7B,EAAyC;AACxC,UAAMK,UAAU,GAAGF,iBAAiB,CAACJ,KAAD,EAAQK,cAAR,CAApC;;AAEA,QAAIC,UAAJ,EAAgB;AACf,aAAOA,UAAP;AACA;AACD;;AAED,SAAO,KAAP;AACA,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,iBAAT,CAA2BG,KAA3B,EAAkCN,UAAlC,EAA8C;AAC7C,MAAI,CAACA,UAAL,EAAiB,OAAO,KAAP;AAEjB,MAAI,CAACN,CAAC,CAACa,QAAF,CAAWP,UAAX,CAAL,EAA6B,OAAO,KAAP;;AAE7B,MAAIA,UAAU,CAACQ,UAAX,CAAsB,GAAtB,KAA8BR,UAAU,CAACS,QAAX,CAAoB,GAApB,CAAlC,EAA4D;AAC3D,WAAO,KAAP;AACA;;AAED,MAAIH,KAAK,CAACI,QAAN,CAAeV,UAAf,CAAJ,EAAgC;AAC/B,WAAO;AAAEW,MAAAA,KAAK,EAAEL,KAAT;AAAgBM,MAAAA,OAAO,EAAEZ;AAAzB,KAAP;AACA;;AAED,SAAO,KAAP;AACA","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\n/** @typedef {false | { match: string, pattern: string }} ReturnValue */\n\n/**\n * Checks if a string contains a value. The comparison value can be a string or\n * an array of strings.\n *\n * Any strings starting and ending with `/` are ignored. Use the\n * matchesStringOrRegExp() util to match regexes.\n *\n * @param {string} input\n * @param {string | string[]} comparison\n *\n * @returns {ReturnValue}\n */\nmodule.exports = function containsString(input, comparison) {\n\tif (!Array.isArray(comparison)) {\n\t\treturn testAgainstString(input, comparison);\n\t}\n\n\tfor (const comparisonItem of comparison) {\n\t\tconst testResult = testAgainstString(input, comparisonItem);\n\n\t\tif (testResult) {\n\t\t\treturn testResult;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n *\n * @param {string} value\n * @param {string} comparison\n *\n * @returns {ReturnValue}\n */\nfunction testAgainstString(value, comparison) {\n\tif (!comparison) return false;\n\n\tif (!_.isString(comparison)) return false;\n\n\tif (comparison.startsWith('/') && comparison.endsWith('/')) {\n\t\treturn false;\n\t}\n\n\tif (value.includes(comparison)) {\n\t\treturn { match: value, pattern: comparison };\n\t}\n\n\treturn false;\n}\n"]},"metadata":{},"sourceType":"script"}