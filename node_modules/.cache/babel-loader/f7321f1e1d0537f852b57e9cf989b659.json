{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExtensionDescription = getExtensionDescription;\nexports.ExplorerBase = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _loaders = require(\"./loaders\");\n\nvar _getPropertyByPath = require(\"./getPropertyByPath\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass ExplorerBase {\n  constructor(options) {\n    if (options.cache === true) {\n      this.loadCache = new Map();\n      this.searchCache = new Map();\n    }\n\n    this.config = options;\n    this.validateConfig();\n  }\n\n  clearLoadCache() {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n  }\n\n  clearSearchCache() {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n  }\n\n  clearCaches() {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n\n  validateConfig() {\n    const config = this.config;\n    config.searchPlaces.forEach(place => {\n      const loaderKey = _path.default.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n\n      if (!loader) {\n        throw new Error(`No loader specified for ${getExtensionDescription(place)}, so searchPlaces item \"${place}\" is invalid`);\n      }\n\n      if (typeof loader !== 'function') {\n        throw new Error(`loader for ${getExtensionDescription(place)} is not a function (type provided: \"${typeof loader}\"), so searchPlaces item \"${place}\" is invalid`);\n      }\n    });\n  }\n\n  shouldSearchStopWithResult(result) {\n    if (result === null) return false;\n    if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;\n    return true;\n  }\n\n  nextDirectoryToSearch(currentDir, currentResult) {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n\n    const nextDir = nextDirUp(currentDir);\n\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n\n    return nextDir;\n  }\n\n  loadPackageProp(filepath, content) {\n    const parsedContent = _loaders.loaders.loadJson(filepath, content);\n\n    const packagePropValue = (0, _getPropertyByPath.getPropertyByPath)(parsedContent, this.config.packageProp);\n    return packagePropValue || null;\n  }\n\n  getLoaderEntryForFile(filepath) {\n    if (_path.default.basename(filepath) === 'package.json') {\n      const loader = this.loadPackageProp.bind(this);\n      return loader;\n    }\n\n    const loaderKey = _path.default.extname(filepath) || 'noExt';\n    const loader = this.config.loaders[loaderKey];\n\n    if (!loader) {\n      throw new Error(`No loader specified for ${getExtensionDescription(filepath)}`);\n    }\n\n    return loader;\n  }\n\n  loadedContentToCosmiconfigResult(filepath, loadedContent) {\n    if (loadedContent === null) {\n      return null;\n    }\n\n    if (loadedContent === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n\n    return {\n      config: loadedContent,\n      filepath\n    };\n  }\n\n  validateFilePath(filepath) {\n    if (!filepath) {\n      throw new Error('load must pass a non-empty string');\n    }\n  }\n\n}\n\nexports.ExplorerBase = ExplorerBase;\n\nfunction nextDirUp(dir) {\n  return _path.default.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath) {\n  const ext = _path.default.extname(filepath);\n\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}","map":{"version":3,"sources":["../src/ExplorerBase.ts"],"names":["constructor","options","clearLoadCache","clearSearchCache","clearCaches","validateConfig","config","place","loaderKey","path","loader","getExtensionDescription","shouldSearchStopWithResult","result","nextDirectoryToSearch","nextDir","nextDirUp","currentDir","loadPackageProp","parsedContent","loaders","packagePropValue","getLoaderEntryForFile","loadedContentToCosmiconfigResult","loadedContent","isEmpty","filepath","validateFilePath","ext"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { loaders } from './loaders';\nimport { getPropertyByPath } from './getPropertyByPath';\nimport {\n  CosmiconfigResult,\n  ExplorerOptions,\n  ExplorerOptionsSync,\n  Cache,\n  LoadedFileContent,\n} from './types';\nimport { Loader } from './index';\n\nclass ExplorerBase<T extends ExplorerOptions | ExplorerOptionsSync> {\n  protected readonly loadCache?: Cache;\n  protected readonly searchCache?: Cache;\n  protected readonly config: T;\n\n  public constructor(options: T) {\n    if (options.cache === true) {\n      this.loadCache = new Map();\n      this.searchCache = new Map();\n    }\n\n    this.config = options;\n    this.validateConfig();\n  }\n\n  public clearLoadCache(): void {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n  }\n\n  public clearSearchCache(): void {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n  }\n\n  public clearCaches(): void {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n\n  private validateConfig(): void {\n    const config = this.config;\n\n    config.searchPlaces.forEach((place): void => {\n      const loaderKey = path.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n      if (!loader) {\n        throw new Error(\n          `No loader specified for ${getExtensionDescription(\n            place,\n          )}, so searchPlaces item \"${place}\" is invalid`,\n        );\n      }\n\n      if (typeof loader !== 'function') {\n        throw new Error(\n          `loader for ${getExtensionDescription(\n            place,\n          )} is not a function (type provided: \"${typeof loader}\"), so searchPlaces item \"${place}\" is invalid`,\n        );\n      }\n    });\n  }\n\n  protected shouldSearchStopWithResult(result: CosmiconfigResult): boolean {\n    if (result === null) return false;\n    if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;\n    return true;\n  }\n\n  protected nextDirectoryToSearch(\n    currentDir: string,\n    currentResult: CosmiconfigResult,\n  ): string | null {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n    const nextDir = nextDirUp(currentDir);\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n    return nextDir;\n  }\n\n  private loadPackageProp(filepath: string, content: string): unknown {\n    const parsedContent = loaders.loadJson(filepath, content);\n    const packagePropValue = getPropertyByPath(\n      parsedContent,\n      this.config.packageProp,\n    );\n    return packagePropValue || null;\n  }\n\n  protected getLoaderEntryForFile(filepath: string): Loader {\n    if (path.basename(filepath) === 'package.json') {\n      const loader = this.loadPackageProp.bind(this);\n      return loader;\n    }\n\n    const loaderKey = path.extname(filepath) || 'noExt';\n\n    const loader = this.config.loaders[loaderKey];\n\n    if (!loader) {\n      throw new Error(\n        `No loader specified for ${getExtensionDescription(filepath)}`,\n      );\n    }\n\n    return loader;\n  }\n\n  protected loadedContentToCosmiconfigResult(\n    filepath: string,\n    loadedContent: LoadedFileContent,\n  ): CosmiconfigResult {\n    if (loadedContent === null) {\n      return null;\n    }\n    if (loadedContent === undefined) {\n      return { filepath, config: undefined, isEmpty: true };\n    }\n    return { config: loadedContent, filepath };\n  }\n\n  protected validateFilePath(filepath: string): void {\n    if (!filepath) {\n      throw new Error('load must pass a non-empty string');\n    }\n  }\n}\n\nfunction nextDirUp(dir: string): string {\n  return path.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath: string): string {\n  const ext = path.extname(filepath);\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}\n\nexport { ExplorerBase, getExtensionDescription };\n"]},"metadata":{},"sourceType":"script"}