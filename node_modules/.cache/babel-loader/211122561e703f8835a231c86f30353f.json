{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst isNumbery = require('../../utils/isNumbery');\n\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\n\nconst isVariable = require('../../utils/isVariable');\n\nconst keywordSets = require('../../reference/keywordSets');\n\nconst optionsMatches = require('../../utils/optionsMatches');\n\nconst postcss = require('postcss');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-weight-notation';\nconst messages = ruleMessages(ruleName, {\n  expected: type => `Expected ${type} font-weight notation`,\n  invalidNamed: name => `Unexpected invalid font-weight name \"${name}\"`\n});\nconst INHERIT_KEYWORD = 'inherit';\nconst INITIAL_KEYWORD = 'initial';\nconst NORMAL_KEYWORD = 'normal';\nconst WEIGHTS_WITH_KEYWORD_EQUIVALENTS = ['400', '700'];\n\nfunction rule(expectation, options) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['numeric', 'named-where-possible']\n    }, {\n      actual: options,\n      possible: {\n        ignore: ['relative']\n      },\n      optional: true\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      if (decl.prop.toLowerCase() === 'font-weight') {\n        checkWeight(decl.value, decl);\n      }\n\n      if (decl.prop.toLowerCase() === 'font') {\n        checkFont(decl);\n      }\n    });\n\n    function checkFont(decl) {\n      const valueList = postcss.list.space(decl.value); // We do not need to more carefully distinguish font-weight\n      // numbers from unitless line-heights because line-heights in\n      // `font` values need to be part of a font-size/line-height pair\n\n      const hasNumericFontWeight = valueList.some(isNumbery);\n\n      for (const value of postcss.list.space(decl.value)) {\n        if (value.toLowerCase() === NORMAL_KEYWORD && !hasNumericFontWeight || isNumbery(value) || value.toLowerCase() !== NORMAL_KEYWORD && keywordSets.fontWeightKeywords.has(value.toLowerCase())) {\n          checkWeight(value, decl);\n          return;\n        }\n      }\n    }\n\n    function checkWeight(weightValue, decl) {\n      if (!isStandardSyntaxValue(weightValue)) {\n        return;\n      }\n\n      if (isVariable(weightValue)) {\n        return;\n      }\n\n      if (weightValue.toLowerCase() === INHERIT_KEYWORD || weightValue.toLowerCase() === INITIAL_KEYWORD) {\n        return;\n      }\n\n      if (optionsMatches(options, 'ignore', 'relative') && keywordSets.fontWeightRelativeKeywords.has(weightValue.toLowerCase())) {\n        return;\n      }\n\n      const weightValueOffset = decl.value.indexOf(weightValue);\n\n      if (expectation === 'numeric') {\n        if (decl.parent.type === 'atrule' && decl.parent.name.toLowerCase() === 'font-face') {\n          const weightValueNumbers = postcss.list.space(weightValue);\n\n          if (!weightValueNumbers.every(isNumbery)) {\n            return complain(messages.expected('numeric'));\n          }\n\n          return;\n        }\n\n        if (!isNumbery(weightValue)) {\n          return complain(messages.expected('numeric'));\n        }\n      }\n\n      if (expectation === 'named-where-possible') {\n        if (isNumbery(weightValue)) {\n          if (WEIGHTS_WITH_KEYWORD_EQUIVALENTS.includes(weightValue)) {\n            complain(messages.expected('named'));\n          }\n\n          return;\n        }\n\n        if (!keywordSets.fontWeightKeywords.has(weightValue.toLowerCase()) && weightValue.toLowerCase() !== NORMAL_KEYWORD) {\n          return complain(messages.invalidNamed(weightValue));\n        }\n      }\n\n      function complain(message) {\n        report({\n          ruleName,\n          result,\n          message,\n          node: decl,\n          index: declarationValueIndex(decl) + weightValueOffset\n        });\n      }\n    }\n  };\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/rules/font-weight-notation/index.js"],"names":["declarationValueIndex","require","isNumbery","isStandardSyntaxValue","isVariable","keywordSets","optionsMatches","postcss","report","ruleMessages","validateOptions","ruleName","messages","expected","type","invalidNamed","name","INHERIT_KEYWORD","INITIAL_KEYWORD","NORMAL_KEYWORD","WEIGHTS_WITH_KEYWORD_EQUIVALENTS","rule","expectation","options","root","result","validOptions","actual","possible","ignore","optional","walkDecls","decl","prop","toLowerCase","checkWeight","value","checkFont","valueList","list","space","hasNumericFontWeight","some","fontWeightKeywords","has","weightValue","fontWeightRelativeKeywords","weightValueOffset","indexOf","parent","weightValueNumbers","every","complain","includes","message","node","index","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst isNumbery = require('../../utils/isNumbery');\nconst isStandardSyntaxValue = require('../../utils/isStandardSyntaxValue');\nconst isVariable = require('../../utils/isVariable');\nconst keywordSets = require('../../reference/keywordSets');\nconst optionsMatches = require('../../utils/optionsMatches');\nconst postcss = require('postcss');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'font-weight-notation';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (type) => `Expected ${type} font-weight notation`,\n\tinvalidNamed: (name) => `Unexpected invalid font-weight name \"${name}\"`,\n});\n\nconst INHERIT_KEYWORD = 'inherit';\nconst INITIAL_KEYWORD = 'initial';\nconst NORMAL_KEYWORD = 'normal';\nconst WEIGHTS_WITH_KEYWORD_EQUIVALENTS = ['400', '700'];\n\nfunction rule(expectation, options) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: expectation,\n\t\t\t\tpossible: ['numeric', 'named-where-possible'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: options,\n\t\t\t\tpossible: {\n\t\t\t\t\tignore: ['relative'],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'font-weight') {\n\t\t\t\tcheckWeight(decl.value, decl);\n\t\t\t}\n\n\t\t\tif (decl.prop.toLowerCase() === 'font') {\n\t\t\t\tcheckFont(decl);\n\t\t\t}\n\t\t});\n\n\t\tfunction checkFont(decl) {\n\t\t\tconst valueList = postcss.list.space(decl.value);\n\t\t\t// We do not need to more carefully distinguish font-weight\n\t\t\t// numbers from unitless line-heights because line-heights in\n\t\t\t// `font` values need to be part of a font-size/line-height pair\n\t\t\tconst hasNumericFontWeight = valueList.some(isNumbery);\n\n\t\t\tfor (const value of postcss.list.space(decl.value)) {\n\t\t\t\tif (\n\t\t\t\t\t(value.toLowerCase() === NORMAL_KEYWORD && !hasNumericFontWeight) ||\n\t\t\t\t\tisNumbery(value) ||\n\t\t\t\t\t(value.toLowerCase() !== NORMAL_KEYWORD &&\n\t\t\t\t\t\tkeywordSets.fontWeightKeywords.has(value.toLowerCase()))\n\t\t\t\t) {\n\t\t\t\t\tcheckWeight(value, decl);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction checkWeight(weightValue, decl) {\n\t\t\tif (!isStandardSyntaxValue(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isVariable(weightValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tweightValue.toLowerCase() === INHERIT_KEYWORD ||\n\t\t\t\tweightValue.toLowerCase() === INITIAL_KEYWORD\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\toptionsMatches(options, 'ignore', 'relative') &&\n\t\t\t\tkeywordSets.fontWeightRelativeKeywords.has(weightValue.toLowerCase())\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst weightValueOffset = decl.value.indexOf(weightValue);\n\n\t\t\tif (expectation === 'numeric') {\n\t\t\t\tif (decl.parent.type === 'atrule' && decl.parent.name.toLowerCase() === 'font-face') {\n\t\t\t\t\tconst weightValueNumbers = postcss.list.space(weightValue);\n\n\t\t\t\t\tif (!weightValueNumbers.every(isNumbery)) {\n\t\t\t\t\t\treturn complain(messages.expected('numeric'));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isNumbery(weightValue)) {\n\t\t\t\t\treturn complain(messages.expected('numeric'));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (expectation === 'named-where-possible') {\n\t\t\t\tif (isNumbery(weightValue)) {\n\t\t\t\t\tif (WEIGHTS_WITH_KEYWORD_EQUIVALENTS.includes(weightValue)) {\n\t\t\t\t\t\tcomplain(messages.expected('named'));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!keywordSets.fontWeightKeywords.has(weightValue.toLowerCase()) &&\n\t\t\t\t\tweightValue.toLowerCase() !== NORMAL_KEYWORD\n\t\t\t\t) {\n\t\t\t\t\treturn complain(messages.invalidNamed(weightValue));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction complain(message) {\n\t\t\t\treport({\n\t\t\t\t\truleName,\n\t\t\t\t\tresult,\n\t\t\t\t\tmessage,\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + weightValueOffset,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}