{"ast":null,"code":"// A simple implementation of make-array\nfunction makeArray(subject) {\n  return Array.isArray(subject) ? subject : [subject];\n}\n\nconst EMPTY = '';\nconst SPACE = ' ';\nconst ESCAPE = '\\\\';\nconst REGEX_TEST_BLANK_LINE = /^\\s+$/;\nconst REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/;\nconst REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\\\#/;\nconst REGEX_SPLITALL_CRLF = /\\r?\\n/g; // /foo,\n// ./foo,\n// ../foo,\n// .\n// ..\n\nconst REGEX_TEST_INVALID_PATH = /^\\.*\\/|^\\.+$/;\nconst SLASH = '/';\nconst KEY_IGNORE = typeof Symbol !== 'undefined' ? Symbol.for('node-ignore')\n/* istanbul ignore next */\n: 'node-ignore';\n\nconst define = (object, key, value) => Object.defineProperty(object, key, {\n  value\n});\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g; // Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\n\nconst sanitizeRange = range => range.replace(REGEX_REGEXP_RANGE, (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match // Invalid range (out of order) which is ok for gitignore rules but\n//   fatal for JavaScript regular expression, so eliminate it.\n: EMPTY); // See fixtures #59\n\n\nconst cleanRangeBackSlash = slashes => {\n  const {\n    length\n  } = slashes;\n  return slashes.slice(0, length - length % 2);\n}; // > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n// '`foo/`' should not continue with the '`..`'\n\n\nconst REPLACERS = [// > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n[// (a\\ ) -> (a )\n// (a  ) -> (a)\n// (a \\ ) -> (a  )\n/\\\\?\\s+$/, match => match.indexOf('\\\\') === 0 ? SPACE : EMPTY], // replace (\\ ) with ' '\n[/\\\\\\s/g, () => SPACE], // Escape metacharacters\n// which is written down by users but means special for regular expressions.\n// > There are 12 characters with special meanings:\n// > - the backslash \\,\n// > - the caret ^,\n// > - the dollar sign $,\n// > - the period or dot .,\n// > - the vertical bar or pipe symbol |,\n// > - the question mark ?,\n// > - the asterisk or star *,\n// > - the plus sign +,\n// > - the opening parenthesis (,\n// > - the closing parenthesis ),\n// > - and the opening square bracket [,\n// > - the opening curly brace {,\n// > These special characters are often called \"metacharacters\".\n[/[\\\\$.|*+(){^]/g, match => `\\\\${match}`], [// > a question mark (?) matches a single character\n/(?!\\\\)\\?/g, () => '[^/]'], // leading slash\n[// > A leading slash matches the beginning of the pathname.\n// > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n// A leading slash matches the beginning of the pathname\n/^\\//, () => '^'], // replace special metacharacter slash after the leading slash\n[/\\//g, () => '\\\\/'], [// > A leading \"**\" followed by a slash means match in all directories.\n// > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n// > the same as pattern \"foo\".\n// > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n// >   under directory \"foo\".\n// Notice that the '*'s have been replaced as '\\\\*'\n/^\\^*\\\\\\*\\\\\\*\\\\\\//, // '**/foo' <-> 'foo'\n() => '^(?:.*\\\\/)?'], // starting\n[// there will be no leading '/'\n//   (which has been replaced by section \"leading slash\")\n// If starts with '**', adding a '^' to the regular expression also works\n/^(?=[^^])/, function startingReplacer() {\n  // If has a slash `/` at the beginning or middle\n  return !/\\/(?!$)/.test(this) // > Prior to 2.22.1\n  // > If the pattern does not contain a slash /,\n  // >   Git treats it as a shell glob pattern\n  // Actually, if there is only a trailing slash,\n  //   git also treats it as a shell glob pattern\n  // After 2.22.1 (compatible but clearer)\n  // > If there is a separator at the beginning or middle (or both)\n  // > of the pattern, then the pattern is relative to the directory\n  // > level of the particular .gitignore file itself.\n  // > Otherwise the pattern may also match at any level below\n  // > the .gitignore level.\n  ? '(?:^|\\\\/)' // > Otherwise, Git treats the pattern as a shell glob suitable for\n  // >   consumption by fnmatch(3)\n  : '^';\n}], // two globstars\n[// Use lookahead assertions so that we could match more than one `'/**'`\n/\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g, // Zero, one or several directories\n// should not use '*', or it will be replaced by the next replacer\n// Check if it is not the last `'/**'`\n(_, index, str) => index + 6 < str.length // case: /**/\n// > A slash followed by two consecutive asterisks then a slash matches\n// >   zero or more directories.\n// > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n// '/**/'\n? '(?:\\\\/[^\\\\/]+)*' // case: /**\n// > A trailing `\"/**\"` matches everything inside.\n// #21: everything inside but it should not include the current folder\n: '\\\\/.+'], // intermediate wildcards\n[// Never replace escaped '*'\n// ignore rule '\\*' will match the path '*'\n// 'abc.*/' -> go\n// 'abc.*'  -> skip this rule\n/(^|[^\\\\]+)\\\\\\*(?=.+)/g, // '*.js' matches '.js'\n// '*.js' doesn't match 'abc'\n(_, p1) => `${p1}[^\\\\/]*`], [// unescape, revert step 3 except for back slash\n// For example, if a user escape a '\\\\*',\n// after step 3, the result will be '\\\\\\\\\\\\*'\n/\\\\\\\\\\\\(?=[$.|*+(){^])/g, () => ESCAPE], [// '\\\\\\\\' -> '\\\\'\n/\\\\\\\\/g, () => ESCAPE], [// > The range notation, e.g. [a-zA-Z],\n// > can be used to match one of the characters in a range.\n// `\\` is escaped by step 3\n/(\\\\)?\\[([^\\]/]*?)(\\\\*)($|\\])/g, (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE // '\\\\[bar]' -> '\\\\\\\\[bar\\\\]'\n? `\\\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === ']' ? endEscape.length % 2 === 0 // A normal case, and it is a range notation\n// '[bar]'\n// '[bar\\\\\\\\]'\n? `[${sanitizeRange(range)}${endEscape}]` // Invalid range notaton\n// '[bar\\\\]' -> '[bar\\\\\\\\]'\n: '[]' : '[]'], // ending\n[// 'js' will not match 'js.'\n// 'ab' will not match 'abc'\n/(?:[^*])$/, // WTF!\n// https://git-scm.com/docs/gitignore\n// changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)\n// which re-fixes #24, #38\n// > If there is a separator at the end of the pattern then the pattern\n// > will only match directories, otherwise the pattern can match both\n// > files and directories.\n// 'js*' will not match 'a.js'\n// 'js/' will not match 'a.js'\n// 'js' will match 'a.js' and 'a.js/'\nmatch => /\\/$/.test(match) // foo/ will not match 'foo'\n? `${match}$` // foo matches 'foo' and 'foo/'\n: `${match}(?=$|\\\\/$)`], // trailing wildcard\n[/(\\^|\\\\\\/)?\\\\\\*$/, (_, p1) => {\n  const prefix = p1 // '\\^':\n  // '/*' does not match EMPTY\n  // '/*' does not match everything\n  // '\\\\\\/':\n  // 'abc/*' does not match 'abc/'\n  ? `${p1}[^/]+` // 'a*' matches 'a'\n  // 'a*' matches 'aa'\n  : '[^/]*';\n  return `${prefix}(?=$|\\\\/$)`;\n}]]; // A simple cache, because an ignore rule only has only one certain meaning\n\nconst regexCache = Object.create(null); // @param {pattern}\n\nconst makeRegex = (pattern, negative, ignorecase) => {\n  const r = regexCache[pattern];\n\n  if (r) {\n    return r;\n  } // const replacers = negative\n  //   ? NEGATIVE_REPLACERS\n  //   : POSITIVE_REPLACERS\n\n\n  const source = REPLACERS.reduce((prev, current) => prev.replace(current[0], current[1].bind(pattern)), pattern);\n  return regexCache[pattern] = ignorecase ? new RegExp(source, 'i') : new RegExp(source);\n};\n\nconst isString = subject => typeof subject === 'string'; // > A blank line matches no files, so it can serve as a separator for readability.\n\n\nconst checkPattern = pattern => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) // > A line starting with # serves as a comment.\n&& pattern.indexOf('#') !== 0;\n\nconst splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF);\n\nclass IgnoreRule {\n  constructor(origin, pattern, negative, regex) {\n    this.origin = origin;\n    this.pattern = pattern;\n    this.negative = negative;\n    this.regex = regex;\n  }\n\n}\n\nconst createRule = (pattern, ignorecase) => {\n  const origin = pattern;\n  let negative = false; // > An optional prefix \"!\" which negates the pattern;\n\n  if (pattern.indexOf('!') === 0) {\n    negative = true;\n    pattern = pattern.substr(1);\n  }\n\n  pattern = pattern // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!') // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#');\n  const regex = makeRegex(pattern, negative, ignorecase);\n  return new IgnoreRule(origin, pattern, negative, regex);\n};\n\nconst throwError = (message, Ctor) => {\n  throw new Ctor(message);\n};\n\nconst checkPath = (path, originalPath, doThrow) => {\n  if (!isString(path)) {\n    return doThrow(`path must be a string, but got \\`${originalPath}\\``, TypeError);\n  } // We don't know if we should ignore EMPTY, so throw\n\n\n  if (!path) {\n    return doThrow(`path must not be empty`, TypeError);\n  } // Check if it is a relative path\n\n\n  if (checkPath.isNotRelative(path)) {\n    const r = '`path.relative()`d';\n    return doThrow(`path should be a ${r} string, but got \"${originalPath}\"`, RangeError);\n  }\n\n  return true;\n};\n\nconst isNotRelative = path => REGEX_TEST_INVALID_PATH.test(path);\n\ncheckPath.isNotRelative = isNotRelative;\n\ncheckPath.convert = p => p;\n\nclass Ignore {\n  constructor({\n    ignorecase = true\n  } = {}) {\n    this._rules = [];\n    this._ignorecase = ignorecase;\n    define(this, KEY_IGNORE, true);\n\n    this._initCache();\n  }\n\n  _initCache() {\n    this._ignoreCache = Object.create(null);\n    this._testCache = Object.create(null);\n  }\n\n  _addPattern(pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules);\n      this._added = true;\n      return;\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignorecase);\n      this._added = true;\n\n      this._rules.push(rule);\n    }\n  } // @param {Array<string> | string | Ignore} pattern\n\n\n  add(pattern) {\n    this._added = false;\n    makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(this._addPattern, this); // Some rules have just added to the ignore,\n    // making the behavior changed.\n\n    if (this._added) {\n      this._initCache();\n    }\n\n    return this;\n  } // legacy\n\n\n  addPattern(pattern) {\n    return this.add(pattern);\n  } //          |           ignored : unignored\n  // negative |   0:0   |   0:1   |   1:0   |   1:1\n  // -------- | ------- | ------- | ------- | --------\n  //     0    |  TEST   |  TEST   |  SKIP   |    X\n  //     1    |  TESTIF |  SKIP   |  TEST   |    X\n  // - SKIP: always skip\n  // - TEST: always test\n  // - TESTIF: only test if checkUnignored\n  // - X: that never happen\n  // @param {boolean} whether should check if the path is unignored,\n  //   setting `checkUnignored` to `false` could reduce additional\n  //   path matching.\n  // @returns {TestResult} true if a file is ignored\n\n\n  _testOne(path, checkUnignored) {\n    let ignored = false;\n    let unignored = false;\n\n    this._rules.forEach(rule => {\n      const {\n        negative\n      } = rule;\n\n      if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {\n        return;\n      }\n\n      const matched = rule.regex.test(path);\n\n      if (matched) {\n        ignored = !negative;\n        unignored = negative;\n      }\n    });\n\n    return {\n      ignored,\n      unignored\n    };\n  } // @returns {TestResult}\n\n\n  _test(originalPath, cache, checkUnignored, slices) {\n    const path = originalPath // Supports nullable path\n    && checkPath.convert(originalPath);\n    checkPath(path, originalPath, throwError);\n    return this._t(path, cache, checkUnignored, slices);\n  }\n\n  _t(path, cache, checkUnignored, slices) {\n    if (path in cache) {\n      return cache[path];\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH);\n    }\n\n    slices.pop(); // If the path has no parent directory, just test it\n\n    if (!slices.length) {\n      return cache[path] = this._testOne(path, checkUnignored);\n    }\n\n    const parent = this._t(slices.join(SLASH) + SLASH, cache, checkUnignored, slices); // If the path contains a parent directory, check the parent first\n\n\n    return cache[path] = parent.ignored // > It is not possible to re-include a file if a parent directory of\n    // >   that file is excluded.\n    ? parent : this._testOne(path, checkUnignored);\n  }\n\n  ignores(path) {\n    return this._test(path, this._ignoreCache, false).ignored;\n  }\n\n  createFilter() {\n    return path => !this.ignores(path);\n  }\n\n  filter(paths) {\n    return makeArray(paths).filter(this.createFilter());\n  } // @returns {TestResult}\n\n\n  test(path) {\n    return this._test(path, this._testCache, true);\n  }\n\n}\n\nconst factory = options => new Ignore(options);\n\nconst returnFalse = () => false;\n\nconst isPathValid = path => checkPath(path && checkPath.convert(path), path, returnFalse);\n\nfactory.isPathValid = isPathValid; // Fixes typescript\n\nfactory.default = factory;\nmodule.exports = factory; // Windows\n// --------------------------------------------------------------\n\n/* istanbul ignore if  */\n\nif ( // Detect `process` so that it can run in browsers.\ntypeof process !== 'undefined' && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === 'win32')) {\n  /* eslint no-control-regex: \"off\" */\n  const makePosix = str => /^\\\\\\\\\\?\\\\/.test(str) || /[\"<>|\\u0000-\\u001F]+/u.test(str) ? str : str.replace(/\\\\/g, '/');\n\n  checkPath.convert = makePosix; // 'C:\\\\foo'     <- 'C:\\\\foo' has been converted to 'C:/'\n  // 'd:\\\\foo'\n\n  const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\\//i;\n\n  checkPath.isNotRelative = path => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path) || isNotRelative(path);\n}","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/node_modules/ignore/index.js"],"names":["makeArray","subject","Array","isArray","EMPTY","SPACE","ESCAPE","REGEX_TEST_BLANK_LINE","REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION","REGEX_REPLACE_LEADING_EXCAPED_HASH","REGEX_SPLITALL_CRLF","REGEX_TEST_INVALID_PATH","SLASH","KEY_IGNORE","Symbol","for","define","object","key","value","Object","defineProperty","REGEX_REGEXP_RANGE","sanitizeRange","range","replace","match","from","to","charCodeAt","cleanRangeBackSlash","slashes","length","slice","REPLACERS","indexOf","startingReplacer","test","_","index","str","p1","leadEscape","endEscape","close","prefix","regexCache","create","makeRegex","pattern","negative","ignorecase","r","source","reduce","prev","current","bind","RegExp","isString","checkPattern","splitPattern","split","IgnoreRule","constructor","origin","regex","createRule","substr","throwError","message","Ctor","checkPath","path","originalPath","doThrow","TypeError","isNotRelative","RangeError","convert","p","Ignore","_rules","_ignorecase","_initCache","_ignoreCache","_testCache","_addPattern","concat","_added","rule","push","add","forEach","addPattern","_testOne","checkUnignored","ignored","unignored","matched","_test","cache","slices","_t","pop","parent","join","ignores","createFilter","filter","paths","factory","options","returnFalse","isPathValid","default","module","exports","process","env","IGNORE_TEST_WIN32","platform","makePosix","REGIX_IS_WINDOWS_PATH_ABSOLUTE"],"mappings":"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","sourcesContent":["// A simple implementation of make-array\nfunction makeArray (subject) {\n  return Array.isArray(subject)\n    ? subject\n    : [subject]\n}\n\nconst EMPTY = ''\nconst SPACE = ' '\nconst ESCAPE = '\\\\'\nconst REGEX_TEST_BLANK_LINE = /^\\s+$/\nconst REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/\nconst REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\\\#/\nconst REGEX_SPLITALL_CRLF = /\\r?\\n/g\n// /foo,\n// ./foo,\n// ../foo,\n// .\n// ..\nconst REGEX_TEST_INVALID_PATH = /^\\.*\\/|^\\.+$/\n\nconst SLASH = '/'\nconst KEY_IGNORE = typeof Symbol !== 'undefined'\n  ? Symbol.for('node-ignore')\n  /* istanbul ignore next */\n  : 'node-ignore'\n\nconst define = (object, key, value) =>\n  Object.defineProperty(object, key, {value})\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g\n\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nconst sanitizeRange = range => range.replace(\n  REGEX_REGEXP_RANGE,\n  (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0)\n    ? match\n    // Invalid range (out of order) which is ok for gitignore rules but\n    //   fatal for JavaScript regular expression, so eliminate it.\n    : EMPTY\n)\n\n// See fixtures #59\nconst cleanRangeBackSlash = slashes => {\n  const {length} = slashes\n  return slashes.slice(0, length - length % 2)\n}\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\nconst REPLACERS = [\n\n  // > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n  [\n    // (a\\ ) -> (a )\n    // (a  ) -> (a)\n    // (a \\ ) -> (a  )\n    /\\\\?\\s+$/,\n    match => match.indexOf('\\\\') === 0\n      ? SPACE\n      : EMPTY\n  ],\n\n  // replace (\\ ) with ' '\n  [\n    /\\\\\\s/g,\n    () => SPACE\n  ],\n\n  // Escape metacharacters\n  // which is written down by users but means special for regular expressions.\n\n  // > There are 12 characters with special meanings:\n  // > - the backslash \\,\n  // > - the caret ^,\n  // > - the dollar sign $,\n  // > - the period or dot .,\n  // > - the vertical bar or pipe symbol |,\n  // > - the question mark ?,\n  // > - the asterisk or star *,\n  // > - the plus sign +,\n  // > - the opening parenthesis (,\n  // > - the closing parenthesis ),\n  // > - and the opening square bracket [,\n  // > - the opening curly brace {,\n  // > These special characters are often called \"metacharacters\".\n  [\n    /[\\\\$.|*+(){^]/g,\n    match => `\\\\${match}`\n  ],\n\n  [\n    // > a question mark (?) matches a single character\n    /(?!\\\\)\\?/g,\n    () => '[^/]'\n  ],\n\n  // leading slash\n  [\n\n    // > A leading slash matches the beginning of the pathname.\n    // > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n    // A leading slash matches the beginning of the pathname\n    /^\\//,\n    () => '^'\n  ],\n\n  // replace special metacharacter slash after the leading slash\n  [\n    /\\//g,\n    () => '\\\\/'\n  ],\n\n  [\n    // > A leading \"**\" followed by a slash means match in all directories.\n    // > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n    // > the same as pattern \"foo\".\n    // > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n    // >   under directory \"foo\".\n    // Notice that the '*'s have been replaced as '\\\\*'\n    /^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n    // '**/foo' <-> 'foo'\n    () => '^(?:.*\\\\/)?'\n  ],\n\n  // starting\n  [\n    // there will be no leading '/'\n    //   (which has been replaced by section \"leading slash\")\n    // If starts with '**', adding a '^' to the regular expression also works\n    /^(?=[^^])/,\n    function startingReplacer () {\n      // If has a slash `/` at the beginning or middle\n      return !/\\/(?!$)/.test(this)\n        // > Prior to 2.22.1\n        // > If the pattern does not contain a slash /,\n        // >   Git treats it as a shell glob pattern\n        // Actually, if there is only a trailing slash,\n        //   git also treats it as a shell glob pattern\n\n        // After 2.22.1 (compatible but clearer)\n        // > If there is a separator at the beginning or middle (or both)\n        // > of the pattern, then the pattern is relative to the directory\n        // > level of the particular .gitignore file itself.\n        // > Otherwise the pattern may also match at any level below\n        // > the .gitignore level.\n        ? '(?:^|\\\\/)'\n\n        // > Otherwise, Git treats the pattern as a shell glob suitable for\n        // >   consumption by fnmatch(3)\n        : '^'\n    }\n  ],\n\n  // two globstars\n  [\n    // Use lookahead assertions so that we could match more than one `'/**'`\n    /\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n    // Zero, one or several directories\n    // should not use '*', or it will be replaced by the next replacer\n\n    // Check if it is not the last `'/**'`\n    (_, index, str) => index + 6 < str.length\n\n      // case: /**/\n      // > A slash followed by two consecutive asterisks then a slash matches\n      // >   zero or more directories.\n      // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n      // '/**/'\n      ? '(?:\\\\/[^\\\\/]+)*'\n\n      // case: /**\n      // > A trailing `\"/**\"` matches everything inside.\n\n      // #21: everything inside but it should not include the current folder\n      : '\\\\/.+'\n  ],\n\n  // intermediate wildcards\n  [\n    // Never replace escaped '*'\n    // ignore rule '\\*' will match the path '*'\n\n    // 'abc.*/' -> go\n    // 'abc.*'  -> skip this rule\n    /(^|[^\\\\]+)\\\\\\*(?=.+)/g,\n\n    // '*.js' matches '.js'\n    // '*.js' doesn't match 'abc'\n    (_, p1) => `${p1}[^\\\\/]*`\n  ],\n\n  [\n    // unescape, revert step 3 except for back slash\n    // For example, if a user escape a '\\\\*',\n    // after step 3, the result will be '\\\\\\\\\\\\*'\n    /\\\\\\\\\\\\(?=[$.|*+(){^])/g,\n    () => ESCAPE\n  ],\n\n  [\n    // '\\\\\\\\' -> '\\\\'\n    /\\\\\\\\/g,\n    () => ESCAPE\n  ],\n\n  [\n    // > The range notation, e.g. [a-zA-Z],\n    // > can be used to match one of the characters in a range.\n\n    // `\\` is escaped by step 3\n    /(\\\\)?\\[([^\\]/]*?)(\\\\*)($|\\])/g,\n    (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE\n      // '\\\\[bar]' -> '\\\\\\\\[bar\\\\]'\n      ? `\\\\[${range}${cleanRangeBackSlash(endEscape)}${close}`\n      : close === ']'\n        ? endEscape.length % 2 === 0\n          // A normal case, and it is a range notation\n          // '[bar]'\n          // '[bar\\\\\\\\]'\n          ? `[${sanitizeRange(range)}${endEscape}]`\n          // Invalid range notaton\n          // '[bar\\\\]' -> '[bar\\\\\\\\]'\n          : '[]'\n        : '[]'\n  ],\n\n  // ending\n  [\n    // 'js' will not match 'js.'\n    // 'ab' will not match 'abc'\n    /(?:[^*])$/,\n\n    // WTF!\n    // https://git-scm.com/docs/gitignore\n    // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)\n    // which re-fixes #24, #38\n\n    // > If there is a separator at the end of the pattern then the pattern\n    // > will only match directories, otherwise the pattern can match both\n    // > files and directories.\n\n    // 'js*' will not match 'a.js'\n    // 'js/' will not match 'a.js'\n    // 'js' will match 'a.js' and 'a.js/'\n    match => /\\/$/.test(match)\n      // foo/ will not match 'foo'\n      ? `${match}$`\n      // foo matches 'foo' and 'foo/'\n      : `${match}(?=$|\\\\/$)`\n  ],\n\n  // trailing wildcard\n  [\n    /(\\^|\\\\\\/)?\\\\\\*$/,\n    (_, p1) => {\n      const prefix = p1\n        // '\\^':\n        // '/*' does not match EMPTY\n        // '/*' does not match everything\n\n        // '\\\\\\/':\n        // 'abc/*' does not match 'abc/'\n        ? `${p1}[^/]+`\n\n        // 'a*' matches 'a'\n        // 'a*' matches 'aa'\n        : '[^/]*'\n\n      return `${prefix}(?=$|\\\\/$)`\n    }\n  ],\n]\n\n// A simple cache, because an ignore rule only has only one certain meaning\nconst regexCache = Object.create(null)\n\n// @param {pattern}\nconst makeRegex = (pattern, negative, ignorecase) => {\n  const r = regexCache[pattern]\n  if (r) {\n    return r\n  }\n\n  // const replacers = negative\n  //   ? NEGATIVE_REPLACERS\n  //   : POSITIVE_REPLACERS\n\n  const source = REPLACERS.reduce(\n    (prev, current) => prev.replace(current[0], current[1].bind(pattern)),\n    pattern\n  )\n\n  return regexCache[pattern] = ignorecase\n    ? new RegExp(source, 'i')\n    : new RegExp(source)\n}\n\nconst isString = subject => typeof subject === 'string'\n\n// > A blank line matches no files, so it can serve as a separator for readability.\nconst checkPattern = pattern => pattern\n  && isString(pattern)\n  && !REGEX_TEST_BLANK_LINE.test(pattern)\n\n  // > A line starting with # serves as a comment.\n  && pattern.indexOf('#') !== 0\n\nconst splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF)\n\nclass IgnoreRule {\n  constructor (\n    origin,\n    pattern,\n    negative,\n    regex\n  ) {\n    this.origin = origin\n    this.pattern = pattern\n    this.negative = negative\n    this.regex = regex\n  }\n}\n\nconst createRule = (pattern, ignorecase) => {\n  const origin = pattern\n  let negative = false\n\n  // > An optional prefix \"!\" which negates the pattern;\n  if (pattern.indexOf('!') === 0) {\n    negative = true\n    pattern = pattern.substr(1)\n  }\n\n  pattern = pattern\n  // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!')\n  // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#')\n\n  const regex = makeRegex(pattern, negative, ignorecase)\n\n  return new IgnoreRule(\n    origin,\n    pattern,\n    negative,\n    regex\n  )\n}\n\nconst throwError = (message, Ctor) => {\n  throw new Ctor(message)\n}\n\nconst checkPath = (path, originalPath, doThrow) => {\n  if (!isString(path)) {\n    return doThrow(\n      `path must be a string, but got \\`${originalPath}\\``,\n      TypeError\n    )\n  }\n\n  // We don't know if we should ignore EMPTY, so throw\n  if (!path) {\n    return doThrow(`path must not be empty`, TypeError)\n  }\n\n  // Check if it is a relative path\n  if (checkPath.isNotRelative(path)) {\n    const r = '`path.relative()`d'\n    return doThrow(\n      `path should be a ${r} string, but got \"${originalPath}\"`,\n      RangeError\n    )\n  }\n\n  return true\n}\n\nconst isNotRelative = path => REGEX_TEST_INVALID_PATH.test(path)\n\ncheckPath.isNotRelative = isNotRelative\ncheckPath.convert = p => p\n\nclass Ignore {\n  constructor ({\n    ignorecase = true\n  } = {}) {\n    this._rules = []\n    this._ignorecase = ignorecase\n    define(this, KEY_IGNORE, true)\n    this._initCache()\n  }\n\n  _initCache () {\n    this._ignoreCache = Object.create(null)\n    this._testCache = Object.create(null)\n  }\n\n  _addPattern (pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules)\n      this._added = true\n      return\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignorecase)\n      this._added = true\n      this._rules.push(rule)\n    }\n  }\n\n  // @param {Array<string> | string | Ignore} pattern\n  add (pattern) {\n    this._added = false\n\n    makeArray(\n      isString(pattern)\n        ? splitPattern(pattern)\n        : pattern\n    ).forEach(this._addPattern, this)\n\n    // Some rules have just added to the ignore,\n    // making the behavior changed.\n    if (this._added) {\n      this._initCache()\n    }\n\n    return this\n  }\n\n  // legacy\n  addPattern (pattern) {\n    return this.add(pattern)\n  }\n\n  //          |           ignored : unignored\n  // negative |   0:0   |   0:1   |   1:0   |   1:1\n  // -------- | ------- | ------- | ------- | --------\n  //     0    |  TEST   |  TEST   |  SKIP   |    X\n  //     1    |  TESTIF |  SKIP   |  TEST   |    X\n\n  // - SKIP: always skip\n  // - TEST: always test\n  // - TESTIF: only test if checkUnignored\n  // - X: that never happen\n\n  // @param {boolean} whether should check if the path is unignored,\n  //   setting `checkUnignored` to `false` could reduce additional\n  //   path matching.\n\n  // @returns {TestResult} true if a file is ignored\n  _testOne (path, checkUnignored) {\n    let ignored = false\n    let unignored = false\n\n    this._rules.forEach(rule => {\n      const {negative} = rule\n      if (\n        unignored === negative && ignored !== unignored\n        || negative && !ignored && !unignored && !checkUnignored\n      ) {\n        return\n      }\n\n      const matched = rule.regex.test(path)\n\n      if (matched) {\n        ignored = !negative\n        unignored = negative\n      }\n    })\n\n    return {\n      ignored,\n      unignored\n    }\n  }\n\n  // @returns {TestResult}\n  _test (originalPath, cache, checkUnignored, slices) {\n    const path = originalPath\n      // Supports nullable path\n      && checkPath.convert(originalPath)\n\n    checkPath(path, originalPath, throwError)\n\n    return this._t(path, cache, checkUnignored, slices)\n  }\n\n  _t (path, cache, checkUnignored, slices) {\n    if (path in cache) {\n      return cache[path]\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH)\n    }\n\n    slices.pop()\n\n    // If the path has no parent directory, just test it\n    if (!slices.length) {\n      return cache[path] = this._testOne(path, checkUnignored)\n    }\n\n    const parent = this._t(\n      slices.join(SLASH) + SLASH,\n      cache,\n      checkUnignored,\n      slices\n    )\n\n    // If the path contains a parent directory, check the parent first\n    return cache[path] = parent.ignored\n      // > It is not possible to re-include a file if a parent directory of\n      // >   that file is excluded.\n      ? parent\n      : this._testOne(path, checkUnignored)\n  }\n\n  ignores (path) {\n    return this._test(path, this._ignoreCache, false).ignored\n  }\n\n  createFilter () {\n    return path => !this.ignores(path)\n  }\n\n  filter (paths) {\n    return makeArray(paths).filter(this.createFilter())\n  }\n\n  // @returns {TestResult}\n  test (path) {\n    return this._test(path, this._testCache, true)\n  }\n}\n\nconst factory = options => new Ignore(options)\n\nconst returnFalse = () => false\n\nconst isPathValid = path =>\n  checkPath(path && checkPath.convert(path), path, returnFalse)\n\nfactory.isPathValid = isPathValid\n\n// Fixes typescript\nfactory.default = factory\n\nmodule.exports = factory\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if  */\nif (\n  // Detect `process` so that it can run in browsers.\n  typeof process !== 'undefined'\n  && (\n    process.env && process.env.IGNORE_TEST_WIN32\n    || process.platform === 'win32'\n  )\n) {\n  /* eslint no-control-regex: \"off\" */\n  const makePosix = str => /^\\\\\\\\\\?\\\\/.test(str)\n  || /[\"<>|\\u0000-\\u001F]+/u.test(str)\n    ? str\n    : str.replace(/\\\\/g, '/')\n\n  checkPath.convert = makePosix\n\n  // 'C:\\\\foo'     <- 'C:\\\\foo' has been converted to 'C:/'\n  // 'd:\\\\foo'\n  const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\\//i\n  checkPath.isNotRelative = path =>\n    REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)\n    || isNotRelative(path)\n}\n"]},"metadata":{},"sourceType":"script"}