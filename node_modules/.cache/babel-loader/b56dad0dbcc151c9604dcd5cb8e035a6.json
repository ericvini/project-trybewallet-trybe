{"ast":null,"code":"'use strict';\n\nconst lintPostcssResult = require('./lintPostcssResult');\n\nconst path = require('path');\n/** @typedef {import('stylelint').StylelintInternalApi} StylelintInternalApi */\n\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n\n/** @typedef {import('postcss').Result} Result */\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\n\n\nmodule.exports = function lintSource(stylelint, options = {}) {\n  if (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n    return Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n  }\n\n  const isCodeNotFile = options.code !== undefined;\n  const inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n  if (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n    if (isCodeNotFile) {\n      return Promise.reject(new Error('codeFilename must be an absolute path'));\n    }\n\n    return Promise.reject(new Error('filePath must be an absolute path'));\n  }\n\n  const getIsIgnored = stylelint.isPathIgnored(inputFilePath).catch(err => {\n    if (isCodeNotFile && err.code === 'ENOENT') return false;\n    throw err;\n  });\n  return getIsIgnored.then(isIgnored => {\n    if (isIgnored) {\n      /** @type {PostcssResult} */\n      let postcssResult;\n\n      if (options.existingPostcssResult) {\n        postcssResult = Object.assign(options.existingPostcssResult, {\n          stylelint: createEmptyStylelintPostcssResult()\n        });\n      } else {\n        postcssResult = createEmptyPostcssResult(inputFilePath);\n      }\n\n      return postcssResult;\n    }\n\n    const configSearchPath = stylelint._options.configFile || inputFilePath;\n    const getConfig = stylelint.getConfigForFile(configSearchPath).catch(err => {\n      if (isCodeNotFile && err.code === 'ENOENT') return stylelint.getConfigForFile(process.cwd());\n      throw err;\n    });\n    return getConfig.then(result => {\n      if (!result) {\n        throw new Error('Config file not found');\n      }\n\n      const config = result.config;\n      const existingPostcssResult = options.existingPostcssResult;\n      const stylelintResult = {\n        ruleSeverities: {},\n        customMessages: {},\n        disabledRanges: {}\n      };\n\n      if (existingPostcssResult) {\n        const stylelintPostcssResult = Object.assign(existingPostcssResult, {\n          stylelint: stylelintResult\n        });\n        return lintPostcssResult(stylelint._options, stylelintPostcssResult, config).then(() => stylelintPostcssResult);\n      }\n\n      return stylelint._getPostcssResult({\n        code: options.code,\n        codeFilename: options.codeFilename,\n        filePath: inputFilePath,\n        codeProcessors: config.codeProcessors\n      }).then(postcssResult => {\n        const stylelintPostcssResult = Object.assign(postcssResult, {\n          stylelint: stylelintResult\n        });\n        return lintPostcssResult(stylelint._options, stylelintPostcssResult, config).then(() => stylelintPostcssResult);\n      });\n    });\n  });\n};\n/**\n * @returns {StylelintPostcssResult}\n */\n\n\nfunction createEmptyStylelintPostcssResult() {\n  return {\n    ruleSeverities: {},\n    customMessages: {},\n    disabledRanges: {},\n    ignored: true,\n    stylelintError: false\n  };\n}\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\n\n\nfunction createEmptyPostcssResult(filePath) {\n  return {\n    root: {\n      source: {\n        input: {\n          file: filePath\n        }\n      }\n    },\n    messages: [],\n    opts: undefined,\n    stylelint: createEmptyStylelintPostcssResult(),\n    warn: () => {}\n  };\n}","map":{"version":3,"sources":["/home/eric/sd-07-project-trybewallet/node_modules/stylelint/lib/lintSource.js"],"names":["lintPostcssResult","require","path","module","exports","lintSource","stylelint","options","filePath","code","undefined","existingPostcssResult","Promise","reject","Error","isCodeNotFile","inputFilePath","codeFilename","isAbsolute","getIsIgnored","isPathIgnored","catch","err","then","isIgnored","postcssResult","Object","assign","createEmptyStylelintPostcssResult","createEmptyPostcssResult","configSearchPath","_options","configFile","getConfig","getConfigForFile","process","cwd","result","config","stylelintResult","ruleSeverities","customMessages","disabledRanges","stylelintPostcssResult","_getPostcssResult","codeProcessors","ignored","stylelintError","root","source","input","file","messages","opts","warn"],"mappings":"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","sourcesContent":["'use strict';\n\nconst lintPostcssResult = require('./lintPostcssResult');\nconst path = require('path');\n\n/** @typedef {import('stylelint').StylelintInternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst getIsIgnored = stylelint.isPathIgnored(inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && err.code === 'ENOENT') return false;\n\n\t\tthrow err;\n\t});\n\n\treturn getIsIgnored.then((isIgnored) => {\n\t\tif (isIgnored) {\n\t\t\t/** @type {PostcssResult} */\n\t\t\tlet postcssResult;\n\n\t\t\tif (options.existingPostcssResult) {\n\t\t\t\tpostcssResult = Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpostcssResult = createEmptyPostcssResult(inputFilePath);\n\t\t\t}\n\n\t\t\treturn postcssResult;\n\t\t}\n\n\t\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\n\t\tconst getConfig = stylelint.getConfigForFile(configSearchPath).catch((err) => {\n\t\t\tif (isCodeNotFile && err.code === 'ENOENT') return stylelint.getConfigForFile(process.cwd());\n\n\t\t\tthrow err;\n\t\t});\n\n\t\treturn getConfig.then((result) => {\n\t\t\tif (!result) {\n\t\t\t\tthrow new Error('Config file not found');\n\t\t\t}\n\n\t\t\tconst config = result.config;\n\t\t\tconst existingPostcssResult = options.existingPostcssResult;\n\t\t\tconst stylelintResult = {\n\t\t\t\truleSeverities: {},\n\t\t\t\tcustomMessages: {},\n\t\t\t\tdisabledRanges: {},\n\t\t\t};\n\n\t\t\tif (existingPostcssResult) {\n\t\t\t\tconst stylelintPostcssResult = Object.assign(existingPostcssResult, {\n\t\t\t\t\tstylelint: stylelintResult,\n\t\t\t\t});\n\n\t\t\t\treturn lintPostcssResult(stylelint._options, stylelintPostcssResult, config).then(\n\t\t\t\t\t() => stylelintPostcssResult,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn stylelint\n\t\t\t\t._getPostcssResult({\n\t\t\t\t\tcode: options.code,\n\t\t\t\t\tcodeFilename: options.codeFilename,\n\t\t\t\t\tfilePath: inputFilePath,\n\t\t\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\t\t})\n\t\t\t\t.then((postcssResult) => {\n\t\t\t\t\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\t\t\t\t\tstylelint: stylelintResult,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn lintPostcssResult(stylelint._options, stylelintPostcssResult, config).then(\n\t\t\t\t\t\t() => stylelintPostcssResult,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t});\n\t});\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}